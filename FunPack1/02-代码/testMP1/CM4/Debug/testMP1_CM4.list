
testMP1_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b14  10000000  10000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10006b14  10006b14  00026b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  10006b64  10006b64  00026b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  10006ba8  10006ba8  0003000c  2**0
                  CONTENTS
  5 .ARM          00000000  10006ba8  10006ba8  0003000c  2**0
                  CONTENTS
  6 .preinit_array 00000000  10006ba8  10006ba8  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10006ba8  10006ba8  00026ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  10006bac  10006bac  00026bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  10020000  10006bb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002000c  1002000c  0003000c  2**0
                  CONTENTS
 11 .bss          000000f4  1002000c  10006bbc  0003000c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10020100  10006cb0  0003000c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d7a0  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002619  00000000  00000000  0004d7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000e30  00000000  00000000  0004fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000d28  00000000  00000000  00050c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038f0f  00000000  00000000  00051950  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000d911  00000000  00000000  0008a85f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00162403  00000000  00000000  00098170  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001fa573  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003b18  00000000  00000000  001fa5f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002000c 	.word	0x1002000c
1000001c:	00000000 	.word	0x00000000
10000020:	10006afc 	.word	0x10006afc

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020010 	.word	0x10020010
1000003c:	10006afc 	.word	0x10006afc

10000040 <strlen>:
10000040:	4603      	mov	r3, r0
10000042:	f813 2b01 	ldrb.w	r2, [r3], #1
10000046:	2a00      	cmp	r2, #0
10000048:	d1fb      	bne.n	10000042 <strlen+0x2>
1000004a:	1a18      	subs	r0, r3, r0
1000004c:	3801      	subs	r0, #1
1000004e:	4770      	bx	lr

10000050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000050:	b480      	push	{r7}
10000052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000054:	4b0f      	ldr	r3, [pc, #60]	; (10000094 <SystemInit+0x44>)
10000056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000005a:	4a0e      	ldr	r2, [pc, #56]	; (10000094 <SystemInit+0x44>)
1000005c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000064:	4b0c      	ldr	r3, [pc, #48]	; (10000098 <SystemInit+0x48>)
10000066:	2200      	movs	r2, #0
10000068:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000006a:	4b0b      	ldr	r3, [pc, #44]	; (10000098 <SystemInit+0x48>)
1000006c:	2200      	movs	r2, #0
1000006e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000070:	4b09      	ldr	r3, [pc, #36]	; (10000098 <SystemInit+0x48>)
10000072:	2200      	movs	r2, #0
10000074:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000076:	4b08      	ldr	r3, [pc, #32]	; (10000098 <SystemInit+0x48>)
10000078:	2200      	movs	r2, #0
1000007a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000007c:	4b06      	ldr	r3, [pc, #24]	; (10000098 <SystemInit+0x48>)
1000007e:	2200      	movs	r2, #0
10000080:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000082:	4b05      	ldr	r3, [pc, #20]	; (10000098 <SystemInit+0x48>)
10000084:	2200      	movs	r2, #0
10000086:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000088:	bf00      	nop
1000008a:	46bd      	mov	sp, r7
1000008c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000090:	4770      	bx	lr
10000092:	bf00      	nop
10000094:	e000ed00 	.word	0xe000ed00
10000098:	5000d0c0 	.word	0x5000d0c0

1000009c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
1000009c:	b480      	push	{r7}
1000009e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
100000a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000a4:	f44f 7280 	mov.w	r2, #256	; 0x100
100000a8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOD_CLK_ENABLE();
100000ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000b0:	2208      	movs	r2, #8
100000b2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
100000b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000ba:	2220      	movs	r2, #32
100000bc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

}
100000c0:	bf00      	nop
100000c2:	46bd      	mov	sp, r7
100000c4:	f85d 7b04 	ldr.w	r7, [sp], #4
100000c8:	4770      	bx	lr
	...

100000cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
100000cc:	b5b0      	push	{r4, r5, r7, lr}
100000ce:	b090      	sub	sp, #64	; 0x40
100000d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
100000d2:	f000 fa77 	bl	100005c4 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
100000d6:	4b29      	ldr	r3, [pc, #164]	; (1000017c <main+0xb0>)
100000d8:	681b      	ldr	r3, [r3, #0]
100000da:	f003 0307 	and.w	r3, r3, #7
100000de:	2b04      	cmp	r3, #4
100000e0:	d101      	bne.n	100000e6 <main+0x1a>
  {
    /* Configure the system clock */
    SystemClock_Config();
100000e2:	f000 f853 	bl	1000018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
100000e6:	f7ff ffd9 	bl	1000009c <MX_GPIO_Init>
  MX_TIM5_Init();
100000ea:	f000 f901 	bl	100002f0 <MX_TIM5_Init>
  MX_USART2_UART_Init();
100000ee:	f000 f99f 	bl	10000430 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_4);
100000f2:	210c      	movs	r1, #12
100000f4:	4822      	ldr	r0, [pc, #136]	; (10000180 <main+0xb4>)
100000f6:	f004 faa9 	bl	1000464c <HAL_TIM_PWM_Start>
  char ch[50]="DCV16(10,100,'HelloWorld',1);\r\n";
100000fa:	4b22      	ldr	r3, [pc, #136]	; (10000184 <main+0xb8>)
100000fc:	1d3c      	adds	r4, r7, #4
100000fe:	461d      	mov	r5, r3
10000100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10000102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10000104:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10000108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1000010c:	f107 0324 	add.w	r3, r7, #36	; 0x24
10000110:	2200      	movs	r2, #0
10000112:	601a      	str	r2, [r3, #0]
10000114:	605a      	str	r2, [r3, #4]
10000116:	609a      	str	r2, [r3, #8]
10000118:	60da      	str	r2, [r3, #12]
1000011a:	821a      	strh	r2, [r3, #16]
  HAL_UART_Transmit(&huart2,ch,strlen(ch),0xff);
1000011c:	1d3b      	adds	r3, r7, #4
1000011e:	4618      	mov	r0, r3
10000120:	f7ff ff8e 	bl	10000040 <strlen>
10000124:	4603      	mov	r3, r0
10000126:	b29a      	uxth	r2, r3
10000128:	1d39      	adds	r1, r7, #4
1000012a:	23ff      	movs	r3, #255	; 0xff
1000012c:	4816      	ldr	r0, [pc, #88]	; (10000188 <main+0xbc>)
1000012e:	f005 f82d 	bl	1000518c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i =0;i<1000;i++){
10000132:	2300      	movs	r3, #0
10000134:	63fb      	str	r3, [r7, #60]	; 0x3c
10000136:	e009      	b.n	1000014c <main+0x80>
		  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,i);
10000138:	4b11      	ldr	r3, [pc, #68]	; (10000180 <main+0xb4>)
1000013a:	681b      	ldr	r3, [r3, #0]
1000013c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1000013e:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(1);
10000140:	2001      	movs	r0, #1
10000142:	f000 faaf 	bl	100006a4 <HAL_Delay>
	  for (int i =0;i<1000;i++){
10000146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10000148:	3301      	adds	r3, #1
1000014a:	63fb      	str	r3, [r7, #60]	; 0x3c
1000014c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000014e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10000152:	dbf1      	blt.n	10000138 <main+0x6c>
	  }
	  for (int i =0;i<1000;i++){
10000154:	2300      	movs	r3, #0
10000156:	63bb      	str	r3, [r7, #56]	; 0x38
10000158:	e00b      	b.n	10000172 <main+0xa6>
	  		  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,1000-i);
1000015a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000015c:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
10000160:	4b07      	ldr	r3, [pc, #28]	; (10000180 <main+0xb4>)
10000162:	681b      	ldr	r3, [r3, #0]
10000164:	641a      	str	r2, [r3, #64]	; 0x40
	  		  HAL_Delay(1);
10000166:	2001      	movs	r0, #1
10000168:	f000 fa9c 	bl	100006a4 <HAL_Delay>
	  for (int i =0;i<1000;i++){
1000016c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000016e:	3301      	adds	r3, #1
10000170:	63bb      	str	r3, [r7, #56]	; 0x38
10000172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10000174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10000178:	dbef      	blt.n	1000015a <main+0x8e>
	  for (int i =0;i<1000;i++){
1000017a:	e7da      	b.n	10000132 <main+0x66>
1000017c:	50020000 	.word	0x50020000
10000180:	10020028 	.word	0x10020028
10000184:	10006b64 	.word	0x10006b64
10000188:	10020068 	.word	0x10020068

1000018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
1000018c:	b580      	push	{r7, lr}
1000018e:	b0d2      	sub	sp, #328	; 0x148
10000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000192:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000196:	4618      	mov	r0, r3
10000198:	f44f 738a 	mov.w	r3, #276	; 0x114
1000019c:	461a      	mov	r2, r3
1000019e:	2100      	movs	r1, #0
100001a0:	f006 fca4 	bl	10006aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100001a4:	1d3b      	adds	r3, r7, #4
100001a6:	4618      	mov	r0, r3
100001a8:	2330      	movs	r3, #48	; 0x30
100001aa:	461a      	mov	r2, r3
100001ac:	2100      	movs	r1, #0
100001ae:	f006 fc9d 	bl	10006aec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
100001b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001b6:	220a      	movs	r2, #10
100001b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
100001ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001be:	2201      	movs	r2, #1
100001c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
100001c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001c6:	2210      	movs	r2, #16
100001c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
100001ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001ce:	2200      	movs	r2, #0
100001d0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
100001d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001d6:	2201      	movs	r2, #1
100001d8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
100001da:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001de:	2200      	movs	r2, #0
100001e0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
100001e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001e6:	2200      	movs	r2, #0
100001e8:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
100001ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001ee:	2200      	movs	r2, #0
100001f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
100001f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001f8:	2200      	movs	r2, #0
100001fa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100001fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000202:	4618      	mov	r0, r3
10000204:	f000 fcfe 	bl	10000c04 <HAL_RCC_OscConfig>
10000208:	4603      	mov	r3, r0
1000020a:	2b00      	cmp	r3, #0
1000020c:	d001      	beq.n	10000212 <SystemClock_Config+0x86>
  {
    Error_Handler();
1000020e:	f000 f82c 	bl	1000026a <Error_Handler>
  }
  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000212:	1d3b      	adds	r3, r7, #4
10000214:	22fe      	movs	r2, #254	; 0xfe
10000216:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
10000218:	1d3b      	adds	r3, r7, #4
1000021a:	2200      	movs	r2, #0
1000021c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
1000021e:	1d3b      	adds	r3, r7, #4
10000220:	2200      	movs	r2, #0
10000222:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_HSI;
10000224:	1d3b      	adds	r3, r7, #4
10000226:	2200      	movs	r2, #0
10000228:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
1000022a:	1d3b      	adds	r3, r7, #4
1000022c:	2200      	movs	r2, #0
1000022e:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
10000230:	1d3b      	adds	r3, r7, #4
10000232:	2200      	movs	r2, #0
10000234:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
10000236:	1d3b      	adds	r3, r7, #4
10000238:	2200      	movs	r2, #0
1000023a:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV1;
1000023c:	1d3b      	adds	r3, r7, #4
1000023e:	2200      	movs	r2, #0
10000240:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV1;
10000242:	1d3b      	adds	r3, r7, #4
10000244:	2200      	movs	r2, #0
10000246:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV1;
10000248:	1d3b      	adds	r3, r7, #4
1000024a:	2200      	movs	r2, #0
1000024c:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
1000024e:	1d3b      	adds	r3, r7, #4
10000250:	4618      	mov	r0, r3
10000252:	f001 fa73 	bl	1000173c <HAL_RCC_ClockConfig>
10000256:	4603      	mov	r3, r0
10000258:	2b00      	cmp	r3, #0
1000025a:	d001      	beq.n	10000260 <SystemClock_Config+0xd4>
  {
    Error_Handler();
1000025c:	f000 f805 	bl	1000026a <Error_Handler>
  }
}
10000260:	bf00      	nop
10000262:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000266:	46bd      	mov	sp, r7
10000268:	bd80      	pop	{r7, pc}

1000026a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
1000026a:	b480      	push	{r7}
1000026c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
1000026e:	bf00      	nop
10000270:	46bd      	mov	sp, r7
10000272:	f85d 7b04 	ldr.w	r7, [sp], #4
10000276:	4770      	bx	lr

10000278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10000278:	b480      	push	{r7}
1000027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
1000027c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000280:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000284:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10000288:	bf00      	nop
1000028a:	46bd      	mov	sp, r7
1000028c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000290:	4770      	bx	lr

10000292 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10000292:	b480      	push	{r7}
10000294:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
10000296:	bf00      	nop
10000298:	46bd      	mov	sp, r7
1000029a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000029e:	4770      	bx	lr

100002a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100002a0:	b480      	push	{r7}
100002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100002a4:	e7fe      	b.n	100002a4 <HardFault_Handler+0x4>

100002a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
100002a6:	b480      	push	{r7}
100002a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100002aa:	e7fe      	b.n	100002aa <MemManage_Handler+0x4>

100002ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
100002ac:	b480      	push	{r7}
100002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
100002b0:	e7fe      	b.n	100002b0 <BusFault_Handler+0x4>

100002b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
100002b2:	b480      	push	{r7}
100002b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
100002b6:	e7fe      	b.n	100002b6 <UsageFault_Handler+0x4>

100002b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100002b8:	b480      	push	{r7}
100002ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100002bc:	bf00      	nop
100002be:	46bd      	mov	sp, r7
100002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100002c4:	4770      	bx	lr

100002c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
100002c6:	b480      	push	{r7}
100002c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
100002ca:	bf00      	nop
100002cc:	46bd      	mov	sp, r7
100002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
100002d2:	4770      	bx	lr

100002d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
100002d4:	b480      	push	{r7}
100002d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100002d8:	bf00      	nop
100002da:	46bd      	mov	sp, r7
100002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
100002e0:	4770      	bx	lr

100002e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100002e2:	b580      	push	{r7, lr}
100002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100002e6:	f000 f9bd 	bl	10000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100002ea:	bf00      	nop
100002ec:	bd80      	pop	{r7, pc}
	...

100002f0 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
100002f0:	b580      	push	{r7, lr}
100002f2:	b08a      	sub	sp, #40	; 0x28
100002f4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
100002f6:	f107 031c 	add.w	r3, r7, #28
100002fa:	2200      	movs	r2, #0
100002fc:	601a      	str	r2, [r3, #0]
100002fe:	605a      	str	r2, [r3, #4]
10000300:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
10000302:	463b      	mov	r3, r7
10000304:	2200      	movs	r2, #0
10000306:	601a      	str	r2, [r3, #0]
10000308:	605a      	str	r2, [r3, #4]
1000030a:	609a      	str	r2, [r3, #8]
1000030c:	60da      	str	r2, [r3, #12]
1000030e:	611a      	str	r2, [r3, #16]
10000310:	615a      	str	r2, [r3, #20]
10000312:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
10000314:	4b21      	ldr	r3, [pc, #132]	; (1000039c <MX_TIM5_Init+0xac>)
10000316:	4a22      	ldr	r2, [pc, #136]	; (100003a0 <MX_TIM5_Init+0xb0>)
10000318:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64-1;
1000031a:	4b20      	ldr	r3, [pc, #128]	; (1000039c <MX_TIM5_Init+0xac>)
1000031c:	223f      	movs	r2, #63	; 0x3f
1000031e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
10000320:	4b1e      	ldr	r3, [pc, #120]	; (1000039c <MX_TIM5_Init+0xac>)
10000322:	2200      	movs	r2, #0
10000324:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
10000326:	4b1d      	ldr	r3, [pc, #116]	; (1000039c <MX_TIM5_Init+0xac>)
10000328:	f240 32e7 	movw	r2, #999	; 0x3e7
1000032c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1000032e:	4b1b      	ldr	r3, [pc, #108]	; (1000039c <MX_TIM5_Init+0xac>)
10000330:	2200      	movs	r2, #0
10000332:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
10000334:	4b19      	ldr	r3, [pc, #100]	; (1000039c <MX_TIM5_Init+0xac>)
10000336:	2200      	movs	r2, #0
10000338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
1000033a:	4818      	ldr	r0, [pc, #96]	; (1000039c <MX_TIM5_Init+0xac>)
1000033c:	f004 f95a 	bl	100045f4 <HAL_TIM_PWM_Init>
10000340:	4603      	mov	r3, r0
10000342:	2b00      	cmp	r3, #0
10000344:	d001      	beq.n	1000034a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
10000346:	f7ff ff90 	bl	1000026a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1000034a:	2300      	movs	r3, #0
1000034c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1000034e:	2300      	movs	r3, #0
10000350:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
10000352:	f107 031c 	add.w	r3, r7, #28
10000356:	4619      	mov	r1, r3
10000358:	4810      	ldr	r0, [pc, #64]	; (1000039c <MX_TIM5_Init+0xac>)
1000035a:	f004 fe6d 	bl	10005038 <HAL_TIMEx_MasterConfigSynchronization>
1000035e:	4603      	mov	r3, r0
10000360:	2b00      	cmp	r3, #0
10000362:	d001      	beq.n	10000368 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
10000364:	f7ff ff81 	bl	1000026a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
10000368:	2360      	movs	r3, #96	; 0x60
1000036a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
1000036c:	2300      	movs	r3, #0
1000036e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
10000370:	2300      	movs	r3, #0
10000372:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
10000374:	2300      	movs	r3, #0
10000376:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
10000378:	463b      	mov	r3, r7
1000037a:	220c      	movs	r2, #12
1000037c:	4619      	mov	r1, r3
1000037e:	4807      	ldr	r0, [pc, #28]	; (1000039c <MX_TIM5_Init+0xac>)
10000380:	f004 f9ba 	bl	100046f8 <HAL_TIM_PWM_ConfigChannel>
10000384:	4603      	mov	r3, r0
10000386:	2b00      	cmp	r3, #0
10000388:	d001      	beq.n	1000038e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
1000038a:	f7ff ff6e 	bl	1000026a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
1000038e:	4803      	ldr	r0, [pc, #12]	; (1000039c <MX_TIM5_Init+0xac>)
10000390:	f000 f81e 	bl	100003d0 <HAL_TIM_MspPostInit>

}
10000394:	bf00      	nop
10000396:	3728      	adds	r7, #40	; 0x28
10000398:	46bd      	mov	sp, r7
1000039a:	bd80      	pop	{r7, pc}
1000039c:	10020028 	.word	0x10020028
100003a0:	40003000 	.word	0x40003000

100003a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
100003a4:	b480      	push	{r7}
100003a6:	b083      	sub	sp, #12
100003a8:	af00      	add	r7, sp, #0
100003aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
100003ac:	687b      	ldr	r3, [r7, #4]
100003ae:	681b      	ldr	r3, [r3, #0]
100003b0:	4a06      	ldr	r2, [pc, #24]	; (100003cc <HAL_TIM_PWM_MspInit+0x28>)
100003b2:	4293      	cmp	r3, r2
100003b4:	d104      	bne.n	100003c0 <HAL_TIM_PWM_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
100003b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100003ba:	2208      	movs	r2, #8
100003bc:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
100003c0:	bf00      	nop
100003c2:	370c      	adds	r7, #12
100003c4:	46bd      	mov	sp, r7
100003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
100003ca:	4770      	bx	lr
100003cc:	40003000 	.word	0x40003000

100003d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
100003d0:	b580      	push	{r7, lr}
100003d2:	b088      	sub	sp, #32
100003d4:	af00      	add	r7, sp, #0
100003d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
100003d8:	f107 030c 	add.w	r3, r7, #12
100003dc:	2200      	movs	r2, #0
100003de:	601a      	str	r2, [r3, #0]
100003e0:	605a      	str	r2, [r3, #4]
100003e2:	609a      	str	r2, [r3, #8]
100003e4:	60da      	str	r2, [r3, #12]
100003e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
100003e8:	687b      	ldr	r3, [r7, #4]
100003ea:	681b      	ldr	r3, [r3, #0]
100003ec:	4a0e      	ldr	r2, [pc, #56]	; (10000428 <HAL_TIM_MspPostInit+0x58>)
100003ee:	4293      	cmp	r3, r2
100003f0:	d115      	bne.n	1000041e <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
100003f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100003f6:	f44f 7280 	mov.w	r2, #256	; 0x100
100003fa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**TIM5 GPIO Configuration
    PI0     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
100003fe:	2301      	movs	r3, #1
10000400:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10000402:	2302      	movs	r3, #2
10000404:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10000406:	2300      	movs	r3, #0
10000408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1000040a:	2300      	movs	r3, #0
1000040c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
1000040e:	2302      	movs	r3, #2
10000410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
10000412:	f107 030c 	add.w	r3, r7, #12
10000416:	4619      	mov	r1, r3
10000418:	4804      	ldr	r0, [pc, #16]	; (1000042c <HAL_TIM_MspPostInit+0x5c>)
1000041a:	f000 fa4b 	bl	100008b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
1000041e:	bf00      	nop
10000420:	3720      	adds	r7, #32
10000422:	46bd      	mov	sp, r7
10000424:	bd80      	pop	{r7, pc}
10000426:	bf00      	nop
10000428:	40003000 	.word	0x40003000
1000042c:	5000a000 	.word	0x5000a000

10000430 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
10000430:	b580      	push	{r7, lr}
10000432:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
10000434:	4b22      	ldr	r3, [pc, #136]	; (100004c0 <MX_USART2_UART_Init+0x90>)
10000436:	4a23      	ldr	r2, [pc, #140]	; (100004c4 <MX_USART2_UART_Init+0x94>)
10000438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
1000043a:	4b21      	ldr	r3, [pc, #132]	; (100004c0 <MX_USART2_UART_Init+0x90>)
1000043c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
10000440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
10000442:	4b1f      	ldr	r3, [pc, #124]	; (100004c0 <MX_USART2_UART_Init+0x90>)
10000444:	2200      	movs	r2, #0
10000446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
10000448:	4b1d      	ldr	r3, [pc, #116]	; (100004c0 <MX_USART2_UART_Init+0x90>)
1000044a:	2200      	movs	r2, #0
1000044c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
1000044e:	4b1c      	ldr	r3, [pc, #112]	; (100004c0 <MX_USART2_UART_Init+0x90>)
10000450:	2200      	movs	r2, #0
10000452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
10000454:	4b1a      	ldr	r3, [pc, #104]	; (100004c0 <MX_USART2_UART_Init+0x90>)
10000456:	220c      	movs	r2, #12
10000458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1000045a:	4b19      	ldr	r3, [pc, #100]	; (100004c0 <MX_USART2_UART_Init+0x90>)
1000045c:	2200      	movs	r2, #0
1000045e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
10000460:	4b17      	ldr	r3, [pc, #92]	; (100004c0 <MX_USART2_UART_Init+0x90>)
10000462:	2200      	movs	r2, #0
10000464:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10000466:	4b16      	ldr	r3, [pc, #88]	; (100004c0 <MX_USART2_UART_Init+0x90>)
10000468:	2200      	movs	r2, #0
1000046a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
1000046c:	4b14      	ldr	r3, [pc, #80]	; (100004c0 <MX_USART2_UART_Init+0x90>)
1000046e:	2200      	movs	r2, #0
10000470:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10000472:	4b13      	ldr	r3, [pc, #76]	; (100004c0 <MX_USART2_UART_Init+0x90>)
10000474:	2200      	movs	r2, #0
10000476:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
10000478:	4811      	ldr	r0, [pc, #68]	; (100004c0 <MX_USART2_UART_Init+0x90>)
1000047a:	f004 fe37 	bl	100050ec <HAL_UART_Init>
1000047e:	4603      	mov	r3, r0
10000480:	2b00      	cmp	r3, #0
10000482:	d001      	beq.n	10000488 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
10000484:	f7ff fef1 	bl	1000026a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10000488:	2100      	movs	r1, #0
1000048a:	480d      	ldr	r0, [pc, #52]	; (100004c0 <MX_USART2_UART_Init+0x90>)
1000048c:	f006 fa25 	bl	100068da <HAL_UARTEx_SetTxFifoThreshold>
10000490:	4603      	mov	r3, r0
10000492:	2b00      	cmp	r3, #0
10000494:	d001      	beq.n	1000049a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
10000496:	f7ff fee8 	bl	1000026a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
1000049a:	2100      	movs	r1, #0
1000049c:	4808      	ldr	r0, [pc, #32]	; (100004c0 <MX_USART2_UART_Init+0x90>)
1000049e:	f006 fa5a 	bl	10006956 <HAL_UARTEx_SetRxFifoThreshold>
100004a2:	4603      	mov	r3, r0
100004a4:	2b00      	cmp	r3, #0
100004a6:	d001      	beq.n	100004ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
100004a8:	f7ff fedf 	bl	1000026a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
100004ac:	4804      	ldr	r0, [pc, #16]	; (100004c0 <MX_USART2_UART_Init+0x90>)
100004ae:	f006 f9db 	bl	10006868 <HAL_UARTEx_DisableFifoMode>
100004b2:	4603      	mov	r3, r0
100004b4:	2b00      	cmp	r3, #0
100004b6:	d001      	beq.n	100004bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
100004b8:	f7ff fed7 	bl	1000026a <Error_Handler>
  }

}
100004bc:	bf00      	nop
100004be:	bd80      	pop	{r7, pc}
100004c0:	10020068 	.word	0x10020068
100004c4:	4000e000 	.word	0x4000e000

100004c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
100004c8:	b590      	push	{r4, r7, lr}
100004ca:	b0df      	sub	sp, #380	; 0x17c
100004cc:	af00      	add	r7, sp, #0
100004ce:	1d3b      	adds	r3, r7, #4
100004d0:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
100004d2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100004d6:	2200      	movs	r2, #0
100004d8:	601a      	str	r2, [r3, #0]
100004da:	605a      	str	r2, [r3, #4]
100004dc:	609a      	str	r2, [r3, #8]
100004de:	60da      	str	r2, [r3, #12]
100004e0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100004e2:	f107 0308 	add.w	r3, r7, #8
100004e6:	4618      	mov	r0, r3
100004e8:	f44f 73ac 	mov.w	r3, #344	; 0x158
100004ec:	461a      	mov	r2, r3
100004ee:	2100      	movs	r1, #0
100004f0:	f006 fafc 	bl	10006aec <memset>
  if(uartHandle->Instance==USART2)
100004f4:	1d3b      	adds	r3, r7, #4
100004f6:	681b      	ldr	r3, [r3, #0]
100004f8:	681b      	ldr	r3, [r3, #0]
100004fa:	4a2e      	ldr	r2, [pc, #184]	; (100005b4 <HAL_UART_MspInit+0xec>)
100004fc:	4293      	cmp	r3, r2
100004fe:	d154      	bne.n	100005aa <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10000500:	4b2d      	ldr	r3, [pc, #180]	; (100005b8 <HAL_UART_MspInit+0xf0>)
10000502:	681b      	ldr	r3, [r3, #0]
10000504:	f003 0307 	and.w	r3, r3, #7
10000508:	2b04      	cmp	r3, #4
1000050a:	d116      	bne.n	1000053a <HAL_UART_MspInit+0x72>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART24;
1000050c:	f107 0208 	add.w	r2, r7, #8
10000510:	f04f 0302 	mov.w	r3, #2
10000514:	f04f 0400 	mov.w	r4, #0
10000518:	e9c2 3400 	strd	r3, r4, [r2]
    PeriphClkInit.Uart24ClockSelection = RCC_UART24CLKSOURCE_PCLK1;
1000051c:	f107 0308 	add.w	r3, r7, #8
10000520:	2200      	movs	r2, #0
10000522:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000526:	f107 0308 	add.w	r3, r7, #8
1000052a:	4618      	mov	r0, r3
1000052c:	f002 fbfc 	bl	10002d28 <HAL_RCCEx_PeriphCLKConfig>
10000530:	4603      	mov	r3, r0
10000532:	2b00      	cmp	r3, #0
10000534:	d001      	beq.n	1000053a <HAL_UART_MspInit+0x72>
    {
      Error_Handler();
10000536:	f7ff fe98 	bl	1000026a <Error_Handler>
    }

  }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
1000053a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000053e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
10000542:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80

    __HAL_RCC_GPIOD_CLK_ENABLE();
10000546:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000054a:	2208      	movs	r2, #8
1000054c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOF_CLK_ENABLE();
10000550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000554:	2220      	movs	r2, #32
10000556:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PF5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
1000055a:	2340      	movs	r3, #64	; 0x40
1000055c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF;
10000560:	2302      	movs	r3, #2
10000562:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10000566:	2300      	movs	r3, #0
10000568:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
1000056c:	2307      	movs	r3, #7
1000056e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
10000572:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10000576:	4619      	mov	r1, r3
10000578:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
1000057c:	f000 f99a 	bl	100008b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
10000580:	2320      	movs	r3, #32
10000582:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10000586:	2302      	movs	r3, #2
10000588:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1000058c:	2300      	movs	r3, #0
1000058e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10000592:	2300      	movs	r3, #0
10000594:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
10000598:	2307      	movs	r3, #7
1000059a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
1000059e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100005a2:	4619      	mov	r1, r3
100005a4:	4805      	ldr	r0, [pc, #20]	; (100005bc <HAL_UART_MspInit+0xf4>)
100005a6:	f000 f985 	bl	100008b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
100005aa:	bf00      	nop
100005ac:	f507 77be 	add.w	r7, r7, #380	; 0x17c
100005b0:	46bd      	mov	sp, r7
100005b2:	bd90      	pop	{r4, r7, pc}
100005b4:	4000e000 	.word	0x4000e000
100005b8:	50020000 	.word	0x50020000
100005bc:	50007000 	.word	0x50007000

100005c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
100005c0:	e7fe      	b.n	100005c0 <ADC1_IRQHandler>
	...

100005c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100005c4:	b580      	push	{r7, lr}
100005c6:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
100005c8:	2003      	movs	r0, #3
100005ca:	f000 f93f 	bl	1000084c <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100005ce:	f001 fee9 	bl	100023a4 <HAL_RCC_GetSystemCoreClockFreq>
100005d2:	4602      	mov	r2, r0
100005d4:	4b07      	ldr	r3, [pc, #28]	; (100005f4 <HAL_Init+0x30>)
100005d6:	601a      	str	r2, [r3, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100005d8:	2000      	movs	r0, #0
100005da:	f000 f80d 	bl	100005f8 <HAL_InitTick>
100005de:	4603      	mov	r3, r0
100005e0:	2b00      	cmp	r3, #0
100005e2:	d001      	beq.n	100005e8 <HAL_Init+0x24>
  {
    return HAL_ERROR;
100005e4:	2301      	movs	r3, #1
100005e6:	e002      	b.n	100005ee <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
100005e8:	f7ff fe46 	bl	10000278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
100005ec:	2300      	movs	r3, #0
}
100005ee:	4618      	mov	r0, r3
100005f0:	bd80      	pop	{r7, pc}
100005f2:	bf00      	nop
100005f4:	10020000 	.word	0x10020000

100005f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100005f8:	b580      	push	{r7, lr}
100005fa:	b082      	sub	sp, #8
100005fc:	af00      	add	r7, sp, #0
100005fe:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000600:	4b15      	ldr	r3, [pc, #84]	; (10000658 <HAL_InitTick+0x60>)
10000602:	781b      	ldrb	r3, [r3, #0]
10000604:	2b00      	cmp	r3, #0
10000606:	d101      	bne.n	1000060c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10000608:	2301      	movs	r3, #1
1000060a:	e021      	b.n	10000650 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
1000060c:	4b13      	ldr	r3, [pc, #76]	; (1000065c <HAL_InitTick+0x64>)
1000060e:	681a      	ldr	r2, [r3, #0]
10000610:	4b11      	ldr	r3, [pc, #68]	; (10000658 <HAL_InitTick+0x60>)
10000612:	781b      	ldrb	r3, [r3, #0]
10000614:	4619      	mov	r1, r3
10000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1000061a:	fbb3 f3f1 	udiv	r3, r3, r1
1000061e:	fbb2 f3f3 	udiv	r3, r2, r3
10000622:	4618      	mov	r0, r3
10000624:	f000 f939 	bl	1000089a <HAL_SYSTICK_Config>
10000628:	4603      	mov	r3, r0
1000062a:	2b00      	cmp	r3, #0
1000062c:	d001      	beq.n	10000632 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
1000062e:	2301      	movs	r3, #1
10000630:	e00e      	b.n	10000650 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000632:	687b      	ldr	r3, [r7, #4]
10000634:	2b0f      	cmp	r3, #15
10000636:	d80a      	bhi.n	1000064e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10000638:	2200      	movs	r2, #0
1000063a:	6879      	ldr	r1, [r7, #4]
1000063c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10000640:	f000 f90f 	bl	10000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000644:	4a06      	ldr	r2, [pc, #24]	; (10000660 <HAL_InitTick+0x68>)
10000646:	687b      	ldr	r3, [r7, #4]
10000648:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
1000064a:	2300      	movs	r3, #0
1000064c:	e000      	b.n	10000650 <HAL_InitTick+0x58>
    return HAL_ERROR;
1000064e:	2301      	movs	r3, #1
}
10000650:	4618      	mov	r0, r3
10000652:	3708      	adds	r7, #8
10000654:	46bd      	mov	sp, r7
10000656:	bd80      	pop	{r7, pc}
10000658:	10020008 	.word	0x10020008
1000065c:	10020000 	.word	0x10020000
10000660:	10020004 	.word	0x10020004

10000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000664:	b480      	push	{r7}
10000666:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000668:	4b06      	ldr	r3, [pc, #24]	; (10000684 <HAL_IncTick+0x20>)
1000066a:	781b      	ldrb	r3, [r3, #0]
1000066c:	461a      	mov	r2, r3
1000066e:	4b06      	ldr	r3, [pc, #24]	; (10000688 <HAL_IncTick+0x24>)
10000670:	681b      	ldr	r3, [r3, #0]
10000672:	4413      	add	r3, r2
10000674:	4a04      	ldr	r2, [pc, #16]	; (10000688 <HAL_IncTick+0x24>)
10000676:	6013      	str	r3, [r2, #0]
}
10000678:	bf00      	nop
1000067a:	46bd      	mov	sp, r7
1000067c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000680:	4770      	bx	lr
10000682:	bf00      	nop
10000684:	10020008 	.word	0x10020008
10000688:	100200fc 	.word	0x100200fc

1000068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
1000068c:	b480      	push	{r7}
1000068e:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000690:	4b03      	ldr	r3, [pc, #12]	; (100006a0 <HAL_GetTick+0x14>)
10000692:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000694:	4618      	mov	r0, r3
10000696:	46bd      	mov	sp, r7
10000698:	f85d 7b04 	ldr.w	r7, [sp], #4
1000069c:	4770      	bx	lr
1000069e:	bf00      	nop
100006a0:	100200fc 	.word	0x100200fc

100006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
100006a4:	b580      	push	{r7, lr}
100006a6:	b084      	sub	sp, #16
100006a8:	af00      	add	r7, sp, #0
100006aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100006ac:	f7ff ffee 	bl	1000068c <HAL_GetTick>
100006b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
100006b2:	687b      	ldr	r3, [r7, #4]
100006b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
100006b6:	68fb      	ldr	r3, [r7, #12]
100006b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
100006bc:	d005      	beq.n	100006ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
100006be:	4b09      	ldr	r3, [pc, #36]	; (100006e4 <HAL_Delay+0x40>)
100006c0:	781b      	ldrb	r3, [r3, #0]
100006c2:	461a      	mov	r2, r3
100006c4:	68fb      	ldr	r3, [r7, #12]
100006c6:	4413      	add	r3, r2
100006c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
100006ca:	bf00      	nop
100006cc:	f7ff ffde 	bl	1000068c <HAL_GetTick>
100006d0:	4602      	mov	r2, r0
100006d2:	68bb      	ldr	r3, [r7, #8]
100006d4:	1ad3      	subs	r3, r2, r3
100006d6:	68fa      	ldr	r2, [r7, #12]
100006d8:	429a      	cmp	r2, r3
100006da:	d8f7      	bhi.n	100006cc <HAL_Delay+0x28>
  {
  }
}
100006dc:	bf00      	nop
100006de:	3710      	adds	r7, #16
100006e0:	46bd      	mov	sp, r7
100006e2:	bd80      	pop	{r7, pc}
100006e4:	10020008 	.word	0x10020008

100006e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100006e8:	b480      	push	{r7}
100006ea:	b085      	sub	sp, #20
100006ec:	af00      	add	r7, sp, #0
100006ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
100006f0:	687b      	ldr	r3, [r7, #4]
100006f2:	f003 0307 	and.w	r3, r3, #7
100006f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
100006f8:	4b0c      	ldr	r3, [pc, #48]	; (1000072c <__NVIC_SetPriorityGrouping+0x44>)
100006fa:	68db      	ldr	r3, [r3, #12]
100006fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
100006fe:	68ba      	ldr	r2, [r7, #8]
10000700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10000704:	4013      	ands	r3, r2
10000706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10000708:	68fb      	ldr	r3, [r7, #12]
1000070a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1000070c:	68bb      	ldr	r3, [r7, #8]
1000070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10000718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
1000071a:	4a04      	ldr	r2, [pc, #16]	; (1000072c <__NVIC_SetPriorityGrouping+0x44>)
1000071c:	68bb      	ldr	r3, [r7, #8]
1000071e:	60d3      	str	r3, [r2, #12]
}
10000720:	bf00      	nop
10000722:	3714      	adds	r7, #20
10000724:	46bd      	mov	sp, r7
10000726:	f85d 7b04 	ldr.w	r7, [sp], #4
1000072a:	4770      	bx	lr
1000072c:	e000ed00 	.word	0xe000ed00

10000730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10000730:	b480      	push	{r7}
10000732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10000734:	4b04      	ldr	r3, [pc, #16]	; (10000748 <__NVIC_GetPriorityGrouping+0x18>)
10000736:	68db      	ldr	r3, [r3, #12]
10000738:	0a1b      	lsrs	r3, r3, #8
1000073a:	f003 0307 	and.w	r3, r3, #7
}
1000073e:	4618      	mov	r0, r3
10000740:	46bd      	mov	sp, r7
10000742:	f85d 7b04 	ldr.w	r7, [sp], #4
10000746:	4770      	bx	lr
10000748:	e000ed00 	.word	0xe000ed00

1000074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000074c:	b480      	push	{r7}
1000074e:	b083      	sub	sp, #12
10000750:	af00      	add	r7, sp, #0
10000752:	4603      	mov	r3, r0
10000754:	6039      	str	r1, [r7, #0]
10000756:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000075c:	2b00      	cmp	r3, #0
1000075e:	db0a      	blt.n	10000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000760:	683b      	ldr	r3, [r7, #0]
10000762:	b2da      	uxtb	r2, r3
10000764:	490c      	ldr	r1, [pc, #48]	; (10000798 <__NVIC_SetPriority+0x4c>)
10000766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000076a:	0112      	lsls	r2, r2, #4
1000076c:	b2d2      	uxtb	r2, r2
1000076e:	440b      	add	r3, r1
10000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10000774:	e00a      	b.n	1000078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000776:	683b      	ldr	r3, [r7, #0]
10000778:	b2da      	uxtb	r2, r3
1000077a:	4908      	ldr	r1, [pc, #32]	; (1000079c <__NVIC_SetPriority+0x50>)
1000077c:	88fb      	ldrh	r3, [r7, #6]
1000077e:	f003 030f 	and.w	r3, r3, #15
10000782:	3b04      	subs	r3, #4
10000784:	0112      	lsls	r2, r2, #4
10000786:	b2d2      	uxtb	r2, r2
10000788:	440b      	add	r3, r1
1000078a:	761a      	strb	r2, [r3, #24]
}
1000078c:	bf00      	nop
1000078e:	370c      	adds	r7, #12
10000790:	46bd      	mov	sp, r7
10000792:	f85d 7b04 	ldr.w	r7, [sp], #4
10000796:	4770      	bx	lr
10000798:	e000e100 	.word	0xe000e100
1000079c:	e000ed00 	.word	0xe000ed00

100007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
100007a0:	b480      	push	{r7}
100007a2:	b089      	sub	sp, #36	; 0x24
100007a4:	af00      	add	r7, sp, #0
100007a6:	60f8      	str	r0, [r7, #12]
100007a8:	60b9      	str	r1, [r7, #8]
100007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
100007ac:	68fb      	ldr	r3, [r7, #12]
100007ae:	f003 0307 	and.w	r3, r3, #7
100007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
100007b4:	69fb      	ldr	r3, [r7, #28]
100007b6:	f1c3 0307 	rsb	r3, r3, #7
100007ba:	2b04      	cmp	r3, #4
100007bc:	bf28      	it	cs
100007be:	2304      	movcs	r3, #4
100007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
100007c2:	69fb      	ldr	r3, [r7, #28]
100007c4:	3304      	adds	r3, #4
100007c6:	2b06      	cmp	r3, #6
100007c8:	d902      	bls.n	100007d0 <NVIC_EncodePriority+0x30>
100007ca:	69fb      	ldr	r3, [r7, #28]
100007cc:	3b03      	subs	r3, #3
100007ce:	e000      	b.n	100007d2 <NVIC_EncodePriority+0x32>
100007d0:	2300      	movs	r3, #0
100007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100007d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
100007d8:	69bb      	ldr	r3, [r7, #24]
100007da:	fa02 f303 	lsl.w	r3, r2, r3
100007de:	43da      	mvns	r2, r3
100007e0:	68bb      	ldr	r3, [r7, #8]
100007e2:	401a      	ands	r2, r3
100007e4:	697b      	ldr	r3, [r7, #20]
100007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
100007e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
100007ec:	697b      	ldr	r3, [r7, #20]
100007ee:	fa01 f303 	lsl.w	r3, r1, r3
100007f2:	43d9      	mvns	r1, r3
100007f4:	687b      	ldr	r3, [r7, #4]
100007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100007f8:	4313      	orrs	r3, r2
         );
}
100007fa:	4618      	mov	r0, r3
100007fc:	3724      	adds	r7, #36	; 0x24
100007fe:	46bd      	mov	sp, r7
10000800:	f85d 7b04 	ldr.w	r7, [sp], #4
10000804:	4770      	bx	lr
	...

10000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10000808:	b580      	push	{r7, lr}
1000080a:	b082      	sub	sp, #8
1000080c:	af00      	add	r7, sp, #0
1000080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10000810:	687b      	ldr	r3, [r7, #4]
10000812:	3b01      	subs	r3, #1
10000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10000818:	d301      	bcc.n	1000081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1000081a:	2301      	movs	r3, #1
1000081c:	e00f      	b.n	1000083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000081e:	4a0a      	ldr	r2, [pc, #40]	; (10000848 <SysTick_Config+0x40>)
10000820:	687b      	ldr	r3, [r7, #4]
10000822:	3b01      	subs	r3, #1
10000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10000826:	210f      	movs	r1, #15
10000828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000082c:	f7ff ff8e 	bl	1000074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10000830:	4b05      	ldr	r3, [pc, #20]	; (10000848 <SysTick_Config+0x40>)
10000832:	2200      	movs	r2, #0
10000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10000836:	4b04      	ldr	r3, [pc, #16]	; (10000848 <SysTick_Config+0x40>)
10000838:	2207      	movs	r2, #7
1000083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1000083c:	2300      	movs	r3, #0
}
1000083e:	4618      	mov	r0, r3
10000840:	3708      	adds	r7, #8
10000842:	46bd      	mov	sp, r7
10000844:	bd80      	pop	{r7, pc}
10000846:	bf00      	nop
10000848:	e000e010 	.word	0xe000e010

1000084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
1000084c:	b580      	push	{r7, lr}
1000084e:	b082      	sub	sp, #8
10000850:	af00      	add	r7, sp, #0
10000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10000854:	6878      	ldr	r0, [r7, #4]
10000856:	f7ff ff47 	bl	100006e8 <__NVIC_SetPriorityGrouping>
}
1000085a:	bf00      	nop
1000085c:	3708      	adds	r7, #8
1000085e:	46bd      	mov	sp, r7
10000860:	bd80      	pop	{r7, pc}

10000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000862:	b580      	push	{r7, lr}
10000864:	b086      	sub	sp, #24
10000866:	af00      	add	r7, sp, #0
10000868:	4603      	mov	r3, r0
1000086a:	60b9      	str	r1, [r7, #8]
1000086c:	607a      	str	r2, [r7, #4]
1000086e:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10000870:	2300      	movs	r3, #0
10000872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10000874:	f7ff ff5c 	bl	10000730 <__NVIC_GetPriorityGrouping>
10000878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
1000087a:	687a      	ldr	r2, [r7, #4]
1000087c:	68b9      	ldr	r1, [r7, #8]
1000087e:	6978      	ldr	r0, [r7, #20]
10000880:	f7ff ff8e 	bl	100007a0 <NVIC_EncodePriority>
10000884:	4602      	mov	r2, r0
10000886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
1000088a:	4611      	mov	r1, r2
1000088c:	4618      	mov	r0, r3
1000088e:	f7ff ff5d 	bl	1000074c <__NVIC_SetPriority>
}
10000892:	bf00      	nop
10000894:	3718      	adds	r7, #24
10000896:	46bd      	mov	sp, r7
10000898:	bd80      	pop	{r7, pc}

1000089a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1000089a:	b580      	push	{r7, lr}
1000089c:	b082      	sub	sp, #8
1000089e:	af00      	add	r7, sp, #0
100008a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
100008a2:	6878      	ldr	r0, [r7, #4]
100008a4:	f7ff ffb0 	bl	10000808 <SysTick_Config>
100008a8:	4603      	mov	r3, r0
}
100008aa:	4618      	mov	r0, r3
100008ac:	3708      	adds	r7, #8
100008ae:	46bd      	mov	sp, r7
100008b0:	bd80      	pop	{r7, pc}
	...

100008b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100008b4:	b480      	push	{r7}
100008b6:	b089      	sub	sp, #36	; 0x24
100008b8:	af00      	add	r7, sp, #0
100008ba:	6078      	str	r0, [r7, #4]
100008bc:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
100008be:	4b8a      	ldr	r3, [pc, #552]	; (10000ae8 <HAL_GPIO_Init+0x234>)
100008c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
100008c2:	2300      	movs	r3, #0
100008c4:	61fb      	str	r3, [r7, #28]
100008c6:	e191      	b.n	10000bec <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
100008c8:	2201      	movs	r2, #1
100008ca:	69fb      	ldr	r3, [r7, #28]
100008cc:	fa02 f303 	lsl.w	r3, r2, r3
100008d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
100008d2:	683b      	ldr	r3, [r7, #0]
100008d4:	681b      	ldr	r3, [r3, #0]
100008d6:	693a      	ldr	r2, [r7, #16]
100008d8:	4013      	ands	r3, r2
100008da:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
100008dc:	68fa      	ldr	r2, [r7, #12]
100008de:	693b      	ldr	r3, [r7, #16]
100008e0:	429a      	cmp	r2, r3
100008e2:	f040 8180 	bne.w	10000be6 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100008e6:	683b      	ldr	r3, [r7, #0]
100008e8:	685b      	ldr	r3, [r3, #4]
100008ea:	2b02      	cmp	r3, #2
100008ec:	d003      	beq.n	100008f6 <HAL_GPIO_Init+0x42>
100008ee:	683b      	ldr	r3, [r7, #0]
100008f0:	685b      	ldr	r3, [r3, #4]
100008f2:	2b12      	cmp	r3, #18
100008f4:	d123      	bne.n	1000093e <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
100008f6:	69fb      	ldr	r3, [r7, #28]
100008f8:	08da      	lsrs	r2, r3, #3
100008fa:	687b      	ldr	r3, [r7, #4]
100008fc:	3208      	adds	r2, #8
100008fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10000902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10000904:	69fb      	ldr	r3, [r7, #28]
10000906:	f003 0307 	and.w	r3, r3, #7
1000090a:	009b      	lsls	r3, r3, #2
1000090c:	220f      	movs	r2, #15
1000090e:	fa02 f303 	lsl.w	r3, r2, r3
10000912:	43db      	mvns	r3, r3
10000914:	69ba      	ldr	r2, [r7, #24]
10000916:	4013      	ands	r3, r2
10000918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
1000091a:	683b      	ldr	r3, [r7, #0]
1000091c:	691a      	ldr	r2, [r3, #16]
1000091e:	69fb      	ldr	r3, [r7, #28]
10000920:	f003 0307 	and.w	r3, r3, #7
10000924:	009b      	lsls	r3, r3, #2
10000926:	fa02 f303 	lsl.w	r3, r2, r3
1000092a:	69ba      	ldr	r2, [r7, #24]
1000092c:	4313      	orrs	r3, r2
1000092e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10000930:	69fb      	ldr	r3, [r7, #28]
10000932:	08da      	lsrs	r2, r3, #3
10000934:	687b      	ldr	r3, [r7, #4]
10000936:	3208      	adds	r2, #8
10000938:	69b9      	ldr	r1, [r7, #24]
1000093a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
1000093e:	687b      	ldr	r3, [r7, #4]
10000940:	681b      	ldr	r3, [r3, #0]
10000942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10000944:	69fb      	ldr	r3, [r7, #28]
10000946:	005b      	lsls	r3, r3, #1
10000948:	2203      	movs	r2, #3
1000094a:	fa02 f303 	lsl.w	r3, r2, r3
1000094e:	43db      	mvns	r3, r3
10000950:	69ba      	ldr	r2, [r7, #24]
10000952:	4013      	ands	r3, r2
10000954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10000956:	683b      	ldr	r3, [r7, #0]
10000958:	685b      	ldr	r3, [r3, #4]
1000095a:	f003 0203 	and.w	r2, r3, #3
1000095e:	69fb      	ldr	r3, [r7, #28]
10000960:	005b      	lsls	r3, r3, #1
10000962:	fa02 f303 	lsl.w	r3, r2, r3
10000966:	69ba      	ldr	r2, [r7, #24]
10000968:	4313      	orrs	r3, r2
1000096a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
1000096c:	687b      	ldr	r3, [r7, #4]
1000096e:	69ba      	ldr	r2, [r7, #24]
10000970:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000972:	683b      	ldr	r3, [r7, #0]
10000974:	685b      	ldr	r3, [r3, #4]
10000976:	2b01      	cmp	r3, #1
10000978:	d00b      	beq.n	10000992 <HAL_GPIO_Init+0xde>
1000097a:	683b      	ldr	r3, [r7, #0]
1000097c:	685b      	ldr	r3, [r3, #4]
1000097e:	2b02      	cmp	r3, #2
10000980:	d007      	beq.n	10000992 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000982:	683b      	ldr	r3, [r7, #0]
10000984:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000986:	2b11      	cmp	r3, #17
10000988:	d003      	beq.n	10000992 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000098a:	683b      	ldr	r3, [r7, #0]
1000098c:	685b      	ldr	r3, [r3, #4]
1000098e:	2b12      	cmp	r3, #18
10000990:	d130      	bne.n	100009f4 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10000992:	687b      	ldr	r3, [r7, #4]
10000994:	689b      	ldr	r3, [r3, #8]
10000996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10000998:	69fb      	ldr	r3, [r7, #28]
1000099a:	005b      	lsls	r3, r3, #1
1000099c:	2203      	movs	r2, #3
1000099e:	fa02 f303 	lsl.w	r3, r2, r3
100009a2:	43db      	mvns	r3, r3
100009a4:	69ba      	ldr	r2, [r7, #24]
100009a6:	4013      	ands	r3, r2
100009a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
100009aa:	683b      	ldr	r3, [r7, #0]
100009ac:	68da      	ldr	r2, [r3, #12]
100009ae:	69fb      	ldr	r3, [r7, #28]
100009b0:	005b      	lsls	r3, r3, #1
100009b2:	fa02 f303 	lsl.w	r3, r2, r3
100009b6:	69ba      	ldr	r2, [r7, #24]
100009b8:	4313      	orrs	r3, r2
100009ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
100009bc:	687b      	ldr	r3, [r7, #4]
100009be:	69ba      	ldr	r2, [r7, #24]
100009c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
100009c2:	687b      	ldr	r3, [r7, #4]
100009c4:	685b      	ldr	r3, [r3, #4]
100009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
100009c8:	2201      	movs	r2, #1
100009ca:	69fb      	ldr	r3, [r7, #28]
100009cc:	fa02 f303 	lsl.w	r3, r2, r3
100009d0:	43db      	mvns	r3, r3
100009d2:	69ba      	ldr	r2, [r7, #24]
100009d4:	4013      	ands	r3, r2
100009d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
100009d8:	683b      	ldr	r3, [r7, #0]
100009da:	685b      	ldr	r3, [r3, #4]
100009dc:	091b      	lsrs	r3, r3, #4
100009de:	f003 0201 	and.w	r2, r3, #1
100009e2:	69fb      	ldr	r3, [r7, #28]
100009e4:	fa02 f303 	lsl.w	r3, r2, r3
100009e8:	69ba      	ldr	r2, [r7, #24]
100009ea:	4313      	orrs	r3, r2
100009ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
100009ee:	687b      	ldr	r3, [r7, #4]
100009f0:	69ba      	ldr	r2, [r7, #24]
100009f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
100009f4:	687b      	ldr	r3, [r7, #4]
100009f6:	68db      	ldr	r3, [r3, #12]
100009f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
100009fa:	69fb      	ldr	r3, [r7, #28]
100009fc:	005b      	lsls	r3, r3, #1
100009fe:	2203      	movs	r2, #3
10000a00:	fa02 f303 	lsl.w	r3, r2, r3
10000a04:	43db      	mvns	r3, r3
10000a06:	69ba      	ldr	r2, [r7, #24]
10000a08:	4013      	ands	r3, r2
10000a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10000a0c:	683b      	ldr	r3, [r7, #0]
10000a0e:	689a      	ldr	r2, [r3, #8]
10000a10:	69fb      	ldr	r3, [r7, #28]
10000a12:	005b      	lsls	r3, r3, #1
10000a14:	fa02 f303 	lsl.w	r3, r2, r3
10000a18:	69ba      	ldr	r2, [r7, #24]
10000a1a:	4313      	orrs	r3, r2
10000a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10000a1e:	687b      	ldr	r3, [r7, #4]
10000a20:	69ba      	ldr	r2, [r7, #24]
10000a22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10000a24:	683b      	ldr	r3, [r7, #0]
10000a26:	685b      	ldr	r3, [r3, #4]
10000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10000a2c:	2b00      	cmp	r3, #0
10000a2e:	f000 80da 	beq.w	10000be6 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10000a32:	4a2e      	ldr	r2, [pc, #184]	; (10000aec <HAL_GPIO_Init+0x238>)
10000a34:	69fb      	ldr	r3, [r7, #28]
10000a36:	089b      	lsrs	r3, r3, #2
10000a38:	3318      	adds	r3, #24
10000a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10000a40:	69fb      	ldr	r3, [r7, #28]
10000a42:	f003 0303 	and.w	r3, r3, #3
10000a46:	00db      	lsls	r3, r3, #3
10000a48:	22ff      	movs	r2, #255	; 0xff
10000a4a:	fa02 f303 	lsl.w	r3, r2, r3
10000a4e:	43db      	mvns	r3, r3
10000a50:	69ba      	ldr	r2, [r7, #24]
10000a52:	4013      	ands	r3, r2
10000a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10000a56:	687b      	ldr	r3, [r7, #4]
10000a58:	4a25      	ldr	r2, [pc, #148]	; (10000af0 <HAL_GPIO_Init+0x23c>)
10000a5a:	4293      	cmp	r3, r2
10000a5c:	d05e      	beq.n	10000b1c <HAL_GPIO_Init+0x268>
10000a5e:	687b      	ldr	r3, [r7, #4]
10000a60:	4a24      	ldr	r2, [pc, #144]	; (10000af4 <HAL_GPIO_Init+0x240>)
10000a62:	4293      	cmp	r3, r2
10000a64:	d03d      	beq.n	10000ae2 <HAL_GPIO_Init+0x22e>
10000a66:	687b      	ldr	r3, [r7, #4]
10000a68:	4a23      	ldr	r2, [pc, #140]	; (10000af8 <HAL_GPIO_Init+0x244>)
10000a6a:	4293      	cmp	r3, r2
10000a6c:	d037      	beq.n	10000ade <HAL_GPIO_Init+0x22a>
10000a6e:	687b      	ldr	r3, [r7, #4]
10000a70:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10000a74:	d031      	beq.n	10000ada <HAL_GPIO_Init+0x226>
10000a76:	687b      	ldr	r3, [r7, #4]
10000a78:	4a20      	ldr	r2, [pc, #128]	; (10000afc <HAL_GPIO_Init+0x248>)
10000a7a:	4293      	cmp	r3, r2
10000a7c:	d02b      	beq.n	10000ad6 <HAL_GPIO_Init+0x222>
10000a7e:	687b      	ldr	r3, [r7, #4]
10000a80:	4a1f      	ldr	r2, [pc, #124]	; (10000b00 <HAL_GPIO_Init+0x24c>)
10000a82:	4293      	cmp	r3, r2
10000a84:	d025      	beq.n	10000ad2 <HAL_GPIO_Init+0x21e>
10000a86:	687b      	ldr	r3, [r7, #4]
10000a88:	4a1e      	ldr	r2, [pc, #120]	; (10000b04 <HAL_GPIO_Init+0x250>)
10000a8a:	4293      	cmp	r3, r2
10000a8c:	d01f      	beq.n	10000ace <HAL_GPIO_Init+0x21a>
10000a8e:	687b      	ldr	r3, [r7, #4]
10000a90:	4a1d      	ldr	r2, [pc, #116]	; (10000b08 <HAL_GPIO_Init+0x254>)
10000a92:	4293      	cmp	r3, r2
10000a94:	d019      	beq.n	10000aca <HAL_GPIO_Init+0x216>
10000a96:	687b      	ldr	r3, [r7, #4]
10000a98:	4a1c      	ldr	r2, [pc, #112]	; (10000b0c <HAL_GPIO_Init+0x258>)
10000a9a:	4293      	cmp	r3, r2
10000a9c:	d013      	beq.n	10000ac6 <HAL_GPIO_Init+0x212>
10000a9e:	687b      	ldr	r3, [r7, #4]
10000aa0:	4a1b      	ldr	r2, [pc, #108]	; (10000b10 <HAL_GPIO_Init+0x25c>)
10000aa2:	4293      	cmp	r3, r2
10000aa4:	d00d      	beq.n	10000ac2 <HAL_GPIO_Init+0x20e>
10000aa6:	687b      	ldr	r3, [r7, #4]
10000aa8:	4a1a      	ldr	r2, [pc, #104]	; (10000b14 <HAL_GPIO_Init+0x260>)
10000aaa:	4293      	cmp	r3, r2
10000aac:	d007      	beq.n	10000abe <HAL_GPIO_Init+0x20a>
10000aae:	687b      	ldr	r3, [r7, #4]
10000ab0:	4a19      	ldr	r2, [pc, #100]	; (10000b18 <HAL_GPIO_Init+0x264>)
10000ab2:	4293      	cmp	r3, r2
10000ab4:	d101      	bne.n	10000aba <HAL_GPIO_Init+0x206>
10000ab6:	230b      	movs	r3, #11
10000ab8:	e031      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000aba:	2319      	movs	r3, #25
10000abc:	e02f      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000abe:	230a      	movs	r3, #10
10000ac0:	e02d      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000ac2:	2309      	movs	r3, #9
10000ac4:	e02b      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000ac6:	2308      	movs	r3, #8
10000ac8:	e029      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000aca:	2307      	movs	r3, #7
10000acc:	e027      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000ace:	2306      	movs	r3, #6
10000ad0:	e025      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000ad2:	2305      	movs	r3, #5
10000ad4:	e023      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000ad6:	2304      	movs	r3, #4
10000ad8:	e021      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000ada:	2303      	movs	r3, #3
10000adc:	e01f      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000ade:	2302      	movs	r3, #2
10000ae0:	e01d      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000ae2:	2301      	movs	r3, #1
10000ae4:	e01b      	b.n	10000b1e <HAL_GPIO_Init+0x26a>
10000ae6:	bf00      	nop
10000ae8:	5000d0c0 	.word	0x5000d0c0
10000aec:	5000d000 	.word	0x5000d000
10000af0:	50002000 	.word	0x50002000
10000af4:	50003000 	.word	0x50003000
10000af8:	50004000 	.word	0x50004000
10000afc:	50006000 	.word	0x50006000
10000b00:	50007000 	.word	0x50007000
10000b04:	50008000 	.word	0x50008000
10000b08:	50009000 	.word	0x50009000
10000b0c:	5000a000 	.word	0x5000a000
10000b10:	5000b000 	.word	0x5000b000
10000b14:	5000c000 	.word	0x5000c000
10000b18:	54004000 	.word	0x54004000
10000b1c:	2300      	movs	r3, #0
10000b1e:	69fa      	ldr	r2, [r7, #28]
10000b20:	f002 0203 	and.w	r2, r2, #3
10000b24:	00d2      	lsls	r2, r2, #3
10000b26:	4093      	lsls	r3, r2
10000b28:	461a      	mov	r2, r3
10000b2a:	69bb      	ldr	r3, [r7, #24]
10000b2c:	4313      	orrs	r3, r2
10000b2e:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10000b30:	4933      	ldr	r1, [pc, #204]	; (10000c00 <HAL_GPIO_Init+0x34c>)
10000b32:	69fb      	ldr	r3, [r7, #28]
10000b34:	089b      	lsrs	r3, r3, #2
10000b36:	3318      	adds	r3, #24
10000b38:	69ba      	ldr	r2, [r7, #24]
10000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10000b3e:	697b      	ldr	r3, [r7, #20]
10000b40:	681b      	ldr	r3, [r3, #0]
10000b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000b44:	68fb      	ldr	r3, [r7, #12]
10000b46:	43db      	mvns	r3, r3
10000b48:	69ba      	ldr	r2, [r7, #24]
10000b4a:	4013      	ands	r3, r2
10000b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10000b4e:	683b      	ldr	r3, [r7, #0]
10000b50:	685b      	ldr	r3, [r3, #4]
10000b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10000b56:	2b00      	cmp	r3, #0
10000b58:	d003      	beq.n	10000b62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10000b5a:	69ba      	ldr	r2, [r7, #24]
10000b5c:	68fb      	ldr	r3, [r7, #12]
10000b5e:	4313      	orrs	r3, r2
10000b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10000b62:	697b      	ldr	r3, [r7, #20]
10000b64:	69ba      	ldr	r2, [r7, #24]
10000b66:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10000b68:	697b      	ldr	r3, [r7, #20]
10000b6a:	685b      	ldr	r3, [r3, #4]
10000b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000b6e:	68fb      	ldr	r3, [r7, #12]
10000b70:	43db      	mvns	r3, r3
10000b72:	69ba      	ldr	r2, [r7, #24]
10000b74:	4013      	ands	r3, r2
10000b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10000b78:	683b      	ldr	r3, [r7, #0]
10000b7a:	685b      	ldr	r3, [r3, #4]
10000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10000b80:	2b00      	cmp	r3, #0
10000b82:	d003      	beq.n	10000b8c <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10000b84:	69ba      	ldr	r2, [r7, #24]
10000b86:	68fb      	ldr	r3, [r7, #12]
10000b88:	4313      	orrs	r3, r2
10000b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10000b8c:	697b      	ldr	r3, [r7, #20]
10000b8e:	69ba      	ldr	r2, [r7, #24]
10000b90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10000b92:	4b1b      	ldr	r3, [pc, #108]	; (10000c00 <HAL_GPIO_Init+0x34c>)
10000b94:	681b      	ldr	r3, [r3, #0]
10000b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000b98:	68fb      	ldr	r3, [r7, #12]
10000b9a:	43db      	mvns	r3, r3
10000b9c:	69ba      	ldr	r2, [r7, #24]
10000b9e:	4013      	ands	r3, r2
10000ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10000ba2:	683b      	ldr	r3, [r7, #0]
10000ba4:	685b      	ldr	r3, [r3, #4]
10000ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10000baa:	2b00      	cmp	r3, #0
10000bac:	d003      	beq.n	10000bb6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10000bae:	69ba      	ldr	r2, [r7, #24]
10000bb0:	68fb      	ldr	r3, [r7, #12]
10000bb2:	4313      	orrs	r3, r2
10000bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10000bb6:	4a12      	ldr	r2, [pc, #72]	; (10000c00 <HAL_GPIO_Init+0x34c>)
10000bb8:	69bb      	ldr	r3, [r7, #24]
10000bba:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10000bbc:	4b10      	ldr	r3, [pc, #64]	; (10000c00 <HAL_GPIO_Init+0x34c>)
10000bbe:	685b      	ldr	r3, [r3, #4]
10000bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000bc2:	68fb      	ldr	r3, [r7, #12]
10000bc4:	43db      	mvns	r3, r3
10000bc6:	69ba      	ldr	r2, [r7, #24]
10000bc8:	4013      	ands	r3, r2
10000bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10000bcc:	683b      	ldr	r3, [r7, #0]
10000bce:	685b      	ldr	r3, [r3, #4]
10000bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10000bd4:	2b00      	cmp	r3, #0
10000bd6:	d003      	beq.n	10000be0 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10000bd8:	69ba      	ldr	r2, [r7, #24]
10000bda:	68fb      	ldr	r3, [r7, #12]
10000bdc:	4313      	orrs	r3, r2
10000bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10000be0:	4a07      	ldr	r2, [pc, #28]	; (10000c00 <HAL_GPIO_Init+0x34c>)
10000be2:	69bb      	ldr	r3, [r7, #24]
10000be4:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10000be6:	69fb      	ldr	r3, [r7, #28]
10000be8:	3301      	adds	r3, #1
10000bea:	61fb      	str	r3, [r7, #28]
10000bec:	69fb      	ldr	r3, [r7, #28]
10000bee:	2b0f      	cmp	r3, #15
10000bf0:	f67f ae6a 	bls.w	100008c8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10000bf4:	bf00      	nop
10000bf6:	3724      	adds	r7, #36	; 0x24
10000bf8:	46bd      	mov	sp, r7
10000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
10000bfe:	4770      	bx	lr
10000c00:	5000d000 	.word	0x5000d000

10000c04 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000c04:	b580      	push	{r7, lr}
10000c06:	b084      	sub	sp, #16
10000c08:	af00      	add	r7, sp, #0
10000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000c0c:	2300      	movs	r3, #0
10000c0e:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000c10:	687b      	ldr	r3, [r7, #4]
10000c12:	2b00      	cmp	r3, #0
10000c14:	d101      	bne.n	10000c1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10000c16:	2301      	movs	r3, #1
10000c18:	e31f      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10000c1a:	687b      	ldr	r3, [r7, #4]
10000c1c:	681b      	ldr	r3, [r3, #0]
10000c1e:	f003 0301 	and.w	r3, r3, #1
10000c22:	2b00      	cmp	r3, #0
10000c24:	f000 8081 	beq.w	10000d2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10000c28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c2c:	6a1b      	ldr	r3, [r3, #32]
10000c2e:	f003 0303 	and.w	r3, r3, #3
10000c32:	2b01      	cmp	r3, #1
10000c34:	d107      	bne.n	10000c46 <HAL_RCC_OscConfig+0x42>
10000c36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c3a:	6a1b      	ldr	r3, [r3, #32]
10000c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000c44:	d054      	beq.n	10000cf0 <HAL_RCC_OscConfig+0xec>
10000c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000c4c:	f003 0307 	and.w	r3, r3, #7
10000c50:	2b01      	cmp	r3, #1
10000c52:	d107      	bne.n	10000c64 <HAL_RCC_OscConfig+0x60>
10000c54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000c62:	d045      	beq.n	10000cf0 <HAL_RCC_OscConfig+0xec>
10000c64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000c6a:	f003 0303 	and.w	r3, r3, #3
10000c6e:	2b01      	cmp	r3, #1
10000c70:	d107      	bne.n	10000c82 <HAL_RCC_OscConfig+0x7e>
10000c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000c80:	d036      	beq.n	10000cf0 <HAL_RCC_OscConfig+0xec>
10000c82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000c88:	f003 0303 	and.w	r3, r3, #3
10000c8c:	2b01      	cmp	r3, #1
10000c8e:	d10f      	bne.n	10000cb0 <HAL_RCC_OscConfig+0xac>
10000c90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000c98:	f003 0302 	and.w	r3, r3, #2
10000c9c:	2b02      	cmp	r3, #2
10000c9e:	d027      	beq.n	10000cf0 <HAL_RCC_OscConfig+0xec>
10000ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000ca8:	f003 0302 	and.w	r3, r3, #2
10000cac:	2b02      	cmp	r3, #2
10000cae:	d01f      	beq.n	10000cf0 <HAL_RCC_OscConfig+0xec>
10000cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cb4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000cb8:	f003 0303 	and.w	r3, r3, #3
10000cbc:	2b01      	cmp	r3, #1
10000cbe:	d107      	bne.n	10000cd0 <HAL_RCC_OscConfig+0xcc>
10000cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cc4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000cc8:	f003 0302 	and.w	r3, r3, #2
10000ccc:	2b02      	cmp	r3, #2
10000cce:	d00f      	beq.n	10000cf0 <HAL_RCC_OscConfig+0xec>
10000cd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cd4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000cd8:	f003 0303 	and.w	r3, r3, #3
10000cdc:	2b01      	cmp	r3, #1
10000cde:	d117      	bne.n	10000d10 <HAL_RCC_OscConfig+0x10c>
10000ce0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ce4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000ce8:	f003 0302 	and.w	r3, r3, #2
10000cec:	2b02      	cmp	r3, #2
10000cee:	d10f      	bne.n	10000d10 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000cf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cf4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000d00:	d112      	bne.n	10000d28 <HAL_RCC_OscConfig+0x124>
10000d02:	687b      	ldr	r3, [r7, #4]
10000d04:	685b      	ldr	r3, [r3, #4]
10000d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000d0a:	d00d      	beq.n	10000d28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10000d0c:	2301      	movs	r3, #1
10000d0e:	e2a4      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10000d10:	687b      	ldr	r3, [r7, #4]
10000d12:	685b      	ldr	r3, [r3, #4]
10000d14:	4618      	mov	r0, r3
10000d16:	f000 faa5 	bl	10001264 <HAL_RCC_HSEConfig>
10000d1a:	4603      	mov	r3, r0
10000d1c:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10000d1e:	7bfb      	ldrb	r3, [r7, #15]
10000d20:	2b00      	cmp	r3, #0
10000d22:	d002      	beq.n	10000d2a <HAL_RCC_OscConfig+0x126>
      {
        return result;
10000d24:	7bfb      	ldrb	r3, [r7, #15]
10000d26:	e298      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000d28:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10000d2a:	687b      	ldr	r3, [r7, #4]
10000d2c:	681b      	ldr	r3, [r3, #0]
10000d2e:	f003 0302 	and.w	r3, r3, #2
10000d32:	2b00      	cmp	r3, #0
10000d34:	f000 814e 	beq.w	10000fd4 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10000d38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d3c:	6a1b      	ldr	r3, [r3, #32]
10000d3e:	f003 0303 	and.w	r3, r3, #3
10000d42:	2b00      	cmp	r3, #0
10000d44:	d107      	bne.n	10000d56 <HAL_RCC_OscConfig+0x152>
10000d46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d4a:	6a1b      	ldr	r3, [r3, #32]
10000d4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000d50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000d54:	d055      	beq.n	10000e02 <HAL_RCC_OscConfig+0x1fe>
10000d56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000d5c:	f003 0307 	and.w	r3, r3, #7
10000d60:	2b00      	cmp	r3, #0
10000d62:	d107      	bne.n	10000d74 <HAL_RCC_OscConfig+0x170>
10000d64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000d6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000d72:	d046      	beq.n	10000e02 <HAL_RCC_OscConfig+0x1fe>
10000d74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000d7a:	f003 0303 	and.w	r3, r3, #3
10000d7e:	2b00      	cmp	r3, #0
10000d80:	d107      	bne.n	10000d92 <HAL_RCC_OscConfig+0x18e>
10000d82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000d88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000d90:	d037      	beq.n	10000e02 <HAL_RCC_OscConfig+0x1fe>
10000d92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000d98:	f003 0303 	and.w	r3, r3, #3
10000d9c:	2b00      	cmp	r3, #0
10000d9e:	d10f      	bne.n	10000dc0 <HAL_RCC_OscConfig+0x1bc>
10000da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000da8:	f003 0302 	and.w	r3, r3, #2
10000dac:	2b02      	cmp	r3, #2
10000dae:	d028      	beq.n	10000e02 <HAL_RCC_OscConfig+0x1fe>
10000db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000db8:	f003 0302 	and.w	r3, r3, #2
10000dbc:	2b02      	cmp	r3, #2
10000dbe:	d020      	beq.n	10000e02 <HAL_RCC_OscConfig+0x1fe>
10000dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dc4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000dc8:	f003 0303 	and.w	r3, r3, #3
10000dcc:	2b00      	cmp	r3, #0
10000dce:	d107      	bne.n	10000de0 <HAL_RCC_OscConfig+0x1dc>
10000dd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dd4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000dd8:	f003 0302 	and.w	r3, r3, #2
10000ddc:	2b02      	cmp	r3, #2
10000dde:	d010      	beq.n	10000e02 <HAL_RCC_OscConfig+0x1fe>
10000de0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000de4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000de8:	f003 0303 	and.w	r3, r3, #3
10000dec:	2b00      	cmp	r3, #0
10000dee:	f040 8088 	bne.w	10000f02 <HAL_RCC_OscConfig+0x2fe>
10000df2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000df6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000dfa:	f003 0302 	and.w	r3, r3, #2
10000dfe:	2b02      	cmp	r3, #2
10000e00:	d17f      	bne.n	10000f02 <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000e02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e06:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000e0a:	f003 0301 	and.w	r3, r3, #1
10000e0e:	2b01      	cmp	r3, #1
10000e10:	d105      	bne.n	10000e1e <HAL_RCC_OscConfig+0x21a>
10000e12:	687b      	ldr	r3, [r7, #4]
10000e14:	68db      	ldr	r3, [r3, #12]
10000e16:	2b01      	cmp	r3, #1
10000e18:	d001      	beq.n	10000e1e <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10000e1a:	2301      	movs	r3, #1
10000e1c:	e21d      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e22:	699b      	ldr	r3, [r3, #24]
10000e24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
10000e28:	687b      	ldr	r3, [r7, #4]
10000e2a:	691b      	ldr	r3, [r3, #16]
10000e2c:	021b      	lsls	r3, r3, #8
10000e2e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000e32:	4313      	orrs	r3, r2
10000e34:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000e36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000e3c:	f003 0303 	and.w	r3, r3, #3
10000e40:	2b00      	cmp	r3, #0
10000e42:	d10f      	bne.n	10000e64 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000e44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000e4c:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000e50:	2b02      	cmp	r3, #2
10000e52:	d047      	beq.n	10000ee4 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000e54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000e5c:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000e60:	2b02      	cmp	r3, #2
10000e62:	d03f      	beq.n	10000ee4 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000e64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e68:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000e6c:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000e70:	2b00      	cmp	r3, #0
10000e72:	d107      	bne.n	10000e84 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000e74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e78:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000e7c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000e80:	2b02      	cmp	r3, #2
10000e82:	d02f      	beq.n	10000ee4 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e88:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000e8c:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000e90:	2b00      	cmp	r3, #0
10000e92:	d107      	bne.n	10000ea4 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10000e94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e98:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000e9c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000ea0:	2b02      	cmp	r3, #2
10000ea2:	d01f      	beq.n	10000ee4 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000ea4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ea8:	699b      	ldr	r3, [r3, #24]
10000eaa:	f023 0203 	bic.w	r2, r3, #3
10000eae:	687b      	ldr	r3, [r7, #4]
10000eb0:	695b      	ldr	r3, [r3, #20]
10000eb2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000eb6:	4313      	orrs	r3, r2
10000eb8:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10000eba:	f7ff fbe7 	bl	1000068c <HAL_GetTick>
10000ebe:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000ec0:	e008      	b.n	10000ed4 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000ec2:	f7ff fbe3 	bl	1000068c <HAL_GetTick>
10000ec6:	4602      	mov	r2, r0
10000ec8:	68bb      	ldr	r3, [r7, #8]
10000eca:	1ad3      	subs	r3, r2, r3
10000ecc:	2b64      	cmp	r3, #100	; 0x64
10000ece:	d901      	bls.n	10000ed4 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000ed0:	2303      	movs	r3, #3
10000ed2:	e1c2      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000ed4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ed8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000edc:	f003 0304 	and.w	r3, r3, #4
10000ee0:	2b04      	cmp	r3, #4
10000ee2:	d1ee      	bne.n	10000ec2 <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10000ee4:	f001 fa5e 	bl	100023a4 <HAL_RCC_GetSystemCoreClockFreq>
10000ee8:	4602      	mov	r2, r0
10000eea:	4bc0      	ldr	r3, [pc, #768]	; (100011ec <HAL_RCC_OscConfig+0x5e8>)
10000eec:	601a      	str	r2, [r3, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10000eee:	4bc0      	ldr	r3, [pc, #768]	; (100011f0 <HAL_RCC_OscConfig+0x5ec>)
10000ef0:	681b      	ldr	r3, [r3, #0]
10000ef2:	4618      	mov	r0, r3
10000ef4:	f7ff fb80 	bl	100005f8 <HAL_InitTick>
10000ef8:	4603      	mov	r3, r0
10000efa:	2b00      	cmp	r3, #0
10000efc:	d069      	beq.n	10000fd2 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10000efe:	2301      	movs	r3, #1
10000f00:	e1ab      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10000f02:	687b      	ldr	r3, [r7, #4]
10000f04:	68db      	ldr	r3, [r3, #12]
10000f06:	2b00      	cmp	r3, #0
10000f08:	d049      	beq.n	10000f9e <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10000f0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f0e:	68db      	ldr	r3, [r3, #12]
10000f10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000f14:	f043 0301 	orr.w	r3, r3, #1
10000f18:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000f1a:	f7ff fbb7 	bl	1000068c <HAL_GetTick>
10000f1e:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000f20:	e008      	b.n	10000f34 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000f22:	f7ff fbb3 	bl	1000068c <HAL_GetTick>
10000f26:	4602      	mov	r2, r0
10000f28:	68bb      	ldr	r3, [r7, #8]
10000f2a:	1ad3      	subs	r3, r2, r3
10000f2c:	2b64      	cmp	r3, #100	; 0x64
10000f2e:	d901      	bls.n	10000f34 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10000f30:	2303      	movs	r3, #3
10000f32:	e192      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000f34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f38:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000f3c:	f003 0301 	and.w	r3, r3, #1
10000f40:	2b01      	cmp	r3, #1
10000f42:	d1ee      	bne.n	10000f22 <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f48:	699b      	ldr	r3, [r3, #24]
10000f4a:	f023 0203 	bic.w	r2, r3, #3
10000f4e:	687b      	ldr	r3, [r7, #4]
10000f50:	695b      	ldr	r3, [r3, #20]
10000f52:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000f56:	4313      	orrs	r3, r2
10000f58:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000f5a:	f7ff fb97 	bl	1000068c <HAL_GetTick>
10000f5e:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000f60:	e008      	b.n	10000f74 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000f62:	f7ff fb93 	bl	1000068c <HAL_GetTick>
10000f66:	4602      	mov	r2, r0
10000f68:	68bb      	ldr	r3, [r7, #8]
10000f6a:	1ad3      	subs	r3, r2, r3
10000f6c:	2b64      	cmp	r3, #100	; 0x64
10000f6e:	d901      	bls.n	10000f74 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10000f70:	2303      	movs	r3, #3
10000f72:	e172      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000f74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f78:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000f7c:	f003 0304 	and.w	r3, r3, #4
10000f80:	2b04      	cmp	r3, #4
10000f82:	d1ee      	bne.n	10000f62 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000f84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f88:	699b      	ldr	r3, [r3, #24]
10000f8a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
10000f8e:	687b      	ldr	r3, [r7, #4]
10000f90:	691b      	ldr	r3, [r3, #16]
10000f92:	021b      	lsls	r3, r3, #8
10000f94:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000f98:	4313      	orrs	r3, r2
10000f9a:	618b      	str	r3, [r1, #24]
10000f9c:	e01a      	b.n	10000fd4 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10000f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fa2:	2201      	movs	r2, #1
10000fa4:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000fa6:	f7ff fb71 	bl	1000068c <HAL_GetTick>
10000faa:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000fac:	e008      	b.n	10000fc0 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000fae:	f7ff fb6d 	bl	1000068c <HAL_GetTick>
10000fb2:	4602      	mov	r2, r0
10000fb4:	68bb      	ldr	r3, [r7, #8]
10000fb6:	1ad3      	subs	r3, r2, r3
10000fb8:	2b64      	cmp	r3, #100	; 0x64
10000fba:	d901      	bls.n	10000fc0 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10000fbc:	2303      	movs	r3, #3
10000fbe:	e14c      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000fc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fc4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000fc8:	f003 0301 	and.w	r3, r3, #1
10000fcc:	2b01      	cmp	r3, #1
10000fce:	d0ee      	beq.n	10000fae <HAL_RCC_OscConfig+0x3aa>
10000fd0:	e000      	b.n	10000fd4 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000fd2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10000fd4:	687b      	ldr	r3, [r7, #4]
10000fd6:	681b      	ldr	r3, [r3, #0]
10000fd8:	f003 0310 	and.w	r3, r3, #16
10000fdc:	2b00      	cmp	r3, #0
10000fde:	f000 8091 	beq.w	10001104 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10000fe2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fe6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000fea:	f003 0303 	and.w	r3, r3, #3
10000fee:	2b02      	cmp	r3, #2
10000ff0:	d107      	bne.n	10001002 <HAL_RCC_OscConfig+0x3fe>
10000ff2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ff6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000ffa:	f003 0302 	and.w	r3, r3, #2
10000ffe:	2b02      	cmp	r3, #2
10001000:	d01e      	beq.n	10001040 <HAL_RCC_OscConfig+0x43c>
10001002:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001008:	f003 0303 	and.w	r3, r3, #3
1000100c:	2b02      	cmp	r3, #2
1000100e:	d107      	bne.n	10001020 <HAL_RCC_OscConfig+0x41c>
10001010:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000101a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000101e:	d00f      	beq.n	10001040 <HAL_RCC_OscConfig+0x43c>
10001020:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001024:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001028:	f003 0303 	and.w	r3, r3, #3
1000102c:	2b02      	cmp	r3, #2
1000102e:	d122      	bne.n	10001076 <HAL_RCC_OscConfig+0x472>
10001030:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001034:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001038:	f003 0302 	and.w	r3, r3, #2
1000103c:	2b02      	cmp	r3, #2
1000103e:	d11a      	bne.n	10001076 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10001040:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001044:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001048:	f003 0310 	and.w	r3, r3, #16
1000104c:	2b10      	cmp	r3, #16
1000104e:	d105      	bne.n	1000105c <HAL_RCC_OscConfig+0x458>
10001050:	687b      	ldr	r3, [r7, #4]
10001052:	69db      	ldr	r3, [r3, #28]
10001054:	2b10      	cmp	r3, #16
10001056:	d001      	beq.n	1000105c <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10001058:	2301      	movs	r3, #1
1000105a:	e0fe      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
1000105c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001060:	69db      	ldr	r3, [r3, #28]
10001062:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10001066:	687b      	ldr	r3, [r7, #4]
10001068:	6a1b      	ldr	r3, [r3, #32]
1000106a:	021b      	lsls	r3, r3, #8
1000106c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001070:	4313      	orrs	r3, r2
10001072:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10001074:	e046      	b.n	10001104 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10001076:	687b      	ldr	r3, [r7, #4]
10001078:	69db      	ldr	r3, [r3, #28]
1000107a:	2b00      	cmp	r3, #0
1000107c:	d029      	beq.n	100010d2 <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
1000107e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001082:	68db      	ldr	r3, [r3, #12]
10001084:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001088:	f043 0310 	orr.w	r3, r3, #16
1000108c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000108e:	f7ff fafd 	bl	1000068c <HAL_GetTick>
10001092:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001094:	e008      	b.n	100010a8 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10001096:	f7ff faf9 	bl	1000068c <HAL_GetTick>
1000109a:	4602      	mov	r2, r0
1000109c:	68bb      	ldr	r3, [r7, #8]
1000109e:	1ad3      	subs	r3, r2, r3
100010a0:	2b64      	cmp	r3, #100	; 0x64
100010a2:	d901      	bls.n	100010a8 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
100010a4:	2303      	movs	r3, #3
100010a6:	e0d8      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100010a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010ac:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100010b0:	f003 0310 	and.w	r3, r3, #16
100010b4:	2b10      	cmp	r3, #16
100010b6:	d1ee      	bne.n	10001096 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
100010b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010bc:	69db      	ldr	r3, [r3, #28]
100010be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
100010c2:	687b      	ldr	r3, [r7, #4]
100010c4:	6a1b      	ldr	r3, [r3, #32]
100010c6:	021b      	lsls	r3, r3, #8
100010c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100010cc:	4313      	orrs	r3, r2
100010ce:	61cb      	str	r3, [r1, #28]
100010d0:	e018      	b.n	10001104 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
100010d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010d6:	2210      	movs	r2, #16
100010d8:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100010da:	f7ff fad7 	bl	1000068c <HAL_GetTick>
100010de:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100010e0:	e008      	b.n	100010f4 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100010e2:	f7ff fad3 	bl	1000068c <HAL_GetTick>
100010e6:	4602      	mov	r2, r0
100010e8:	68bb      	ldr	r3, [r7, #8]
100010ea:	1ad3      	subs	r3, r2, r3
100010ec:	2b64      	cmp	r3, #100	; 0x64
100010ee:	d901      	bls.n	100010f4 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
100010f0:	2303      	movs	r3, #3
100010f2:	e0b2      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100010f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010f8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100010fc:	f003 0310 	and.w	r3, r3, #16
10001100:	2b10      	cmp	r3, #16
10001102:	d0ee      	beq.n	100010e2 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10001104:	687b      	ldr	r3, [r7, #4]
10001106:	681b      	ldr	r3, [r3, #0]
10001108:	f003 0308 	and.w	r3, r3, #8
1000110c:	2b00      	cmp	r3, #0
1000110e:	d042      	beq.n	10001196 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10001110:	687b      	ldr	r3, [r7, #4]
10001112:	699b      	ldr	r3, [r3, #24]
10001114:	2b00      	cmp	r3, #0
10001116:	d01f      	beq.n	10001158 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10001118:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000111c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001120:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001124:	f043 0301 	orr.w	r3, r3, #1
10001128:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000112c:	f7ff faae 	bl	1000068c <HAL_GetTick>
10001130:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10001132:	e008      	b.n	10001146 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001134:	f7ff faaa 	bl	1000068c <HAL_GetTick>
10001138:	4602      	mov	r2, r0
1000113a:	68bb      	ldr	r3, [r7, #8]
1000113c:	1ad3      	subs	r3, r2, r3
1000113e:	2b64      	cmp	r3, #100	; 0x64
10001140:	d901      	bls.n	10001146 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10001142:	2303      	movs	r3, #3
10001144:	e089      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10001146:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000114a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000114e:	f003 0302 	and.w	r3, r3, #2
10001152:	2b02      	cmp	r3, #2
10001154:	d1ee      	bne.n	10001134 <HAL_RCC_OscConfig+0x530>
10001156:	e01e      	b.n	10001196 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10001158:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000115c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001160:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001164:	f023 0301 	bic.w	r3, r3, #1
10001168:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000116c:	f7ff fa8e 	bl	1000068c <HAL_GetTick>
10001170:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10001172:	e008      	b.n	10001186 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001174:	f7ff fa8a 	bl	1000068c <HAL_GetTick>
10001178:	4602      	mov	r2, r0
1000117a:	68bb      	ldr	r3, [r7, #8]
1000117c:	1ad3      	subs	r3, r2, r3
1000117e:	2b64      	cmp	r3, #100	; 0x64
10001180:	d901      	bls.n	10001186 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10001182:	2303      	movs	r3, #3
10001184:	e069      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10001186:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000118a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000118e:	f003 0302 	and.w	r3, r3, #2
10001192:	2b02      	cmp	r3, #2
10001194:	d0ee      	beq.n	10001174 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10001196:	687b      	ldr	r3, [r7, #4]
10001198:	681b      	ldr	r3, [r3, #0]
1000119a:	f003 0304 	and.w	r3, r3, #4
1000119e:	2b00      	cmp	r3, #0
100011a0:	d02a      	beq.n	100011f8 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100011a2:	4b14      	ldr	r3, [pc, #80]	; (100011f4 <HAL_RCC_OscConfig+0x5f0>)
100011a4:	681b      	ldr	r3, [r3, #0]
100011a6:	4a13      	ldr	r2, [pc, #76]	; (100011f4 <HAL_RCC_OscConfig+0x5f0>)
100011a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100011ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100011ae:	f7ff fa6d 	bl	1000068c <HAL_GetTick>
100011b2:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100011b4:	e008      	b.n	100011c8 <HAL_RCC_OscConfig+0x5c4>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100011b6:	f7ff fa69 	bl	1000068c <HAL_GetTick>
100011ba:	4602      	mov	r2, r0
100011bc:	68bb      	ldr	r3, [r7, #8]
100011be:	1ad3      	subs	r3, r2, r3
100011c0:	2b64      	cmp	r3, #100	; 0x64
100011c2:	d901      	bls.n	100011c8 <HAL_RCC_OscConfig+0x5c4>
      {
        return HAL_TIMEOUT;
100011c4:	2303      	movs	r3, #3
100011c6:	e048      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100011c8:	4b0a      	ldr	r3, [pc, #40]	; (100011f4 <HAL_RCC_OscConfig+0x5f0>)
100011ca:	681b      	ldr	r3, [r3, #0]
100011cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
100011d0:	2b00      	cmp	r3, #0
100011d2:	d0f0      	beq.n	100011b6 <HAL_RCC_OscConfig+0x5b2>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
100011d4:	687b      	ldr	r3, [r7, #4]
100011d6:	689b      	ldr	r3, [r3, #8]
100011d8:	4618      	mov	r0, r3
100011da:	f000 f8ae 	bl	1000133a <HAL_RCC_LSEConfig>
100011de:	4603      	mov	r3, r0
100011e0:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
100011e2:	7bfb      	ldrb	r3, [r7, #15]
100011e4:	2b00      	cmp	r3, #0
100011e6:	d007      	beq.n	100011f8 <HAL_RCC_OscConfig+0x5f4>
    {
      return result;
100011e8:	7bfb      	ldrb	r3, [r7, #15]
100011ea:	e036      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
100011ec:	10020000 	.word	0x10020000
100011f0:	10020004 	.word	0x10020004
100011f4:	50001000 	.word	0x50001000
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
100011f8:	687b      	ldr	r3, [r7, #4]
100011fa:	3324      	adds	r3, #36	; 0x24
100011fc:	4618      	mov	r0, r3
100011fe:	f000 f919 	bl	10001434 <RCC_PLL1_Config>
10001202:	4603      	mov	r3, r0
10001204:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001206:	7bfb      	ldrb	r3, [r7, #15]
10001208:	2b00      	cmp	r3, #0
1000120a:	d001      	beq.n	10001210 <HAL_RCC_OscConfig+0x60c>
  {
    return result;
1000120c:	7bfb      	ldrb	r3, [r7, #15]
1000120e:	e024      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10001210:	687b      	ldr	r3, [r7, #4]
10001212:	3360      	adds	r3, #96	; 0x60
10001214:	4618      	mov	r0, r3
10001216:	f001 f943 	bl	100024a0 <RCCEx_PLL2_Config>
1000121a:	4603      	mov	r3, r0
1000121c:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000121e:	7bfb      	ldrb	r3, [r7, #15]
10001220:	2b00      	cmp	r3, #0
10001222:	d001      	beq.n	10001228 <HAL_RCC_OscConfig+0x624>
  {
    return result;
10001224:	7bfb      	ldrb	r3, [r7, #15]
10001226:	e018      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10001228:	687b      	ldr	r3, [r7, #4]
1000122a:	339c      	adds	r3, #156	; 0x9c
1000122c:	4618      	mov	r0, r3
1000122e:	f001 fab9 	bl	100027a4 <RCCEx_PLL3_Config>
10001232:	4603      	mov	r3, r0
10001234:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001236:	7bfb      	ldrb	r3, [r7, #15]
10001238:	2b00      	cmp	r3, #0
1000123a:	d001      	beq.n	10001240 <HAL_RCC_OscConfig+0x63c>
  {
    return result;
1000123c:	7bfb      	ldrb	r3, [r7, #15]
1000123e:	e00c      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10001240:	687b      	ldr	r3, [r7, #4]
10001242:	33d8      	adds	r3, #216	; 0xd8
10001244:	4618      	mov	r0, r3
10001246:	f001 fc17 	bl	10002a78 <RCCEx_PLL4_Config>
1000124a:	4603      	mov	r3, r0
1000124c:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000124e:	7bfb      	ldrb	r3, [r7, #15]
10001250:	2b00      	cmp	r3, #0
10001252:	d001      	beq.n	10001258 <HAL_RCC_OscConfig+0x654>
  {
    return result;
10001254:	7bfb      	ldrb	r3, [r7, #15]
10001256:	e000      	b.n	1000125a <HAL_RCC_OscConfig+0x656>
  }

  return HAL_OK;
10001258:	2300      	movs	r3, #0
}
1000125a:	4618      	mov	r0, r3
1000125c:	3710      	adds	r7, #16
1000125e:	46bd      	mov	sp, r7
10001260:	bd80      	pop	{r7, pc}
10001262:	bf00      	nop

10001264 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10001264:	b580      	push	{r7, lr}
10001266:	b084      	sub	sp, #16
10001268:	af00      	add	r7, sp, #0
1000126a:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
1000126c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001270:	f44f 7280 	mov.w	r2, #256	; 0x100
10001274:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001276:	f7ff fa09 	bl	1000068c <HAL_GetTick>
1000127a:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
1000127c:	e008      	b.n	10001290 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000127e:	f7ff fa05 	bl	1000068c <HAL_GetTick>
10001282:	4602      	mov	r2, r0
10001284:	68fb      	ldr	r3, [r7, #12]
10001286:	1ad3      	subs	r3, r2, r3
10001288:	2b64      	cmp	r3, #100	; 0x64
1000128a:	d901      	bls.n	10001290 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
1000128c:	2303      	movs	r3, #3
1000128e:	e050      	b.n	10001332 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001290:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001294:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100012a0:	d0ed      	beq.n	1000127e <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
100012a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012a6:	f44f 6290 	mov.w	r2, #1152	; 0x480
100012aa:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
100012ac:	687b      	ldr	r3, [r7, #4]
100012ae:	2b00      	cmp	r3, #0
100012b0:	d03e      	beq.n	10001330 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
100012b2:	687b      	ldr	r3, [r7, #4]
100012b4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
100012b8:	d108      	bne.n	100012cc <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100012ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012be:	68db      	ldr	r3, [r3, #12]
100012c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100012c8:	60d3      	str	r3, [r2, #12]
100012ca:	e013      	b.n	100012f4 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
100012cc:	687b      	ldr	r3, [r7, #4]
100012ce:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
100012d2:	d10f      	bne.n	100012f4 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100012d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012d8:	68db      	ldr	r3, [r3, #12]
100012da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
100012e2:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100012e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012e8:	68db      	ldr	r3, [r3, #12]
100012ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100012f2:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
100012f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012f8:	68db      	ldr	r3, [r3, #12]
100012fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10001302:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001304:	f7ff f9c2 	bl	1000068c <HAL_GetTick>
10001308:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000130a:	e008      	b.n	1000131e <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000130c:	f7ff f9be 	bl	1000068c <HAL_GetTick>
10001310:	4602      	mov	r2, r0
10001312:	68fb      	ldr	r3, [r7, #12]
10001314:	1ad3      	subs	r3, r2, r3
10001316:	2b64      	cmp	r3, #100	; 0x64
10001318:	d901      	bls.n	1000131e <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
1000131a:	2303      	movs	r3, #3
1000131c:	e009      	b.n	10001332 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000131e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001322:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000132a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000132e:	d1ed      	bne.n	1000130c <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10001330:	2300      	movs	r3, #0
}
10001332:	4618      	mov	r0, r3
10001334:	3710      	adds	r7, #16
10001336:	46bd      	mov	sp, r7
10001338:	bd80      	pop	{r7, pc}

1000133a <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
1000133a:	b580      	push	{r7, lr}
1000133c:	b084      	sub	sp, #16
1000133e:	af00      	add	r7, sp, #0
10001340:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001342:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001346:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000134a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000134e:	f023 0301 	bic.w	r3, r3, #1
10001352:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001356:	f7ff f999 	bl	1000068c <HAL_GetTick>
1000135a:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000135c:	e00a      	b.n	10001374 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000135e:	f7ff f995 	bl	1000068c <HAL_GetTick>
10001362:	4602      	mov	r2, r0
10001364:	68fb      	ldr	r3, [r7, #12]
10001366:	1ad3      	subs	r3, r2, r3
10001368:	f241 3288 	movw	r2, #5000	; 0x1388
1000136c:	4293      	cmp	r3, r2
1000136e:	d901      	bls.n	10001374 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10001370:	2303      	movs	r3, #3
10001372:	e05b      	b.n	1000142c <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001374:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001378:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000137c:	f003 0304 	and.w	r3, r3, #4
10001380:	2b04      	cmp	r3, #4
10001382:	d0ec      	beq.n	1000135e <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10001384:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001388:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000138c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001390:	f023 030a 	bic.w	r3, r3, #10
10001394:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10001398:	687b      	ldr	r3, [r7, #4]
1000139a:	2b00      	cmp	r3, #0
1000139c:	d045      	beq.n	1000142a <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
1000139e:	687b      	ldr	r3, [r7, #4]
100013a0:	2b03      	cmp	r3, #3
100013a2:	d10a      	bne.n	100013ba <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100013a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100013ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013b0:	f043 0302 	orr.w	r3, r3, #2
100013b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100013b8:	e016      	b.n	100013e8 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
100013ba:	687b      	ldr	r3, [r7, #4]
100013bc:	2b0b      	cmp	r3, #11
100013be:	d113      	bne.n	100013e8 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
100013c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100013c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013cc:	f043 0308 	orr.w	r3, r3, #8
100013d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100013d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100013dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013e0:	f043 0302 	orr.w	r3, r3, #2
100013e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100013e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100013f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013f4:	f043 0301 	orr.w	r3, r3, #1
100013f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100013fc:	f7ff f946 	bl	1000068c <HAL_GetTick>
10001400:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001402:	e00a      	b.n	1000141a <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001404:	f7ff f942 	bl	1000068c <HAL_GetTick>
10001408:	4602      	mov	r2, r0
1000140a:	68fb      	ldr	r3, [r7, #12]
1000140c:	1ad3      	subs	r3, r2, r3
1000140e:	f241 3288 	movw	r2, #5000	; 0x1388
10001412:	4293      	cmp	r3, r2
10001414:	d901      	bls.n	1000141a <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10001416:	2303      	movs	r3, #3
10001418:	e008      	b.n	1000142c <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000141a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000141e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001422:	f003 0304 	and.w	r3, r3, #4
10001426:	2b04      	cmp	r3, #4
10001428:	d1ec      	bne.n	10001404 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
1000142a:	2300      	movs	r3, #0
}
1000142c:	4618      	mov	r0, r3
1000142e:	3710      	adds	r7, #16
10001430:	46bd      	mov	sp, r7
10001432:	bd80      	pop	{r7, pc}

10001434 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10001434:	b580      	push	{r7, lr}
10001436:	b084      	sub	sp, #16
10001438:	af00      	add	r7, sp, #0
1000143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
1000143c:	687b      	ldr	r3, [r7, #4]
1000143e:	681b      	ldr	r3, [r3, #0]
10001440:	2b00      	cmp	r3, #0
10001442:	f000 8174 	beq.w	1000172e <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10001446:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000144a:	6a1b      	ldr	r3, [r3, #32]
1000144c:	f003 0303 	and.w	r3, r3, #3
10001450:	2b02      	cmp	r3, #2
10001452:	d108      	bne.n	10001466 <RCC_PLL1_Config+0x32>
10001454:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001458:	6a1b      	ldr	r3, [r3, #32]
1000145a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000145e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001462:	f000 8162 	beq.w	1000172a <RCC_PLL1_Config+0x2f6>
10001466:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000146a:	6a1b      	ldr	r3, [r3, #32]
1000146c:	f003 0303 	and.w	r3, r3, #3
10001470:	2b03      	cmp	r3, #3
10001472:	d108      	bne.n	10001486 <RCC_PLL1_Config+0x52>
10001474:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001478:	6a1b      	ldr	r3, [r3, #32]
1000147a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000147e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001482:	f000 8152 	beq.w	1000172a <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10001486:	687b      	ldr	r3, [r7, #4]
10001488:	681b      	ldr	r3, [r3, #0]
1000148a:	2b02      	cmp	r3, #2
1000148c:	f040 8123 	bne.w	100016d6 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001498:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000149c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100014a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
100014a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100014ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014b0:	f023 0301 	bic.w	r3, r3, #1
100014b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100014b8:	f7ff f8e8 	bl	1000068c <HAL_GetTick>
100014bc:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100014be:	e008      	b.n	100014d2 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100014c0:	f7ff f8e4 	bl	1000068c <HAL_GetTick>
100014c4:	4602      	mov	r2, r0
100014c6:	68fb      	ldr	r3, [r7, #12]
100014c8:	1ad3      	subs	r3, r2, r3
100014ca:	2b64      	cmp	r3, #100	; 0x64
100014cc:	d901      	bls.n	100014d2 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
100014ce:	2303      	movs	r3, #3
100014d0:	e12e      	b.n	10001730 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100014d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100014da:	f003 0302 	and.w	r3, r3, #2
100014de:	2b02      	cmp	r3, #2
100014e0:	d0ee      	beq.n	100014c0 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100014e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014e8:	f003 0307 	and.w	r3, r3, #7
100014ec:	2b02      	cmp	r3, #2
100014ee:	d112      	bne.n	10001516 <RCC_PLL1_Config+0xe2>
100014f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100014fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100014fe:	d10a      	bne.n	10001516 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001500:	687b      	ldr	r3, [r7, #4]
10001502:	685a      	ldr	r2, [r3, #4]
10001504:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000150a:	f003 0303 	and.w	r3, r3, #3
1000150e:	429a      	cmp	r2, r3
10001510:	d00c      	beq.n	1000152c <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10001512:	2301      	movs	r3, #1
10001514:	e10c      	b.n	10001730 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10001516:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000151c:	f023 0203 	bic.w	r2, r3, #3
10001520:	687b      	ldr	r3, [r7, #4]
10001522:	685b      	ldr	r3, [r3, #4]
10001524:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001528:	4313      	orrs	r3, r2
1000152a:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
1000152c:	e008      	b.n	10001540 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000152e:	f7ff f8ad 	bl	1000068c <HAL_GetTick>
10001532:	4602      	mov	r2, r0
10001534:	68fb      	ldr	r3, [r7, #12]
10001536:	1ad3      	subs	r3, r2, r3
10001538:	2b64      	cmp	r3, #100	; 0x64
1000153a:	d901      	bls.n	10001540 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
1000153c:	2303      	movs	r3, #3
1000153e:	e0f7      	b.n	10001730 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001540:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000154a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000154e:	d1ee      	bne.n	1000152e <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10001550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001554:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10001558:	4b77      	ldr	r3, [pc, #476]	; (10001738 <RCC_PLL1_Config+0x304>)
1000155a:	4013      	ands	r3, r2
1000155c:	687a      	ldr	r2, [r7, #4]
1000155e:	68d2      	ldr	r2, [r2, #12]
10001560:	1e51      	subs	r1, r2, #1
10001562:	687a      	ldr	r2, [r7, #4]
10001564:	6892      	ldr	r2, [r2, #8]
10001566:	3a01      	subs	r2, #1
10001568:	0412      	lsls	r2, r2, #16
1000156a:	430a      	orrs	r2, r1
1000156c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001570:	4313      	orrs	r3, r2
10001572:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
10001576:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000157e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10001582:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10001586:	687a      	ldr	r2, [r7, #4]
10001588:	6912      	ldr	r2, [r2, #16]
1000158a:	1e51      	subs	r1, r2, #1
1000158c:	687a      	ldr	r2, [r7, #4]
1000158e:	6952      	ldr	r2, [r2, #20]
10001590:	3a01      	subs	r2, #1
10001592:	0212      	lsls	r2, r2, #8
10001594:	4311      	orrs	r1, r2
10001596:	687a      	ldr	r2, [r7, #4]
10001598:	6992      	ldr	r2, [r2, #24]
1000159a:	3a01      	subs	r2, #1
1000159c:	0412      	lsls	r2, r2, #16
1000159e:	430a      	orrs	r2, r1
100015a0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100015a4:	4313      	orrs	r3, r2
100015a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
100015aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100015b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100015ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
100015be:	687b      	ldr	r3, [r7, #4]
100015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100015c2:	2b02      	cmp	r3, #2
100015c4:	d003      	beq.n	100015ce <RCC_PLL1_Config+0x19a>
100015c6:	687b      	ldr	r3, [r7, #4]
100015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100015ca:	2b00      	cmp	r3, #0
100015cc:	d10c      	bne.n	100015e8 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
100015ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100015d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100015da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100015de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100015e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
100015e6:	e00f      	b.n	10001608 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
100015e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100015f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100015f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100015f8:	687a      	ldr	r2, [r7, #4]
100015fa:	6a12      	ldr	r2, [r2, #32]
100015fc:	00d2      	lsls	r2, r2, #3
100015fe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001602:	4313      	orrs	r3, r2
10001604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10001608:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000160c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001610:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001618:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000161c:	687b      	ldr	r3, [r7, #4]
1000161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001620:	2b02      	cmp	r3, #2
10001622:	d124      	bne.n	1000166e <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10001624:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
1000162c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001630:	687b      	ldr	r3, [r7, #4]
10001632:	6a99      	ldr	r1, [r3, #40]	; 0x28
10001634:	687b      	ldr	r3, [r7, #4]
10001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001638:	4319      	orrs	r1, r3
1000163a:	687b      	ldr	r3, [r7, #4]
1000163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000163e:	4319      	orrs	r1, r3
10001640:	687b      	ldr	r3, [r7, #4]
10001642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001644:	4319      	orrs	r1, r3
10001646:	687b      	ldr	r3, [r7, #4]
10001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000164a:	041b      	lsls	r3, r3, #16
1000164c:	430b      	orrs	r3, r1
1000164e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001652:	4313      	orrs	r3, r2
10001654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10001658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000165c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001660:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001664:	f043 0304 	orr.w	r3, r3, #4
10001668:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
1000166c:	e009      	b.n	10001682 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
1000166e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001676:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000167a:	f023 0304 	bic.w	r3, r3, #4
1000167e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10001682:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000168a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000168e:	f043 0301 	orr.w	r3, r3, #1
10001692:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001696:	f7fe fff9 	bl	1000068c <HAL_GetTick>
1000169a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000169c:	e008      	b.n	100016b0 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000169e:	f7fe fff5 	bl	1000068c <HAL_GetTick>
100016a2:	4602      	mov	r2, r0
100016a4:	68fb      	ldr	r3, [r7, #12]
100016a6:	1ad3      	subs	r3, r2, r3
100016a8:	2b64      	cmp	r3, #100	; 0x64
100016aa:	d901      	bls.n	100016b0 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
100016ac:	2303      	movs	r3, #3
100016ae:	e03f      	b.n	10001730 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100016b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100016b8:	f003 0302 	and.w	r3, r3, #2
100016bc:	2b02      	cmp	r3, #2
100016be:	d1ee      	bne.n	1000169e <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100016c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100016c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100016cc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100016d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
100016d4:	e02b      	b.n	1000172e <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100016d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100016de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100016e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100016e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
100016ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100016f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100016f6:	f023 0301 	bic.w	r3, r3, #1
100016fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100016fe:	f7fe ffc5 	bl	1000068c <HAL_GetTick>
10001702:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001704:	e008      	b.n	10001718 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001706:	f7fe ffc1 	bl	1000068c <HAL_GetTick>
1000170a:	4602      	mov	r2, r0
1000170c:	68fb      	ldr	r3, [r7, #12]
1000170e:	1ad3      	subs	r3, r2, r3
10001710:	2b64      	cmp	r3, #100	; 0x64
10001712:	d901      	bls.n	10001718 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10001714:	2303      	movs	r3, #3
10001716:	e00b      	b.n	10001730 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001718:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000171c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001720:	f003 0302 	and.w	r3, r3, #2
10001724:	2b02      	cmp	r3, #2
10001726:	d0ee      	beq.n	10001706 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10001728:	e001      	b.n	1000172e <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000172a:	2301      	movs	r3, #1
1000172c:	e000      	b.n	10001730 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
1000172e:	2300      	movs	r3, #0

}
10001730:	4618      	mov	r0, r3
10001732:	3710      	adds	r7, #16
10001734:	46bd      	mov	sp, r7
10001736:	bd80      	pop	{r7, pc}
10001738:	ffc0fe00 	.word	0xffc0fe00

1000173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
1000173c:	b580      	push	{r7, lr}
1000173e:	b084      	sub	sp, #16
10001740:	af00      	add	r7, sp, #0
10001742:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10001744:	2300      	movs	r3, #0
10001746:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10001748:	687b      	ldr	r3, [r7, #4]
1000174a:	2b00      	cmp	r3, #0
1000174c:	d101      	bne.n	10001752 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
1000174e:	2301      	movs	r3, #1
10001750:	e102      	b.n	10001958 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10001752:	687b      	ldr	r3, [r7, #4]
10001754:	681b      	ldr	r3, [r3, #0]
10001756:	f003 0301 	and.w	r3, r3, #1
1000175a:	2b00      	cmp	r3, #0
1000175c:	d00b      	beq.n	10001776 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
1000175e:	687b      	ldr	r3, [r7, #4]
10001760:	3304      	adds	r3, #4
10001762:	4618      	mov	r0, r3
10001764:	f000 f8fc 	bl	10001960 <RCC_MPUConfig>
10001768:	4603      	mov	r3, r0
1000176a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
1000176c:	7bfb      	ldrb	r3, [r7, #15]
1000176e:	2b00      	cmp	r3, #0
10001770:	d001      	beq.n	10001776 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10001772:	7bfb      	ldrb	r3, [r7, #15]
10001774:	e0f0      	b.n	10001958 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10001776:	687b      	ldr	r3, [r7, #4]
10001778:	681b      	ldr	r3, [r3, #0]
1000177a:	f003 0302 	and.w	r3, r3, #2
1000177e:	2b00      	cmp	r3, #0
10001780:	d00b      	beq.n	1000179a <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10001782:	687b      	ldr	r3, [r7, #4]
10001784:	330c      	adds	r3, #12
10001786:	4618      	mov	r0, r3
10001788:	f000 f960 	bl	10001a4c <RCC_AXISSConfig>
1000178c:	4603      	mov	r3, r0
1000178e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001790:	7bfb      	ldrb	r3, [r7, #15]
10001792:	2b00      	cmp	r3, #0
10001794:	d001      	beq.n	1000179a <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10001796:	7bfb      	ldrb	r3, [r7, #15]
10001798:	e0de      	b.n	10001958 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
1000179a:	687b      	ldr	r3, [r7, #4]
1000179c:	681b      	ldr	r3, [r3, #0]
1000179e:	f003 0304 	and.w	r3, r3, #4
100017a2:	2b00      	cmp	r3, #0
100017a4:	d00b      	beq.n	100017be <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
100017a6:	687b      	ldr	r3, [r7, #4]
100017a8:	3314      	adds	r3, #20
100017aa:	4618      	mov	r0, r3
100017ac:	f000 f9e2 	bl	10001b74 <RCC_MCUConfig>
100017b0:	4603      	mov	r3, r0
100017b2:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100017b4:	7bfb      	ldrb	r3, [r7, #15]
100017b6:	2b00      	cmp	r3, #0
100017b8:	d001      	beq.n	100017be <HAL_RCC_ClockConfig+0x82>
    {
      return status;
100017ba:	7bfb      	ldrb	r3, [r7, #15]
100017bc:	e0cc      	b.n	10001958 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
100017be:	687b      	ldr	r3, [r7, #4]
100017c0:	681b      	ldr	r3, [r3, #0]
100017c2:	f003 0308 	and.w	r3, r3, #8
100017c6:	2b00      	cmp	r3, #0
100017c8:	d020      	beq.n	1000180c <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
100017ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100017d0:	f023 0207 	bic.w	r2, r3, #7
100017d4:	687b      	ldr	r3, [r7, #4]
100017d6:	69db      	ldr	r3, [r3, #28]
100017d8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100017dc:	4313      	orrs	r3, r2
100017de:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100017e0:	f7fe ff54 	bl	1000068c <HAL_GetTick>
100017e4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100017e6:	e009      	b.n	100017fc <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100017e8:	f7fe ff50 	bl	1000068c <HAL_GetTick>
100017ec:	4602      	mov	r2, r0
100017ee:	68bb      	ldr	r3, [r7, #8]
100017f0:	1ad3      	subs	r3, r2, r3
100017f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100017f6:	d901      	bls.n	100017fc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
100017f8:	2303      	movs	r3, #3
100017fa:	e0ad      	b.n	10001958 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100017fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000180a:	d1ed      	bne.n	100017e8 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
1000180c:	687b      	ldr	r3, [r7, #4]
1000180e:	681b      	ldr	r3, [r3, #0]
10001810:	f003 0310 	and.w	r3, r3, #16
10001814:	2b00      	cmp	r3, #0
10001816:	d020      	beq.n	1000185a <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10001818:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000181e:	f023 0207 	bic.w	r2, r3, #7
10001822:	687b      	ldr	r3, [r7, #4]
10001824:	6a1b      	ldr	r3, [r3, #32]
10001826:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000182a:	4313      	orrs	r3, r2
1000182c:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000182e:	f7fe ff2d 	bl	1000068c <HAL_GetTick>
10001832:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001834:	e009      	b.n	1000184a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001836:	f7fe ff29 	bl	1000068c <HAL_GetTick>
1000183a:	4602      	mov	r2, r0
1000183c:	68bb      	ldr	r3, [r7, #8]
1000183e:	1ad3      	subs	r3, r2, r3
10001840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001844:	d901      	bls.n	1000184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10001846:	2303      	movs	r3, #3
10001848:	e086      	b.n	10001958 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
1000184a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001858:	d1ed      	bne.n	10001836 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
1000185a:	687b      	ldr	r3, [r7, #4]
1000185c:	681b      	ldr	r3, [r3, #0]
1000185e:	f003 0320 	and.w	r3, r3, #32
10001862:	2b00      	cmp	r3, #0
10001864:	d023      	beq.n	100018ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10001866:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000186a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
1000186e:	f023 0207 	bic.w	r2, r3, #7
10001872:	687b      	ldr	r3, [r7, #4]
10001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001876:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000187a:	4313      	orrs	r3, r2
1000187c:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001880:	f7fe ff04 	bl	1000068c <HAL_GetTick>
10001884:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001886:	e009      	b.n	1000189c <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001888:	f7fe ff00 	bl	1000068c <HAL_GetTick>
1000188c:	4602      	mov	r2, r0
1000188e:	68bb      	ldr	r3, [r7, #8]
10001890:	1ad3      	subs	r3, r2, r3
10001892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001896:	d901      	bls.n	1000189c <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10001898:	2303      	movs	r3, #3
1000189a:	e05d      	b.n	10001958 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000189c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018a0:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
100018a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100018a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100018ac:	d1ec      	bne.n	10001888 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
100018ae:	687b      	ldr	r3, [r7, #4]
100018b0:	681b      	ldr	r3, [r3, #0]
100018b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
100018b6:	2b00      	cmp	r3, #0
100018b8:	d023      	beq.n	10001902 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
100018ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018be:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100018c2:	f023 0207 	bic.w	r2, r3, #7
100018c6:	687b      	ldr	r3, [r7, #4]
100018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100018ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100018ce:	4313      	orrs	r3, r2
100018d0:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100018d4:	f7fe feda 	bl	1000068c <HAL_GetTick>
100018d8:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100018da:	e009      	b.n	100018f0 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100018dc:	f7fe fed6 	bl	1000068c <HAL_GetTick>
100018e0:	4602      	mov	r2, r0
100018e2:	68bb      	ldr	r3, [r7, #8]
100018e4:	1ad3      	subs	r3, r2, r3
100018e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100018ea:	d901      	bls.n	100018f0 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
100018ec:	2303      	movs	r3, #3
100018ee:	e033      	b.n	10001958 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100018f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018f4:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100018f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100018fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001900:	d1ec      	bne.n	100018dc <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10001902:	687b      	ldr	r3, [r7, #4]
10001904:	681b      	ldr	r3, [r3, #0]
10001906:	f003 0380 	and.w	r3, r3, #128	; 0x80
1000190a:	2b00      	cmp	r3, #0
1000190c:	d023      	beq.n	10001956 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
1000190e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001912:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10001916:	f023 0207 	bic.w	r2, r3, #7
1000191a:	687b      	ldr	r3, [r7, #4]
1000191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000191e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001922:	4313      	orrs	r3, r2
10001924:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001928:	f7fe feb0 	bl	1000068c <HAL_GetTick>
1000192c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000192e:	e009      	b.n	10001944 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001930:	f7fe feac 	bl	1000068c <HAL_GetTick>
10001934:	4602      	mov	r2, r0
10001936:	68bb      	ldr	r3, [r7, #8]
10001938:	1ad3      	subs	r3, r2, r3
1000193a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000193e:	d901      	bls.n	10001944 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10001940:	2303      	movs	r3, #3
10001942:	e009      	b.n	10001958 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001944:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001948:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
1000194c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001954:	d1ec      	bne.n	10001930 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10001956:	2300      	movs	r3, #0
}
10001958:	4618      	mov	r0, r3
1000195a:	3710      	adds	r7, #16
1000195c:	46bd      	mov	sp, r7
1000195e:	bd80      	pop	{r7, pc}

10001960 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10001960:	b580      	push	{r7, lr}
10001962:	b084      	sub	sp, #16
10001964:	af00      	add	r7, sp, #0
10001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10001968:	687b      	ldr	r3, [r7, #4]
1000196a:	681b      	ldr	r3, [r3, #0]
1000196c:	2b03      	cmp	r3, #3
1000196e:	d840      	bhi.n	100019f2 <RCC_MPUConfig+0x92>
10001970:	a201      	add	r2, pc, #4	; (adr r2, 10001978 <RCC_MPUConfig+0x18>)
10001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001976:	bf00      	nop
10001978:	10001989 	.word	0x10001989
1000197c:	1000199d 	.word	0x1000199d
10001980:	100019b3 	.word	0x100019b3
10001984:	100019c7 	.word	0x100019c7
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001988:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000198c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001990:	f003 0301 	and.w	r3, r3, #1
10001994:	2b01      	cmp	r3, #1
10001996:	d02e      	beq.n	100019f6 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10001998:	2301      	movs	r3, #1
1000199a:	e053      	b.n	10001a44 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000199c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019a0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
100019a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100019ac:	d025      	beq.n	100019fa <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
100019ae:	2301      	movs	r3, #1
100019b0:	e048      	b.n	10001a44 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100019b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100019ba:	f003 0302 	and.w	r3, r3, #2
100019be:	2b02      	cmp	r3, #2
100019c0:	d01d      	beq.n	100019fe <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
100019c2:	2301      	movs	r3, #1
100019c4:	e03e      	b.n	10001a44 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100019c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100019ce:	f003 0302 	and.w	r3, r3, #2
100019d2:	2b02      	cmp	r3, #2
100019d4:	d001      	beq.n	100019da <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
100019d6:	2301      	movs	r3, #1
100019d8:	e034      	b.n	10001a44 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
100019da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100019e0:	f023 0207 	bic.w	r2, r3, #7
100019e4:	687b      	ldr	r3, [r7, #4]
100019e6:	685b      	ldr	r3, [r3, #4]
100019e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100019ec:	4313      	orrs	r3, r2
100019ee:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
100019f0:	e006      	b.n	10001a00 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
100019f2:	2301      	movs	r3, #1
100019f4:	e026      	b.n	10001a44 <RCC_MPUConfig+0xe4>
      break;
100019f6:	bf00      	nop
100019f8:	e002      	b.n	10001a00 <RCC_MPUConfig+0xa0>
      break;
100019fa:	bf00      	nop
100019fc:	e000      	b.n	10001a00 <RCC_MPUConfig+0xa0>
      break;
100019fe:	bf00      	nop

  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10001a00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a04:	6a1b      	ldr	r3, [r3, #32]
10001a06:	f023 0203 	bic.w	r2, r3, #3
10001a0a:	687b      	ldr	r3, [r7, #4]
10001a0c:	681b      	ldr	r3, [r3, #0]
10001a0e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001a12:	4313      	orrs	r3, r2
10001a14:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001a16:	f7fe fe39 	bl	1000068c <HAL_GetTick>
10001a1a:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001a1c:	e009      	b.n	10001a32 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a1e:	f7fe fe35 	bl	1000068c <HAL_GetTick>
10001a22:	4602      	mov	r2, r0
10001a24:	68fb      	ldr	r3, [r7, #12]
10001a26:	1ad3      	subs	r3, r2, r3
10001a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001a2c:	d901      	bls.n	10001a32 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10001a2e:	2303      	movs	r3, #3
10001a30:	e008      	b.n	10001a44 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001a32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a36:	6a1b      	ldr	r3, [r3, #32]
10001a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a40:	d1ed      	bne.n	10001a1e <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10001a42:	2300      	movs	r3, #0
}
10001a44:	4618      	mov	r0, r3
10001a46:	3710      	adds	r7, #16
10001a48:	46bd      	mov	sp, r7
10001a4a:	bd80      	pop	{r7, pc}

10001a4c <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10001a4c:	b580      	push	{r7, lr}
10001a4e:	b084      	sub	sp, #16
10001a50:	af00      	add	r7, sp, #0
10001a52:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10001a54:	687b      	ldr	r3, [r7, #4]
10001a56:	681b      	ldr	r3, [r3, #0]
10001a58:	2b01      	cmp	r3, #1
10001a5a:	d00e      	beq.n	10001a7a <RCC_AXISSConfig+0x2e>
10001a5c:	2b01      	cmp	r3, #1
10001a5e:	d302      	bcc.n	10001a66 <RCC_AXISSConfig+0x1a>
10001a60:	2b02      	cmp	r3, #2
10001a62:	d015      	beq.n	10001a90 <RCC_AXISSConfig+0x44>
      }
      break;
    }

    default:
      break;
10001a64:	e023      	b.n	10001aae <RCC_AXISSConfig+0x62>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001a66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a6a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001a6e:	f003 0301 	and.w	r3, r3, #1
10001a72:	2b01      	cmp	r3, #1
10001a74:	d016      	beq.n	10001aa4 <RCC_AXISSConfig+0x58>
        return HAL_ERROR;
10001a76:	2301      	movs	r3, #1
10001a78:	e077      	b.n	10001b6a <RCC_AXISSConfig+0x11e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a7e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001a8a:	d00d      	beq.n	10001aa8 <RCC_AXISSConfig+0x5c>
        return HAL_ERROR;
10001a8c:	2301      	movs	r3, #1
10001a8e:	e06c      	b.n	10001b6a <RCC_AXISSConfig+0x11e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001a90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001a98:	f003 0302 	and.w	r3, r3, #2
10001a9c:	2b02      	cmp	r3, #2
10001a9e:	d005      	beq.n	10001aac <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10001aa0:	2301      	movs	r3, #1
10001aa2:	e062      	b.n	10001b6a <RCC_AXISSConfig+0x11e>
      break;
10001aa4:	bf00      	nop
10001aa6:	e002      	b.n	10001aae <RCC_AXISSConfig+0x62>
      break;
10001aa8:	bf00      	nop
10001aaa:	e000      	b.n	10001aae <RCC_AXISSConfig+0x62>
      break;
10001aac:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10001aae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001ab4:	f023 0207 	bic.w	r2, r3, #7
10001ab8:	687b      	ldr	r3, [r7, #4]
10001aba:	681b      	ldr	r3, [r3, #0]
10001abc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001ac0:	4313      	orrs	r3, r2
10001ac2:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10001ac4:	687b      	ldr	r3, [r7, #4]
10001ac6:	681b      	ldr	r3, [r3, #0]
10001ac8:	2b03      	cmp	r3, #3
10001aca:	d016      	beq.n	10001afa <RCC_AXISSConfig+0xae>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001acc:	f7fe fdde 	bl	1000068c <HAL_GetTick>
10001ad0:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001ad2:	e009      	b.n	10001ae8 <RCC_AXISSConfig+0x9c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001ad4:	f7fe fdda 	bl	1000068c <HAL_GetTick>
10001ad8:	4602      	mov	r2, r0
10001ada:	68fb      	ldr	r3, [r7, #12]
10001adc:	1ad3      	subs	r3, r2, r3
10001ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001ae2:	d901      	bls.n	10001ae8 <RCC_AXISSConfig+0x9c>
      {
        return HAL_TIMEOUT;
10001ae4:	2303      	movs	r3, #3
10001ae6:	e040      	b.n	10001b6a <RCC_AXISSConfig+0x11e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001ae8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001af6:	d1ed      	bne.n	10001ad4 <RCC_AXISSConfig+0x88>
10001af8:	e015      	b.n	10001b26 <RCC_AXISSConfig+0xda>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001afa:	f7fe fdc7 	bl	1000068c <HAL_GetTick>
10001afe:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001b00:	e009      	b.n	10001b16 <RCC_AXISSConfig+0xca>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b02:	f7fe fdc3 	bl	1000068c <HAL_GetTick>
10001b06:	4602      	mov	r2, r0
10001b08:	68fb      	ldr	r3, [r7, #12]
10001b0a:	1ad3      	subs	r3, r2, r3
10001b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001b10:	d901      	bls.n	10001b16 <RCC_AXISSConfig+0xca>
      {
        return HAL_TIMEOUT;
10001b12:	2303      	movs	r3, #3
10001b14:	e029      	b.n	10001b6a <RCC_AXISSConfig+0x11e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001b16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001b24:	d0ed      	beq.n	10001b02 <RCC_AXISSConfig+0xb6>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10001b26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001b2c:	f023 0207 	bic.w	r2, r3, #7
10001b30:	687b      	ldr	r3, [r7, #4]
10001b32:	685b      	ldr	r3, [r3, #4]
10001b34:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b38:	4313      	orrs	r3, r2
10001b3a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001b3c:	f7fe fda6 	bl	1000068c <HAL_GetTick>
10001b40:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001b42:	e009      	b.n	10001b58 <RCC_AXISSConfig+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b44:	f7fe fda2 	bl	1000068c <HAL_GetTick>
10001b48:	4602      	mov	r2, r0
10001b4a:	68fb      	ldr	r3, [r7, #12]
10001b4c:	1ad3      	subs	r3, r2, r3
10001b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001b52:	d901      	bls.n	10001b58 <RCC_AXISSConfig+0x10c>
    {
      return HAL_TIMEOUT;
10001b54:	2303      	movs	r3, #3
10001b56:	e008      	b.n	10001b6a <RCC_AXISSConfig+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001b58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001b66:	d1ed      	bne.n	10001b44 <RCC_AXISSConfig+0xf8>
    }
  }

  return HAL_OK;
10001b68:	2300      	movs	r3, #0
}
10001b6a:	4618      	mov	r0, r3
10001b6c:	3710      	adds	r7, #16
10001b6e:	46bd      	mov	sp, r7
10001b70:	bd80      	pop	{r7, pc}
	...

10001b74 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001b74:	b580      	push	{r7, lr}
10001b76:	b084      	sub	sp, #16
10001b78:	af00      	add	r7, sp, #0
10001b7a:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001b7c:	687b      	ldr	r3, [r7, #4]
10001b7e:	681b      	ldr	r3, [r3, #0]
10001b80:	2b03      	cmp	r3, #3
10001b82:	d834      	bhi.n	10001bee <RCC_MCUConfig+0x7a>
10001b84:	a201      	add	r2, pc, #4	; (adr r2, 10001b8c <RCC_MCUConfig+0x18>)
10001b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001b8a:	bf00      	nop
10001b8c:	10001b9d 	.word	0x10001b9d
10001b90:	10001bb1 	.word	0x10001bb1
10001b94:	10001bc7 	.word	0x10001bc7
10001b98:	10001bdb 	.word	0x10001bdb
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001b9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ba0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001ba4:	f003 0301 	and.w	r3, r3, #1
10001ba8:	2b01      	cmp	r3, #1
10001baa:	d022      	beq.n	10001bf2 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001bac:	2301      	movs	r3, #1
10001bae:	e081      	b.n	10001cb4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001bb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bb4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001bc0:	d019      	beq.n	10001bf6 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001bc2:	2301      	movs	r3, #1
10001bc4:	e076      	b.n	10001cb4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001bc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bca:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001bce:	f003 0310 	and.w	r3, r3, #16
10001bd2:	2b10      	cmp	r3, #16
10001bd4:	d011      	beq.n	10001bfa <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001bd6:	2301      	movs	r3, #1
10001bd8:	e06c      	b.n	10001cb4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001bda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bde:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001be2:	f003 0302 	and.w	r3, r3, #2
10001be6:	2b02      	cmp	r3, #2
10001be8:	d009      	beq.n	10001bfe <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001bea:	2301      	movs	r3, #1
10001bec:	e062      	b.n	10001cb4 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10001bee:	bf00      	nop
10001bf0:	e006      	b.n	10001c00 <RCC_MCUConfig+0x8c>
      break;
10001bf2:	bf00      	nop
10001bf4:	e004      	b.n	10001c00 <RCC_MCUConfig+0x8c>
      break;
10001bf6:	bf00      	nop
10001bf8:	e002      	b.n	10001c00 <RCC_MCUConfig+0x8c>
      break;
10001bfa:	bf00      	nop
10001bfc:	e000      	b.n	10001c00 <RCC_MCUConfig+0x8c>
      break;
10001bfe:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001c00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001c06:	f023 0203 	bic.w	r2, r3, #3
10001c0a:	687b      	ldr	r3, [r7, #4]
10001c0c:	681b      	ldr	r3, [r3, #0]
10001c0e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001c12:	4313      	orrs	r3, r2
10001c14:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001c16:	f7fe fd39 	bl	1000068c <HAL_GetTick>
10001c1a:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001c1c:	e009      	b.n	10001c32 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001c1e:	f7fe fd35 	bl	1000068c <HAL_GetTick>
10001c22:	4602      	mov	r2, r0
10001c24:	68fb      	ldr	r3, [r7, #12]
10001c26:	1ad3      	subs	r3, r2, r3
10001c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001c2c:	d901      	bls.n	10001c32 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10001c2e:	2303      	movs	r3, #3
10001c30:	e040      	b.n	10001cb4 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001c32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001c40:	d1ed      	bne.n	10001c1e <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001c42:	f000 fbaf 	bl	100023a4 <HAL_RCC_GetSystemCoreClockFreq>
10001c46:	4602      	mov	r2, r0
10001c48:	4b1c      	ldr	r3, [pc, #112]	; (10001cbc <RCC_MCUConfig+0x148>)
10001c4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001c4c:	4b1c      	ldr	r3, [pc, #112]	; (10001cc0 <RCC_MCUConfig+0x14c>)
10001c4e:	681b      	ldr	r3, [r3, #0]
10001c50:	4618      	mov	r0, r3
10001c52:	f7fe fcd1 	bl	100005f8 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001c56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c5a:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001c5e:	f023 020f 	bic.w	r2, r3, #15
10001c62:	687b      	ldr	r3, [r7, #4]
10001c64:	685b      	ldr	r3, [r3, #4]
10001c66:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001c6a:	4313      	orrs	r3, r2
10001c6c:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001c70:	f7fe fd0c 	bl	1000068c <HAL_GetTick>
10001c74:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001c76:	e009      	b.n	10001c8c <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001c78:	f7fe fd08 	bl	1000068c <HAL_GetTick>
10001c7c:	4602      	mov	r2, r0
10001c7e:	68fb      	ldr	r3, [r7, #12]
10001c80:	1ad3      	subs	r3, r2, r3
10001c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001c86:	d901      	bls.n	10001c8c <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10001c88:	2303      	movs	r3, #3
10001c8a:	e013      	b.n	10001cb4 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001c8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c90:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001c9c:	d1ec      	bne.n	10001c78 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001c9e:	f000 fb81 	bl	100023a4 <HAL_RCC_GetSystemCoreClockFreq>
10001ca2:	4602      	mov	r2, r0
10001ca4:	4b05      	ldr	r3, [pc, #20]	; (10001cbc <RCC_MCUConfig+0x148>)
10001ca6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001ca8:	4b05      	ldr	r3, [pc, #20]	; (10001cc0 <RCC_MCUConfig+0x14c>)
10001caa:	681b      	ldr	r3, [r3, #0]
10001cac:	4618      	mov	r0, r3
10001cae:	f7fe fca3 	bl	100005f8 <HAL_InitTick>
#endif

  return HAL_OK;
10001cb2:	2300      	movs	r3, #0
}
10001cb4:	4618      	mov	r0, r3
10001cb6:	3710      	adds	r7, #16
10001cb8:	46bd      	mov	sp, r7
10001cba:	bd80      	pop	{r7, pc}
10001cbc:	10020000 	.word	0x10020000
10001cc0:	10020004 	.word	0x10020004

10001cc4 <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
10001cc4:	b480      	push	{r7}
10001cc6:	b089      	sub	sp, #36	; 0x24
10001cc8:	af00      	add	r7, sp, #0
10001cca:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
10001ccc:	2300      	movs	r3, #0
10001cce:	61bb      	str	r3, [r7, #24]
10001cd0:	2301      	movs	r3, #1
10001cd2:	617b      	str	r3, [r7, #20]
10001cd4:	2300      	movs	r3, #0
10001cd6:	613b      	str	r3, [r7, #16]
10001cd8:	2300      	movs	r3, #0
10001cda:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
10001cdc:	f04f 0300 	mov.w	r3, #0
10001ce0:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
10001ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001ce8:	f003 0303 	and.w	r3, r3, #3
10001cec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
10001cee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10001cf6:	0c1b      	lsrs	r3, r3, #16
10001cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001cfc:	3301      	adds	r3, #1
10001cfe:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
10001d00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001d08:	0c1b      	lsrs	r3, r3, #16
10001d0a:	f003 0301 	and.w	r3, r3, #1
10001d0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
10001d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001d18:	08db      	lsrs	r3, r3, #3
10001d1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001d1e:	693a      	ldr	r2, [r7, #16]
10001d20:	fb02 f303 	mul.w	r3, r2, r3
10001d24:	ee07 3a90 	vmov	s15, r3
10001d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001d2c:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x1FFF));  //Intermediary value
10001d30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10001d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001d3c:	3301      	adds	r3, #1
10001d3e:	ee07 3a90 	vmov	s15, r3
10001d42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001d46:	edd7 6a02 	vldr	s13, [r7, #8]
10001d4a:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 10001e84 <HAL_RCC_GetPLL2ClockFreq+0x1c0>
10001d4e:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001d52:	ee77 7a27 	vadd.f32	s15, s14, s15
10001d56:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001d5a:	69bb      	ldr	r3, [r7, #24]
10001d5c:	2b01      	cmp	r3, #1
10001d5e:	d033      	beq.n	10001dc8 <HAL_RCC_GetPLL2ClockFreq+0x104>
10001d60:	2b01      	cmp	r3, #1
10001d62:	d302      	bcc.n	10001d6a <HAL_RCC_GetPLL2ClockFreq+0xa6>
10001d64:	2b02      	cmp	r3, #2
10001d66:	d03e      	beq.n	10001de6 <HAL_RCC_GetPLL2ClockFreq+0x122>
10001d68:	e041      	b.n	10001dee <HAL_RCC_GetPLL2ClockFreq+0x12a>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d6e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001d72:	f003 0304 	and.w	r3, r3, #4
10001d76:	2b04      	cmp	r3, #4
10001d78:	d117      	bne.n	10001daa <HAL_RCC_GetPLL2ClockFreq+0xe6>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001d7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d7e:	699b      	ldr	r3, [r3, #24]
10001d80:	f003 0303 	and.w	r3, r3, #3
10001d84:	4a40      	ldr	r2, [pc, #256]	; (10001e88 <HAL_RCC_GetPLL2ClockFreq+0x1c4>)
10001d86:	fa22 f303 	lsr.w	r3, r2, r3
10001d8a:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
10001d8c:	68fa      	ldr	r2, [r7, #12]
10001d8e:	697b      	ldr	r3, [r7, #20]
10001d90:	fbb2 f3f3 	udiv	r3, r2, r3
10001d94:	ee07 3a90 	vmov	s15, r3
10001d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001d9c:	ed97 7a07 	vldr	s14, [r7, #28]
10001da0:	ee67 7a27 	vmul.f32	s15, s14, s15
10001da4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
10001da8:	e025      	b.n	10001df6 <HAL_RCC_GetPLL2ClockFreq+0x132>
        pll2vco *= (float)(HSI_VALUE / pll2m);
10001daa:	4a37      	ldr	r2, [pc, #220]	; (10001e88 <HAL_RCC_GetPLL2ClockFreq+0x1c4>)
10001dac:	697b      	ldr	r3, [r7, #20]
10001dae:	fbb2 f3f3 	udiv	r3, r2, r3
10001db2:	ee07 3a90 	vmov	s15, r3
10001db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001dba:	ed97 7a07 	vldr	s14, [r7, #28]
10001dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
10001dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001dc6:	e016      	b.n	10001df6 <HAL_RCC_GetPLL2ClockFreq+0x132>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
10001dc8:	4a30      	ldr	r2, [pc, #192]	; (10001e8c <HAL_RCC_GetPLL2ClockFreq+0x1c8>)
10001dca:	697b      	ldr	r3, [r7, #20]
10001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
10001dd0:	ee07 3a90 	vmov	s15, r3
10001dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001dd8:	ed97 7a07 	vldr	s14, [r7, #28]
10001ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
10001de0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001de4:	e007      	b.n	10001df6 <HAL_RCC_GetPLL2ClockFreq+0x132>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
10001de6:	f04f 0300 	mov.w	r3, #0
10001dea:	61fb      	str	r3, [r7, #28]
      break;
10001dec:	e003      	b.n	10001df6 <HAL_RCC_GetPLL2ClockFreq+0x132>

    default:
      pll2vco = 0;
10001dee:	f04f 0300 	mov.w	r3, #0
10001df2:	61fb      	str	r3, [r7, #28]
      break;
10001df4:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
10001df6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001e02:	3301      	adds	r3, #1
10001e04:	ee07 3a90 	vmov	s15, r3
10001e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001e0c:	edd7 6a07 	vldr	s13, [r7, #28]
10001e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001e18:	ee17 2a90 	vmov	r2, s15
10001e1c:	687b      	ldr	r3, [r7, #4]
10001e1e:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
10001e20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001e28:	0a1b      	lsrs	r3, r3, #8
10001e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001e2e:	3301      	adds	r3, #1
10001e30:	ee07 3a90 	vmov	s15, r3
10001e34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001e38:	edd7 6a07 	vldr	s13, [r7, #28]
10001e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001e44:	ee17 2a90 	vmov	r2, s15
10001e48:	687b      	ldr	r3, [r7, #4]
10001e4a:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
10001e4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001e54:	0c1b      	lsrs	r3, r3, #16
10001e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001e5a:	3301      	adds	r3, #1
10001e5c:	ee07 3a90 	vmov	s15, r3
10001e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001e64:	edd7 6a07 	vldr	s13, [r7, #28]
10001e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001e70:	ee17 2a90 	vmov	r2, s15
10001e74:	687b      	ldr	r3, [r7, #4]
10001e76:	609a      	str	r2, [r3, #8]
}
10001e78:	bf00      	nop
10001e7a:	3724      	adds	r7, #36	; 0x24
10001e7c:	46bd      	mov	sp, r7
10001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e82:	4770      	bx	lr
10001e84:	45fff800 	.word	0x45fff800
10001e88:	03d09000 	.word	0x03d09000
10001e8c:	016e3600 	.word	0x016e3600

10001e90 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001e90:	b480      	push	{r7}
10001e92:	b089      	sub	sp, #36	; 0x24
10001e94:	af00      	add	r7, sp, #0
10001e96:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001e98:	2300      	movs	r3, #0
10001e9a:	61bb      	str	r3, [r7, #24]
10001e9c:	2301      	movs	r3, #1
10001e9e:	617b      	str	r3, [r7, #20]
10001ea0:	2300      	movs	r3, #0
10001ea2:	613b      	str	r3, [r7, #16]
10001ea4:	2300      	movs	r3, #0
10001ea6:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001ea8:	f04f 0300 	mov.w	r3, #0
10001eac:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001eae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001eb2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001eb6:	f003 0303 	and.w	r3, r3, #3
10001eba:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001ebc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ec0:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001ec4:	0c1b      	lsrs	r3, r3, #16
10001ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001eca:	3301      	adds	r3, #1
10001ecc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001ece:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ed2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001ed6:	0c1b      	lsrs	r3, r3, #16
10001ed8:	f003 0301 	and.w	r3, r3, #1
10001edc:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001ede:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ee2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001ee6:	08db      	lsrs	r3, r3, #3
10001ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001eec:	693a      	ldr	r2, [r7, #16]
10001eee:	fb02 f303 	mul.w	r3, r2, r3
10001ef2:	ee07 3a90 	vmov	s15, r3
10001ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001efa:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x1FFF));  //Intermediary value
10001efe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f02:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001f0a:	3301      	adds	r3, #1
10001f0c:	ee07 3a90 	vmov	s15, r3
10001f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001f14:	edd7 6a02 	vldr	s13, [r7, #8]
10001f18:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10002074 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001f1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001f20:	ee77 7a27 	vadd.f32	s15, s14, s15
10001f24:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001f28:	69bb      	ldr	r3, [r7, #24]
10001f2a:	2b03      	cmp	r3, #3
10001f2c:	d85b      	bhi.n	10001fe6 <HAL_RCC_GetPLL3ClockFreq+0x156>
10001f2e:	a201      	add	r2, pc, #4	; (adr r2, 10001f34 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001f34:	10001f45 	.word	0x10001f45
10001f38:	10001fa3 	.word	0x10001fa3
10001f3c:	10001fc1 	.word	0x10001fc1
10001f40:	10001fdf 	.word	0x10001fdf
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f48:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001f4c:	f003 0304 	and.w	r3, r3, #4
10001f50:	2b04      	cmp	r3, #4
10001f52:	d117      	bne.n	10001f84 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001f54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f58:	699b      	ldr	r3, [r3, #24]
10001f5a:	f003 0303 	and.w	r3, r3, #3
10001f5e:	4a46      	ldr	r2, [pc, #280]	; (10002078 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001f60:	fa22 f303 	lsr.w	r3, r2, r3
10001f64:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10001f66:	68fa      	ldr	r2, [r7, #12]
10001f68:	697b      	ldr	r3, [r7, #20]
10001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
10001f6e:	ee07 3a90 	vmov	s15, r3
10001f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001f76:	ed97 7a07 	vldr	s14, [r7, #28]
10001f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
10001f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001f82:	e030      	b.n	10001fe6 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001f84:	4a3c      	ldr	r2, [pc, #240]	; (10002078 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001f86:	697b      	ldr	r3, [r7, #20]
10001f88:	fbb2 f3f3 	udiv	r3, r2, r3
10001f8c:	ee07 3a90 	vmov	s15, r3
10001f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001f94:	ed97 7a07 	vldr	s14, [r7, #28]
10001f98:	ee67 7a27 	vmul.f32	s15, s14, s15
10001f9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001fa0:	e021      	b.n	10001fe6 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10001fa2:	4a36      	ldr	r2, [pc, #216]	; (1000207c <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10001fa4:	697b      	ldr	r3, [r7, #20]
10001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
10001faa:	ee07 3a90 	vmov	s15, r3
10001fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001fb2:	ed97 7a07 	vldr	s14, [r7, #28]
10001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
10001fba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001fbe:	e012      	b.n	10001fe6 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10001fc0:	4a2f      	ldr	r2, [pc, #188]	; (10002080 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10001fc2:	697b      	ldr	r3, [r7, #20]
10001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
10001fc8:	ee07 3a90 	vmov	s15, r3
10001fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001fd0:	ed97 7a07 	vldr	s14, [r7, #28]
10001fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
10001fd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001fdc:	e003      	b.n	10001fe6 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10001fde:	f04f 0300 	mov.w	r3, #0
10001fe2:	61fb      	str	r3, [r7, #28]
      break;
10001fe4:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10001fe6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fea:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001ff2:	3301      	adds	r3, #1
10001ff4:	ee07 3a90 	vmov	s15, r3
10001ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001ffc:	edd7 6a07 	vldr	s13, [r7, #28]
10002000:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002008:	ee17 2a90 	vmov	r2, s15
1000200c:	687b      	ldr	r3, [r7, #4]
1000200e:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10002010:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002014:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10002018:	0a1b      	lsrs	r3, r3, #8
1000201a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000201e:	3301      	adds	r3, #1
10002020:	ee07 3a90 	vmov	s15, r3
10002024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002028:	edd7 6a07 	vldr	s13, [r7, #28]
1000202c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002034:	ee17 2a90 	vmov	r2, s15
10002038:	687b      	ldr	r3, [r7, #4]
1000203a:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
1000203c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002040:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10002044:	0c1b      	lsrs	r3, r3, #16
10002046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000204a:	3301      	adds	r3, #1
1000204c:	ee07 3a90 	vmov	s15, r3
10002050:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002054:	edd7 6a07 	vldr	s13, [r7, #28]
10002058:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000205c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002060:	ee17 2a90 	vmov	r2, s15
10002064:	687b      	ldr	r3, [r7, #4]
10002066:	609a      	str	r2, [r3, #8]
}
10002068:	bf00      	nop
1000206a:	3724      	adds	r7, #36	; 0x24
1000206c:	46bd      	mov	sp, r7
1000206e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002072:	4770      	bx	lr
10002074:	45fff800 	.word	0x45fff800
10002078:	03d09000 	.word	0x03d09000
1000207c:	016e3600 	.word	0x016e3600
10002080:	003d0900 	.word	0x003d0900

10002084 <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
10002084:	b480      	push	{r7}
10002086:	b089      	sub	sp, #36	; 0x24
10002088:	af00      	add	r7, sp, #0
1000208a:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
1000208c:	2300      	movs	r3, #0
1000208e:	61bb      	str	r3, [r7, #24]
10002090:	2301      	movs	r3, #1
10002092:	617b      	str	r3, [r7, #20]
10002094:	2300      	movs	r3, #0
10002096:	613b      	str	r3, [r7, #16]
10002098:	2300      	movs	r3, #0
1000209a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
1000209c:	f04f 0300 	mov.w	r3, #0
100020a0:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
100020a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020a6:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100020aa:	f003 0303 	and.w	r3, r3, #3
100020ae:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
100020b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020b4:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
100020b8:	0c1b      	lsrs	r3, r3, #16
100020ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
100020be:	3301      	adds	r3, #1
100020c0:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
100020c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020c6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100020ca:	0c1b      	lsrs	r3, r3, #16
100020cc:	f003 0301 	and.w	r3, r3, #1
100020d0:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
100020d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020d6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100020da:	08db      	lsrs	r3, r3, #3
100020dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
100020e0:	693a      	ldr	r2, [r7, #16]
100020e2:	fb02 f303 	mul.w	r3, r2, r3
100020e6:	ee07 3a90 	vmov	s15, r3
100020ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
100020ee:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x1FFF));  //Intermediary value
100020f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020f6:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
100020fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
100020fe:	3301      	adds	r3, #1
10002100:	ee07 3a90 	vmov	s15, r3
10002104:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002108:	edd7 6a02 	vldr	s13, [r7, #8]
1000210c:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 10002280 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
10002110:	eec6 7a86 	vdiv.f32	s15, s13, s12
10002114:	ee77 7a27 	vadd.f32	s15, s14, s15
10002118:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
1000211c:	69bb      	ldr	r3, [r7, #24]
1000211e:	2b03      	cmp	r3, #3
10002120:	d866      	bhi.n	100021f0 <HAL_RCC_GetPLL4ClockFreq+0x16c>
10002122:	a201      	add	r2, pc, #4	; (adr r2, 10002128 <HAL_RCC_GetPLL4ClockFreq+0xa4>)
10002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002128:	10002139 	.word	0x10002139
1000212c:	10002197 	.word	0x10002197
10002130:	100021b5 	.word	0x100021b5
10002134:	100021d3 	.word	0x100021d3
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10002138:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000213c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002140:	f003 0304 	and.w	r3, r3, #4
10002144:	2b04      	cmp	r3, #4
10002146:	d117      	bne.n	10002178 <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002148:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000214c:	699b      	ldr	r3, [r3, #24]
1000214e:	f003 0303 	and.w	r3, r3, #3
10002152:	4a4c      	ldr	r2, [pc, #304]	; (10002284 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10002154:	fa22 f303 	lsr.w	r3, r2, r3
10002158:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
1000215a:	68fa      	ldr	r2, [r7, #12]
1000215c:	697b      	ldr	r3, [r7, #20]
1000215e:	fbb2 f3f3 	udiv	r3, r2, r3
10002162:	ee07 3a90 	vmov	s15, r3
10002166:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000216a:	ed97 7a07 	vldr	s14, [r7, #28]
1000216e:	ee67 7a27 	vmul.f32	s15, s14, s15
10002172:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
10002176:	e03b      	b.n	100021f0 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
10002178:	4a42      	ldr	r2, [pc, #264]	; (10002284 <HAL_RCC_GetPLL4ClockFreq+0x200>)
1000217a:	697b      	ldr	r3, [r7, #20]
1000217c:	fbb2 f3f3 	udiv	r3, r2, r3
10002180:	ee07 3a90 	vmov	s15, r3
10002184:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002188:	ed97 7a07 	vldr	s14, [r7, #28]
1000218c:	ee67 7a27 	vmul.f32	s15, s14, s15
10002190:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002194:	e02c      	b.n	100021f0 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
10002196:	4a3c      	ldr	r2, [pc, #240]	; (10002288 <HAL_RCC_GetPLL4ClockFreq+0x204>)
10002198:	697b      	ldr	r3, [r7, #20]
1000219a:	fbb2 f3f3 	udiv	r3, r2, r3
1000219e:	ee07 3a90 	vmov	s15, r3
100021a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
100021a6:	ed97 7a07 	vldr	s14, [r7, #28]
100021aa:	ee67 7a27 	vmul.f32	s15, s14, s15
100021ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100021b2:	e01d      	b.n	100021f0 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
100021b4:	4a35      	ldr	r2, [pc, #212]	; (1000228c <HAL_RCC_GetPLL4ClockFreq+0x208>)
100021b6:	697b      	ldr	r3, [r7, #20]
100021b8:	fbb2 f3f3 	udiv	r3, r2, r3
100021bc:	ee07 3a90 	vmov	s15, r3
100021c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
100021c4:	ed97 7a07 	vldr	s14, [r7, #28]
100021c8:	ee67 7a27 	vmul.f32	s15, s14, s15
100021cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100021d0:	e00e      	b.n	100021f0 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
100021d2:	4a2f      	ldr	r2, [pc, #188]	; (10002290 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
100021d4:	697b      	ldr	r3, [r7, #20]
100021d6:	fbb2 f3f3 	udiv	r3, r2, r3
100021da:	ee07 3a90 	vmov	s15, r3
100021de:	eef8 7a67 	vcvt.f32.u32	s15, s15
100021e2:	ed97 7a07 	vldr	s14, [r7, #28]
100021e6:	ee67 7a27 	vmul.f32	s15, s14, s15
100021ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100021ee:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
100021f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021f4:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100021f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100021fc:	3301      	adds	r3, #1
100021fe:	ee07 3a90 	vmov	s15, r3
10002202:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002206:	edd7 6a07 	vldr	s13, [r7, #28]
1000220a:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000220e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002212:	ee17 2a90 	vmov	r2, s15
10002216:	687b      	ldr	r3, [r7, #4]
10002218:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
1000221a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000221e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10002222:	0a1b      	lsrs	r3, r3, #8
10002224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002228:	3301      	adds	r3, #1
1000222a:	ee07 3a90 	vmov	s15, r3
1000222e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002232:	edd7 6a07 	vldr	s13, [r7, #28]
10002236:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000223a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000223e:	ee17 2a90 	vmov	r2, s15
10002242:	687b      	ldr	r3, [r7, #4]
10002244:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
10002246:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000224a:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
1000224e:	0c1b      	lsrs	r3, r3, #16
10002250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002254:	3301      	adds	r3, #1
10002256:	ee07 3a90 	vmov	s15, r3
1000225a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000225e:	edd7 6a07 	vldr	s13, [r7, #28]
10002262:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000226a:	ee17 2a90 	vmov	r2, s15
1000226e:	687b      	ldr	r3, [r7, #4]
10002270:	609a      	str	r2, [r3, #8]
}
10002272:	bf00      	nop
10002274:	3724      	adds	r7, #36	; 0x24
10002276:	46bd      	mov	sp, r7
10002278:	f85d 7b04 	ldr.w	r7, [sp], #4
1000227c:	4770      	bx	lr
1000227e:	bf00      	nop
10002280:	45fff800 	.word	0x45fff800
10002284:	03d09000 	.word	0x03d09000
10002288:	016e3600 	.word	0x016e3600
1000228c:	003d0900 	.word	0x003d0900
10002290:	00bb8000 	.word	0x00bb8000

10002294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
10002294:	b580      	push	{r7, lr}
10002296:	b082      	sub	sp, #8
10002298:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
1000229a:	2300      	movs	r3, #0
1000229c:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
1000229e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022a2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
100022a6:	f003 0307 	and.w	r3, r3, #7
100022aa:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
100022ac:	687b      	ldr	r3, [r7, #4]
100022ae:	2b04      	cmp	r3, #4
100022b0:	d901      	bls.n	100022b6 <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
100022b2:	2304      	movs	r3, #4
100022b4:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
100022b6:	f000 f85a 	bl	1000236e <HAL_RCC_GetMCUFreq>
100022ba:	4602      	mov	r2, r0
100022bc:	687b      	ldr	r3, [r7, #4]
100022be:	fa22 f303 	lsr.w	r3, r2, r3
}
100022c2:	4618      	mov	r0, r3
100022c4:	3708      	adds	r7, #8
100022c6:	46bd      	mov	sp, r7
100022c8:	bd80      	pop	{r7, pc}

100022ca <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
100022ca:	b580      	push	{r7, lr}
100022cc:	b082      	sub	sp, #8
100022ce:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
100022d0:	2300      	movs	r3, #0
100022d2:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
100022d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022d8:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100022dc:	f003 0307 	and.w	r3, r3, #7
100022e0:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
100022e2:	687b      	ldr	r3, [r7, #4]
100022e4:	2b04      	cmp	r3, #4
100022e6:	d901      	bls.n	100022ec <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
100022e8:	2304      	movs	r3, #4
100022ea:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
100022ec:	f000 f83f 	bl	1000236e <HAL_RCC_GetMCUFreq>
100022f0:	4602      	mov	r2, r0
100022f2:	687b      	ldr	r3, [r7, #4]
100022f4:	fa22 f303 	lsr.w	r3, r2, r3
}
100022f8:	4618      	mov	r0, r3
100022fa:	3708      	adds	r7, #8
100022fc:	46bd      	mov	sp, r7
100022fe:	bd80      	pop	{r7, pc}

10002300 <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
10002300:	b580      	push	{r7, lr}
10002302:	b082      	sub	sp, #8
10002304:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
10002306:	2300      	movs	r3, #0
10002308:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
1000230a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002310:	f003 0307 	and.w	r3, r3, #7
10002314:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
10002316:	687b      	ldr	r3, [r7, #4]
10002318:	2b04      	cmp	r3, #4
1000231a:	d901      	bls.n	10002320 <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
1000231c:	2304      	movs	r3, #4
1000231e:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
10002320:	f000 f808 	bl	10002334 <HAL_RCC_GetACLKFreq>
10002324:	4602      	mov	r2, r0
10002326:	687b      	ldr	r3, [r7, #4]
10002328:	fa22 f303 	lsr.w	r3, r2, r3
}
1000232c:	4618      	mov	r0, r3
1000232e:	3708      	adds	r7, #8
10002330:	46bd      	mov	sp, r7
10002332:	bd80      	pop	{r7, pc}

10002334 <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
10002334:	b580      	push	{r7, lr}
10002336:	b082      	sub	sp, #8
10002338:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
1000233a:	2300      	movs	r3, #0
1000233c:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
1000233e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002344:	f003 0307 	and.w	r3, r3, #7
10002348:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
1000234a:	687b      	ldr	r3, [r7, #4]
1000234c:	2b03      	cmp	r3, #3
1000234e:	d901      	bls.n	10002354 <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
10002350:	2303      	movs	r3, #3
10002352:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
10002354:	687b      	ldr	r3, [r7, #4]
10002356:	3301      	adds	r3, #1
10002358:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
1000235a:	f000 f82b 	bl	100023b4 <HAL_RCC_GetAXISSFreq>
1000235e:	4602      	mov	r2, r0
10002360:	687b      	ldr	r3, [r7, #4]
10002362:	fbb2 f3f3 	udiv	r3, r2, r3
}
10002366:	4618      	mov	r0, r3
10002368:	3708      	adds	r7, #8
1000236a:	46bd      	mov	sp, r7
1000236c:	bd80      	pop	{r7, pc}

1000236e <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
1000236e:	b580      	push	{r7, lr}
10002370:	b082      	sub	sp, #8
10002372:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10002374:	2300      	movs	r3, #0
10002376:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10002378:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000237c:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10002380:	f003 030f 	and.w	r3, r3, #15
10002384:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10002386:	687b      	ldr	r3, [r7, #4]
10002388:	2b09      	cmp	r3, #9
1000238a:	d901      	bls.n	10002390 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
1000238c:	2309      	movs	r3, #9
1000238e:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10002390:	f000 f84c 	bl	1000242c <HAL_RCC_GetMCUSSFreq>
10002394:	4602      	mov	r2, r0
10002396:	687b      	ldr	r3, [r7, #4]
10002398:	fa22 f303 	lsr.w	r3, r2, r3
}
1000239c:	4618      	mov	r0, r3
1000239e:	3708      	adds	r7, #8
100023a0:	46bd      	mov	sp, r7
100023a2:	bd80      	pop	{r7, pc}

100023a4 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
100023a4:	b580      	push	{r7, lr}
100023a6:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
100023a8:	f7ff ffe1 	bl	1000236e <HAL_RCC_GetMCUFreq>
100023ac:	4603      	mov	r3, r0
#endif
}
100023ae:	4618      	mov	r0, r3
100023b0:	bd80      	pop	{r7, pc}
	...

100023b4 <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
100023b4:	b580      	push	{r7, lr}
100023b6:	b084      	sub	sp, #16
100023b8:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
100023ba:	2300      	movs	r3, #0
100023bc:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
100023be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100023c4:	f003 0307 	and.w	r3, r3, #7
100023c8:	2b01      	cmp	r3, #1
100023ca:	d01f      	beq.n	1000240c <HAL_RCC_GetAXISSFreq+0x58>
100023cc:	2b01      	cmp	r3, #1
100023ce:	d308      	bcc.n	100023e2 <HAL_RCC_GetAXISSFreq+0x2e>
100023d0:	2b02      	cmp	r3, #2
100023d2:	d11e      	bne.n	10002412 <HAL_RCC_GetAXISSFreq+0x5e>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
100023d4:	463b      	mov	r3, r7
100023d6:	4618      	mov	r0, r3
100023d8:	f7ff fc74 	bl	10001cc4 <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
100023dc:	683b      	ldr	r3, [r7, #0]
100023de:	60fb      	str	r3, [r7, #12]
      break;
100023e0:	e01a      	b.n	10002418 <HAL_RCC_GetAXISSFreq+0x64>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100023e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023e6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100023ea:	f003 0304 	and.w	r3, r3, #4
100023ee:	2b04      	cmp	r3, #4
100023f0:	d109      	bne.n	10002406 <HAL_RCC_GetAXISSFreq+0x52>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100023f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023f6:	699b      	ldr	r3, [r3, #24]
100023f8:	f003 0303 	and.w	r3, r3, #3
100023fc:	4a09      	ldr	r2, [pc, #36]	; (10002424 <HAL_RCC_GetAXISSFreq+0x70>)
100023fe:	fa22 f303 	lsr.w	r3, r2, r3
10002402:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
10002404:	e008      	b.n	10002418 <HAL_RCC_GetAXISSFreq+0x64>
        axissfreq = HSI_VALUE;
10002406:	4b07      	ldr	r3, [pc, #28]	; (10002424 <HAL_RCC_GetAXISSFreq+0x70>)
10002408:	60fb      	str	r3, [r7, #12]
      break;
1000240a:	e005      	b.n	10002418 <HAL_RCC_GetAXISSFreq+0x64>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
1000240c:	4b06      	ldr	r3, [pc, #24]	; (10002428 <HAL_RCC_GetAXISSFreq+0x74>)
1000240e:	60fb      	str	r3, [r7, #12]
      break;
10002410:	e002      	b.n	10002418 <HAL_RCC_GetAXISSFreq+0x64>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
10002412:	2300      	movs	r3, #0
10002414:	60fb      	str	r3, [r7, #12]
      break;
10002416:	bf00      	nop
  }

  return axissfreq;
10002418:	68fb      	ldr	r3, [r7, #12]
}
1000241a:	4618      	mov	r0, r3
1000241c:	3710      	adds	r7, #16
1000241e:	46bd      	mov	sp, r7
10002420:	bd80      	pop	{r7, pc}
10002422:	bf00      	nop
10002424:	03d09000 	.word	0x03d09000
10002428:	016e3600 	.word	0x016e3600

1000242c <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
1000242c:	b580      	push	{r7, lr}
1000242e:	b084      	sub	sp, #16
10002430:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10002432:	2300      	movs	r3, #0
10002434:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10002436:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000243a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000243c:	f003 0303 	and.w	r3, r3, #3
10002440:	2b03      	cmp	r3, #3
10002442:	d822      	bhi.n	1000248a <HAL_RCC_GetMCUSSFreq+0x5e>
10002444:	a201      	add	r2, pc, #4	; (adr r2, 1000244c <HAL_RCC_GetMCUSSFreq+0x20>)
10002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000244a:	bf00      	nop
1000244c:	1000246b 	.word	0x1000246b
10002450:	1000247f 	.word	0x1000247f
10002454:	10002485 	.word	0x10002485
10002458:	1000245d 	.word	0x1000245d
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000245c:	463b      	mov	r3, r7
1000245e:	4618      	mov	r0, r3
10002460:	f7ff fd16 	bl	10001e90 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10002464:	683b      	ldr	r3, [r7, #0]
10002466:	60fb      	str	r3, [r7, #12]
      break;
10002468:	e00f      	b.n	1000248a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000246a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000246e:	699b      	ldr	r3, [r3, #24]
10002470:	f003 0303 	and.w	r3, r3, #3
10002474:	4a07      	ldr	r2, [pc, #28]	; (10002494 <HAL_RCC_GetMCUSSFreq+0x68>)
10002476:	fa22 f303 	lsr.w	r3, r2, r3
1000247a:	60fb      	str	r3, [r7, #12]

      break;
1000247c:	e005      	b.n	1000248a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
1000247e:	4b06      	ldr	r3, [pc, #24]	; (10002498 <HAL_RCC_GetMCUSSFreq+0x6c>)
10002480:	60fb      	str	r3, [r7, #12]
      break;
10002482:	e002      	b.n	1000248a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10002484:	4b05      	ldr	r3, [pc, #20]	; (1000249c <HAL_RCC_GetMCUSSFreq+0x70>)
10002486:	60fb      	str	r3, [r7, #12]
      break;
10002488:	bf00      	nop
  }

  return mcussfreq;
1000248a:	68fb      	ldr	r3, [r7, #12]
}
1000248c:	4618      	mov	r0, r3
1000248e:	3710      	adds	r7, #16
10002490:	46bd      	mov	sp, r7
10002492:	bd80      	pop	{r7, pc}
10002494:	03d09000 	.word	0x03d09000
10002498:	016e3600 	.word	0x016e3600
1000249c:	003d0900 	.word	0x003d0900

100024a0 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
100024a0:	b580      	push	{r7, lr}
100024a2:	b084      	sub	sp, #16
100024a4:	af00      	add	r7, sp, #0
100024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
100024a8:	687b      	ldr	r3, [r7, #4]
100024aa:	681b      	ldr	r3, [r3, #0]
100024ac:	2b00      	cmp	r3, #0
100024ae:	f000 8171 	beq.w	10002794 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
100024b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100024b8:	f003 0307 	and.w	r3, r3, #7
100024bc:	2b02      	cmp	r3, #2
100024be:	d108      	bne.n	100024d2 <RCCEx_PLL2_Config+0x32>
100024c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100024c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100024ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100024ce:	f000 815f 	beq.w	10002790 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
100024d2:	687b      	ldr	r3, [r7, #4]
100024d4:	681b      	ldr	r3, [r3, #0]
100024d6:	2b02      	cmp	r3, #2
100024d8:	f040 8130 	bne.w	1000273c <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100024dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100024e2:	f003 0303 	and.w	r3, r3, #3
100024e6:	2b00      	cmp	r3, #0
100024e8:	d008      	beq.n	100024fc <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
100024ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100024f0:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100024f4:	2b01      	cmp	r3, #1
100024f6:	d001      	beq.n	100024fc <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100024f8:	2301      	movs	r3, #1
100024fa:	e14c      	b.n	10002796 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100024fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002504:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000250c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10002510:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002518:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000251c:	f023 0301 	bic.w	r3, r3, #1
10002520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002524:	f7fe f8b2 	bl	1000068c <HAL_GetTick>
10002528:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000252a:	e008      	b.n	1000253e <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000252c:	f7fe f8ae 	bl	1000068c <HAL_GetTick>
10002530:	4602      	mov	r2, r0
10002532:	68fb      	ldr	r3, [r7, #12]
10002534:	1ad3      	subs	r3, r2, r3
10002536:	2b64      	cmp	r3, #100	; 0x64
10002538:	d901      	bls.n	1000253e <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000253a:	2303      	movs	r3, #3
1000253c:	e12b      	b.n	10002796 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000253e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002546:	f003 0302 	and.w	r3, r3, #2
1000254a:	2b02      	cmp	r3, #2
1000254c:	d0ee      	beq.n	1000252c <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
1000254e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002552:	6a1b      	ldr	r3, [r3, #32]
10002554:	f003 0303 	and.w	r3, r3, #3
10002558:	2b02      	cmp	r3, #2
1000255a:	d107      	bne.n	1000256c <RCCEx_PLL2_Config+0xcc>
1000255c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002560:	6a1b      	ldr	r3, [r3, #32]
10002562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000256a:	d00e      	beq.n	1000258a <RCCEx_PLL2_Config+0xea>
1000256c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002570:	6a1b      	ldr	r3, [r3, #32]
10002572:	f003 0303 	and.w	r3, r3, #3
10002576:	2b03      	cmp	r3, #3
10002578:	d112      	bne.n	100025a0 <RCCEx_PLL2_Config+0x100>
1000257a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000257e:	6a1b      	ldr	r3, [r3, #32]
10002580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002588:	d10a      	bne.n	100025a0 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000258a:	687b      	ldr	r3, [r7, #4]
1000258c:	685a      	ldr	r2, [r3, #4]
1000258e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002594:	f003 0303 	and.w	r3, r3, #3
10002598:	429a      	cmp	r2, r3
1000259a:	d00c      	beq.n	100025b6 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
1000259c:	2301      	movs	r3, #1
1000259e:	e0fa      	b.n	10002796 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
100025a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100025a6:	f023 0203 	bic.w	r2, r3, #3
100025aa:	687b      	ldr	r3, [r7, #4]
100025ac:	685b      	ldr	r3, [r3, #4]
100025ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100025b2:	4313      	orrs	r3, r2
100025b4:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
100025b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
100025be:	4b78      	ldr	r3, [pc, #480]	; (100027a0 <RCCEx_PLL2_Config+0x300>)
100025c0:	4013      	ands	r3, r2
100025c2:	687a      	ldr	r2, [r7, #4]
100025c4:	68d2      	ldr	r2, [r2, #12]
100025c6:	1e51      	subs	r1, r2, #1
100025c8:	687a      	ldr	r2, [r7, #4]
100025ca:	6892      	ldr	r2, [r2, #8]
100025cc:	3a01      	subs	r2, #1
100025ce:	0412      	lsls	r2, r2, #16
100025d0:	430a      	orrs	r2, r1
100025d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100025d6:	4313      	orrs	r3, r2
100025d8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
100025dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100025e4:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100025e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100025ec:	687a      	ldr	r2, [r7, #4]
100025ee:	6912      	ldr	r2, [r2, #16]
100025f0:	1e51      	subs	r1, r2, #1
100025f2:	687a      	ldr	r2, [r7, #4]
100025f4:	6952      	ldr	r2, [r2, #20]
100025f6:	3a01      	subs	r2, #1
100025f8:	0212      	lsls	r2, r2, #8
100025fa:	4311      	orrs	r1, r2
100025fc:	687a      	ldr	r2, [r7, #4]
100025fe:	6992      	ldr	r2, [r2, #24]
10002600:	3a01      	subs	r2, #1
10002602:	0412      	lsls	r2, r2, #16
10002604:	430a      	orrs	r2, r1
10002606:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000260a:	4313      	orrs	r3, r2
1000260c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10002610:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002614:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002618:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000261c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002620:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10002624:	687b      	ldr	r3, [r7, #4]
10002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002628:	2b02      	cmp	r3, #2
1000262a:	d003      	beq.n	10002634 <RCCEx_PLL2_Config+0x194>
1000262c:	687b      	ldr	r3, [r7, #4]
1000262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002630:	2b00      	cmp	r3, #0
10002632:	d10c      	bne.n	1000264e <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10002634:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002638:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000263c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002640:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002644:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002648:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
1000264c:	e00f      	b.n	1000266e <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
1000264e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002652:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000265a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000265e:	687a      	ldr	r2, [r7, #4]
10002660:	6a12      	ldr	r2, [r2, #32]
10002662:	00d2      	lsls	r2, r2, #3
10002664:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002668:	4313      	orrs	r3, r2
1000266a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
1000266e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002672:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002676:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000267a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1000267e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002682:	687b      	ldr	r3, [r7, #4]
10002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002686:	2b02      	cmp	r3, #2
10002688:	d124      	bne.n	100026d4 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
1000268a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000268e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10002692:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002696:	687b      	ldr	r3, [r7, #4]
10002698:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000269a:	687b      	ldr	r3, [r7, #4]
1000269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000269e:	4319      	orrs	r1, r3
100026a0:	687b      	ldr	r3, [r7, #4]
100026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100026a4:	4319      	orrs	r1, r3
100026a6:	687b      	ldr	r3, [r7, #4]
100026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100026aa:	4319      	orrs	r1, r3
100026ac:	687b      	ldr	r3, [r7, #4]
100026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100026b0:	041b      	lsls	r3, r3, #16
100026b2:	430b      	orrs	r3, r1
100026b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100026b8:	4313      	orrs	r3, r2
100026ba:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
100026be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100026c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026ca:	f043 0304 	orr.w	r3, r3, #4
100026ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
100026d2:	e009      	b.n	100026e8 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
100026d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100026dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026e0:	f023 0304 	bic.w	r3, r3, #4
100026e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
100026e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100026f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026f4:	f043 0301 	orr.w	r3, r3, #1
100026f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100026fc:	f7fd ffc6 	bl	1000068c <HAL_GetTick>
10002700:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002702:	e008      	b.n	10002716 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002704:	f7fd ffc2 	bl	1000068c <HAL_GetTick>
10002708:	4602      	mov	r2, r0
1000270a:	68fb      	ldr	r3, [r7, #12]
1000270c:	1ad3      	subs	r3, r2, r3
1000270e:	2b64      	cmp	r3, #100	; 0x64
10002710:	d901      	bls.n	10002716 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10002712:	2303      	movs	r3, #3
10002714:	e03f      	b.n	10002796 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002716:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000271e:	f003 0302 	and.w	r3, r3, #2
10002722:	2b02      	cmp	r3, #2
10002724:	d1ee      	bne.n	10002704 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002726:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000272a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000272e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002732:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002736:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
1000273a:	e02b      	b.n	10002794 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000273c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002744:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000274c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10002750:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002758:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000275c:	f023 0301 	bic.w	r3, r3, #1
10002760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002764:	f7fd ff92 	bl	1000068c <HAL_GetTick>
10002768:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000276a:	e008      	b.n	1000277e <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000276c:	f7fd ff8e 	bl	1000068c <HAL_GetTick>
10002770:	4602      	mov	r2, r0
10002772:	68fb      	ldr	r3, [r7, #12]
10002774:	1ad3      	subs	r3, r2, r3
10002776:	2b64      	cmp	r3, #100	; 0x64
10002778:	d901      	bls.n	1000277e <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
1000277a:	2303      	movs	r3, #3
1000277c:	e00b      	b.n	10002796 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000277e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002786:	f003 0302 	and.w	r3, r3, #2
1000278a:	2b02      	cmp	r3, #2
1000278c:	d0ee      	beq.n	1000276c <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
1000278e:	e001      	b.n	10002794 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002790:	2301      	movs	r3, #1
10002792:	e000      	b.n	10002796 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10002794:	2300      	movs	r3, #0

}
10002796:	4618      	mov	r0, r3
10002798:	3710      	adds	r7, #16
1000279a:	46bd      	mov	sp, r7
1000279c:	bd80      	pop	{r7, pc}
1000279e:	bf00      	nop
100027a0:	ffc0fe00 	.word	0xffc0fe00

100027a4 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100027a4:	b580      	push	{r7, lr}
100027a6:	b084      	sub	sp, #16
100027a8:	af00      	add	r7, sp, #0
100027aa:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100027ac:	687b      	ldr	r3, [r7, #4]
100027ae:	681b      	ldr	r3, [r3, #0]
100027b0:	2b00      	cmp	r3, #0
100027b2:	f000 815a 	beq.w	10002a6a <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100027b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100027bc:	f003 0303 	and.w	r3, r3, #3
100027c0:	2b03      	cmp	r3, #3
100027c2:	d108      	bne.n	100027d6 <RCCEx_PLL3_Config+0x32>
100027c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100027ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100027ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100027d2:	f000 8148 	beq.w	10002a66 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
100027d6:	687b      	ldr	r3, [r7, #4]
100027d8:	681b      	ldr	r3, [r3, #0]
100027da:	2b02      	cmp	r3, #2
100027dc:	f040 8119 	bne.w	10002a12 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100027e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027e4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100027e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100027ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100027f0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100027f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027f8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100027fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002800:	f023 0301 	bic.w	r3, r3, #1
10002804:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002808:	f7fd ff40 	bl	1000068c <HAL_GetTick>
1000280c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000280e:	e008      	b.n	10002822 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002810:	f7fd ff3c 	bl	1000068c <HAL_GetTick>
10002814:	4602      	mov	r2, r0
10002816:	68fb      	ldr	r3, [r7, #12]
10002818:	1ad3      	subs	r3, r2, r3
1000281a:	2b64      	cmp	r3, #100	; 0x64
1000281c:	d901      	bls.n	10002822 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
1000281e:	2303      	movs	r3, #3
10002820:	e124      	b.n	10002a6c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002822:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002826:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000282a:	f003 0302 	and.w	r3, r3, #2
1000282e:	2b02      	cmp	r3, #2
10002830:	d0ee      	beq.n	10002810 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10002832:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002836:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000283a:	f023 0203 	bic.w	r2, r3, #3
1000283e:	687b      	ldr	r3, [r7, #4]
10002840:	685b      	ldr	r3, [r3, #4]
10002842:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002846:	4313      	orrs	r3, r2
10002848:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000284c:	e008      	b.n	10002860 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000284e:	f7fd ff1d 	bl	1000068c <HAL_GetTick>
10002852:	4602      	mov	r2, r0
10002854:	68fb      	ldr	r3, [r7, #12]
10002856:	1ad3      	subs	r3, r2, r3
10002858:	2b64      	cmp	r3, #100	; 0x64
1000285a:	d901      	bls.n	10002860 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
1000285c:	2303      	movs	r3, #3
1000285e:	e105      	b.n	10002a6c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002860:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002864:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000286c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002870:	d1ed      	bne.n	1000284e <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10002872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002876:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
1000287a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000287e:	687b      	ldr	r3, [r7, #4]
10002880:	69db      	ldr	r3, [r3, #28]
10002882:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002886:	4313      	orrs	r3, r2
10002888:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
1000288c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002890:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10002894:	4b77      	ldr	r3, [pc, #476]	; (10002a74 <RCCEx_PLL3_Config+0x2d0>)
10002896:	4013      	ands	r3, r2
10002898:	687a      	ldr	r2, [r7, #4]
1000289a:	68d2      	ldr	r2, [r2, #12]
1000289c:	1e51      	subs	r1, r2, #1
1000289e:	687a      	ldr	r2, [r7, #4]
100028a0:	6892      	ldr	r2, [r2, #8]
100028a2:	3a01      	subs	r2, #1
100028a4:	0412      	lsls	r2, r2, #16
100028a6:	430a      	orrs	r2, r1
100028a8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100028ac:	4313      	orrs	r3, r2
100028ae:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
100028b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028b6:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100028ba:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100028be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100028c2:	687a      	ldr	r2, [r7, #4]
100028c4:	6912      	ldr	r2, [r2, #16]
100028c6:	1e51      	subs	r1, r2, #1
100028c8:	687a      	ldr	r2, [r7, #4]
100028ca:	6952      	ldr	r2, [r2, #20]
100028cc:	3a01      	subs	r2, #1
100028ce:	0212      	lsls	r2, r2, #8
100028d0:	4311      	orrs	r1, r2
100028d2:	687a      	ldr	r2, [r7, #4]
100028d4:	6992      	ldr	r2, [r2, #24]
100028d6:	3a01      	subs	r2, #1
100028d8:	0412      	lsls	r2, r2, #16
100028da:	430a      	orrs	r2, r1
100028dc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100028e0:	4313      	orrs	r3, r2
100028e2:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100028e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028ea:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100028ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100028f6:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100028fa:	687b      	ldr	r3, [r7, #4]
100028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100028fe:	2b02      	cmp	r3, #2
10002900:	d003      	beq.n	1000290a <RCCEx_PLL3_Config+0x166>
10002902:	687b      	ldr	r3, [r7, #4]
10002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002906:	2b00      	cmp	r3, #0
10002908:	d10c      	bne.n	10002924 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
1000290a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000290e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000291a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000291e:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
10002922:	e00f      	b.n	10002944 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10002924:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002928:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000292c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002930:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002934:	687a      	ldr	r2, [r7, #4]
10002936:	6a12      	ldr	r2, [r2, #32]
10002938:	00d2      	lsls	r2, r2, #3
1000293a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000293e:	4313      	orrs	r3, r2
10002940:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10002944:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002948:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000294c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002954:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002958:	687b      	ldr	r3, [r7, #4]
1000295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000295c:	2b02      	cmp	r3, #2
1000295e:	d124      	bne.n	100029aa <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10002960:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002964:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10002968:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000296c:	687b      	ldr	r3, [r7, #4]
1000296e:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002970:	687b      	ldr	r3, [r7, #4]
10002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002974:	4319      	orrs	r1, r3
10002976:	687b      	ldr	r3, [r7, #4]
10002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000297a:	4319      	orrs	r1, r3
1000297c:	687b      	ldr	r3, [r7, #4]
1000297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002980:	4319      	orrs	r1, r3
10002982:	687b      	ldr	r3, [r7, #4]
10002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002986:	041b      	lsls	r3, r3, #16
10002988:	430b      	orrs	r3, r1
1000298a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000298e:	4313      	orrs	r3, r2
10002990:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10002994:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002998:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000299c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029a0:	f043 0304 	orr.w	r3, r3, #4
100029a4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
100029a8:	e009      	b.n	100029be <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
100029aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029ae:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100029b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029b6:	f023 0304 	bic.w	r3, r3, #4
100029ba:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
100029be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029c2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100029c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029ca:	f043 0301 	orr.w	r3, r3, #1
100029ce:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100029d2:	f7fd fe5b 	bl	1000068c <HAL_GetTick>
100029d6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100029d8:	e008      	b.n	100029ec <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100029da:	f7fd fe57 	bl	1000068c <HAL_GetTick>
100029de:	4602      	mov	r2, r0
100029e0:	68fb      	ldr	r3, [r7, #12]
100029e2:	1ad3      	subs	r3, r2, r3
100029e4:	2b64      	cmp	r3, #100	; 0x64
100029e6:	d901      	bls.n	100029ec <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
100029e8:	2303      	movs	r3, #3
100029ea:	e03f      	b.n	10002a6c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100029ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029f0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100029f4:	f003 0302 	and.w	r3, r3, #2
100029f8:	2b02      	cmp	r3, #2
100029fa:	d1ee      	bne.n	100029da <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100029fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a00:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002a04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a08:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002a0c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10002a10:	e02b      	b.n	10002a6a <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002a12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a16:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002a1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002a22:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10002a26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a2a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002a2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a32:	f023 0301 	bic.w	r3, r3, #1
10002a36:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002a3a:	f7fd fe27 	bl	1000068c <HAL_GetTick>
10002a3e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002a40:	e008      	b.n	10002a54 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002a42:	f7fd fe23 	bl	1000068c <HAL_GetTick>
10002a46:	4602      	mov	r2, r0
10002a48:	68fb      	ldr	r3, [r7, #12]
10002a4a:	1ad3      	subs	r3, r2, r3
10002a4c:	2b64      	cmp	r3, #100	; 0x64
10002a4e:	d901      	bls.n	10002a54 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10002a50:	2303      	movs	r3, #3
10002a52:	e00b      	b.n	10002a6c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002a54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a58:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002a5c:	f003 0302 	and.w	r3, r3, #2
10002a60:	2b02      	cmp	r3, #2
10002a62:	d0ee      	beq.n	10002a42 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10002a64:	e001      	b.n	10002a6a <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002a66:	2301      	movs	r3, #1
10002a68:	e000      	b.n	10002a6c <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10002a6a:	2300      	movs	r3, #0
}
10002a6c:	4618      	mov	r0, r3
10002a6e:	3710      	adds	r7, #16
10002a70:	46bd      	mov	sp, r7
10002a72:	bd80      	pop	{r7, pc}
10002a74:	ffc0fe00 	.word	0xffc0fe00

10002a78 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10002a78:	b580      	push	{r7, lr}
10002a7a:	b084      	sub	sp, #16
10002a7c:	af00      	add	r7, sp, #0
10002a7e:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10002a80:	687b      	ldr	r3, [r7, #4]
10002a82:	681b      	ldr	r3, [r3, #0]
10002a84:	2b00      	cmp	r3, #0
10002a86:	f000 8147 	beq.w	10002d18 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10002a8a:	687b      	ldr	r3, [r7, #4]
10002a8c:	681b      	ldr	r3, [r3, #0]
10002a8e:	2b02      	cmp	r3, #2
10002a90:	f040 8119 	bne.w	10002cc6 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002a94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a98:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002a9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002aa4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10002aa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002aac:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002ab0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002ab4:	f023 0301 	bic.w	r3, r3, #1
10002ab8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002abc:	f7fd fde6 	bl	1000068c <HAL_GetTick>
10002ac0:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002ac2:	e008      	b.n	10002ad6 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002ac4:	f7fd fde2 	bl	1000068c <HAL_GetTick>
10002ac8:	4602      	mov	r2, r0
10002aca:	68fb      	ldr	r3, [r7, #12]
10002acc:	1ad3      	subs	r3, r2, r3
10002ace:	2b64      	cmp	r3, #100	; 0x64
10002ad0:	d901      	bls.n	10002ad6 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10002ad2:	2303      	movs	r3, #3
10002ad4:	e121      	b.n	10002d1a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002ad6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ada:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002ade:	f003 0302 	and.w	r3, r3, #2
10002ae2:	2b02      	cmp	r3, #2
10002ae4:	d0ee      	beq.n	10002ac4 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10002ae6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002aea:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002aee:	f023 0203 	bic.w	r2, r3, #3
10002af2:	687b      	ldr	r3, [r7, #4]
10002af4:	685b      	ldr	r3, [r3, #4]
10002af6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002afa:	4313      	orrs	r3, r2
10002afc:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002b00:	e008      	b.n	10002b14 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002b02:	f7fd fdc3 	bl	1000068c <HAL_GetTick>
10002b06:	4602      	mov	r2, r0
10002b08:	68fb      	ldr	r3, [r7, #12]
10002b0a:	1ad3      	subs	r3, r2, r3
10002b0c:	2b64      	cmp	r3, #100	; 0x64
10002b0e:	d901      	bls.n	10002b14 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10002b10:	2303      	movs	r3, #3
10002b12:	e102      	b.n	10002d1a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002b14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b18:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002b24:	d1ed      	bne.n	10002b02 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10002b26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b2a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10002b2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10002b32:	687b      	ldr	r3, [r7, #4]
10002b34:	69db      	ldr	r3, [r3, #28]
10002b36:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002b3a:	4313      	orrs	r3, r2
10002b3c:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10002b40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b44:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10002b48:	4b76      	ldr	r3, [pc, #472]	; (10002d24 <RCCEx_PLL4_Config+0x2ac>)
10002b4a:	4013      	ands	r3, r2
10002b4c:	687a      	ldr	r2, [r7, #4]
10002b4e:	68d2      	ldr	r2, [r2, #12]
10002b50:	1e51      	subs	r1, r2, #1
10002b52:	687a      	ldr	r2, [r7, #4]
10002b54:	6892      	ldr	r2, [r2, #8]
10002b56:	3a01      	subs	r2, #1
10002b58:	0412      	lsls	r2, r2, #16
10002b5a:	430a      	orrs	r2, r1
10002b5c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002b60:	4313      	orrs	r3, r2
10002b62:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
10002b66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b6a:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10002b6e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10002b72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002b76:	687a      	ldr	r2, [r7, #4]
10002b78:	6912      	ldr	r2, [r2, #16]
10002b7a:	1e51      	subs	r1, r2, #1
10002b7c:	687a      	ldr	r2, [r7, #4]
10002b7e:	6952      	ldr	r2, [r2, #20]
10002b80:	3a01      	subs	r2, #1
10002b82:	0212      	lsls	r2, r2, #8
10002b84:	4311      	orrs	r1, r2
10002b86:	687a      	ldr	r2, [r7, #4]
10002b88:	6992      	ldr	r2, [r2, #24]
10002b8a:	3a01      	subs	r2, #1
10002b8c:	0412      	lsls	r2, r2, #16
10002b8e:	430a      	orrs	r2, r1
10002b90:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002b94:	4313      	orrs	r3, r2
10002b96:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10002b9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b9e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002ba2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002baa:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10002bae:	687b      	ldr	r3, [r7, #4]
10002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002bb2:	2b02      	cmp	r3, #2
10002bb4:	d003      	beq.n	10002bbe <RCCEx_PLL4_Config+0x146>
10002bb6:	687b      	ldr	r3, [r7, #4]
10002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002bba:	2b00      	cmp	r3, #0
10002bbc:	d10c      	bne.n	10002bd8 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10002bbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bc2:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002bc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002bce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002bd2:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10002bd6:	e00f      	b.n	10002bf8 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10002bd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bdc:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002be0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002be4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002be8:	687a      	ldr	r2, [r7, #4]
10002bea:	6a12      	ldr	r2, [r2, #32]
10002bec:	00d2      	lsls	r2, r2, #3
10002bee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002bf2:	4313      	orrs	r3, r2
10002bf4:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bfc:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002c00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002c08:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002c0c:	687b      	ldr	r3, [r7, #4]
10002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002c10:	2b02      	cmp	r3, #2
10002c12:	d124      	bne.n	10002c5e <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10002c14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c18:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10002c1c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002c20:	687b      	ldr	r3, [r7, #4]
10002c22:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002c24:	687b      	ldr	r3, [r7, #4]
10002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002c28:	4319      	orrs	r1, r3
10002c2a:	687b      	ldr	r3, [r7, #4]
10002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002c2e:	4319      	orrs	r1, r3
10002c30:	687b      	ldr	r3, [r7, #4]
10002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002c34:	4319      	orrs	r1, r3
10002c36:	687b      	ldr	r3, [r7, #4]
10002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002c3a:	041b      	lsls	r3, r3, #16
10002c3c:	430b      	orrs	r3, r1
10002c3e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002c42:	4313      	orrs	r3, r2
10002c44:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002c48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c4c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002c50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002c54:	f043 0304 	orr.w	r3, r3, #4
10002c58:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002c5c:	e009      	b.n	10002c72 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10002c5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c62:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002c66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002c6a:	f023 0304 	bic.w	r3, r3, #4
10002c6e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10002c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c76:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002c7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002c7e:	f043 0301 	orr.w	r3, r3, #1
10002c82:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002c86:	f7fd fd01 	bl	1000068c <HAL_GetTick>
10002c8a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002c8c:	e008      	b.n	10002ca0 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002c8e:	f7fd fcfd 	bl	1000068c <HAL_GetTick>
10002c92:	4602      	mov	r2, r0
10002c94:	68fb      	ldr	r3, [r7, #12]
10002c96:	1ad3      	subs	r3, r2, r3
10002c98:	2b64      	cmp	r3, #100	; 0x64
10002c9a:	d901      	bls.n	10002ca0 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10002c9c:	2303      	movs	r3, #3
10002c9e:	e03c      	b.n	10002d1a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ca4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002ca8:	f003 0302 	and.w	r3, r3, #2
10002cac:	2b02      	cmp	r3, #2
10002cae:	d1ee      	bne.n	10002c8e <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cb4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002cb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002cbc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002cc0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002cc4:	e028      	b.n	10002d18 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002cc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cca:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002cce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002cd6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10002cda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cde:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002ce2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002ce6:	f023 0301 	bic.w	r3, r3, #1
10002cea:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002cee:	f7fd fccd 	bl	1000068c <HAL_GetTick>
10002cf2:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002cf4:	e008      	b.n	10002d08 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002cf6:	f7fd fcc9 	bl	1000068c <HAL_GetTick>
10002cfa:	4602      	mov	r2, r0
10002cfc:	68fb      	ldr	r3, [r7, #12]
10002cfe:	1ad3      	subs	r3, r2, r3
10002d00:	2b64      	cmp	r3, #100	; 0x64
10002d02:	d901      	bls.n	10002d08 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10002d04:	2303      	movs	r3, #3
10002d06:	e008      	b.n	10002d1a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002d08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d0c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d10:	f003 0302 	and.w	r3, r3, #2
10002d14:	2b02      	cmp	r3, #2
10002d16:	d0ee      	beq.n	10002cf6 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002d18:	2300      	movs	r3, #0
}
10002d1a:	4618      	mov	r0, r3
10002d1c:	3710      	adds	r7, #16
10002d1e:	46bd      	mov	sp, r7
10002d20:	bd80      	pop	{r7, pc}
10002d22:	bf00      	nop
10002d24:	ffc0fe00 	.word	0xffc0fe00

10002d28 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10002d28:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
10002d2c:	b0cc      	sub	sp, #304	; 0x130
10002d2e:	af00      	add	r7, sp, #0
10002d30:	1d3b      	adds	r3, r7, #4
10002d32:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10002d34:	2300      	movs	r3, #0
10002d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
10002d3a:	2300      	movs	r3, #0
10002d3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10002d40:	2300      	movs	r3, #0
10002d42:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10002d46:	2300      	movs	r3, #0
10002d48:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10002d4c:	1d3b      	adds	r3, r7, #4
10002d4e:	681b      	ldr	r3, [r3, #0]
10002d50:	e9d3 bc00 	ldrd	fp, ip, [r3]
10002d54:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
10002d58:	f04f 0200 	mov.w	r2, #0
10002d5c:	ea0b 0301 	and.w	r3, fp, r1
10002d60:	ea0c 0402 	and.w	r4, ip, r2
10002d64:	4323      	orrs	r3, r4
10002d66:	d00e      	beq.n	10002d86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10002d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d6c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10002d70:	f023 0203 	bic.w	r2, r3, #3
10002d74:	1d3b      	adds	r3, r7, #4
10002d76:	681b      	ldr	r3, [r3, #0]
10002d78:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
10002d7c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002d80:	4313      	orrs	r3, r2
10002d82:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10002d86:	1d3b      	adds	r3, r7, #4
10002d88:	681b      	ldr	r3, [r3, #0]
10002d8a:	e9d3 bc00 	ldrd	fp, ip, [r3]
10002d8e:	f04f 0110 	mov.w	r1, #16
10002d92:	f04f 0200 	mov.w	r2, #0
10002d96:	ea0b 0301 	and.w	r3, fp, r1
10002d9a:	ea0c 0402 	and.w	r4, ip, r2
10002d9e:	4323      	orrs	r3, r4
10002da0:	d02f      	beq.n	10002e02 <HAL_RCCEx_PeriphCLKConfig+0xda>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10002da2:	1d3b      	adds	r3, r7, #4
10002da4:	681b      	ldr	r3, [r3, #0]
10002da6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10002daa:	2b01      	cmp	r3, #1
10002dac:	d11a      	bne.n	10002de4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002dae:	1d3b      	adds	r3, r7, #4
10002db0:	681b      	ldr	r3, [r3, #0]
10002db2:	3380      	adds	r3, #128	; 0x80
10002db4:	4618      	mov	r0, r3
10002db6:	f7ff fe5f 	bl	10002a78 <RCCEx_PLL4_Config>
10002dba:	4603      	mov	r3, r0
10002dbc:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10002dc0:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002dc4:	2b00      	cmp	r3, #0
10002dc6:	d003      	beq.n	10002dd0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      {
        return status;
10002dc8:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002dcc:	f001 bc07 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002dd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002dd4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002dd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10002de0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10002de4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002de8:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10002dec:	f023 0207 	bic.w	r2, r3, #7
10002df0:	1d3b      	adds	r3, r7, #4
10002df2:	681b      	ldr	r3, [r3, #0]
10002df4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10002df8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002dfc:	4313      	orrs	r3, r2
10002dfe:	f8c1 38c0 	str.w	r3, [r1, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10002e02:	1d3b      	adds	r3, r7, #4
10002e04:	681b      	ldr	r3, [r3, #0]
10002e06:	e9d3 bc00 	ldrd	fp, ip, [r3]
10002e0a:	f04f 0120 	mov.w	r1, #32
10002e0e:	f04f 0200 	mov.w	r2, #0
10002e12:	ea0b 0301 	and.w	r3, fp, r1
10002e16:	ea0c 0402 	and.w	r4, ip, r2
10002e1a:	4323      	orrs	r3, r4
10002e1c:	d02f      	beq.n	10002e7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10002e1e:	1d3b      	adds	r3, r7, #4
10002e20:	681b      	ldr	r3, [r3, #0]
10002e22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10002e26:	2b01      	cmp	r3, #1
10002e28:	d11a      	bne.n	10002e60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002e2a:	1d3b      	adds	r3, r7, #4
10002e2c:	681b      	ldr	r3, [r3, #0]
10002e2e:	3380      	adds	r3, #128	; 0x80
10002e30:	4618      	mov	r0, r3
10002e32:	f7ff fe21 	bl	10002a78 <RCCEx_PLL4_Config>
10002e36:	4603      	mov	r3, r0
10002e38:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10002e3c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002e40:	2b00      	cmp	r3, #0
10002e42:	d003      	beq.n	10002e4c <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        return status;
10002e44:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002e48:	f001 bbc9 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002e4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e50:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002e54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10002e5c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10002e60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e64:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10002e68:	f023 0207 	bic.w	r2, r3, #7
10002e6c:	1d3b      	adds	r3, r7, #4
10002e6e:	681b      	ldr	r3, [r3, #0]
10002e70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10002e74:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002e78:	4313      	orrs	r3, r2
10002e7a:	f8c1 38c4 	str.w	r3, [r1, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10002e7e:	1d3b      	adds	r3, r7, #4
10002e80:	681b      	ldr	r3, [r3, #0]
10002e82:	e9d3 bc00 	ldrd	fp, ip, [r3]
10002e86:	f04f 0100 	mov.w	r1, #0
10002e8a:	f04f 0220 	mov.w	r2, #32
10002e8e:	ea0b 0301 	and.w	r3, fp, r1
10002e92:	ea0c 0402 	and.w	r4, ip, r2
10002e96:	4323      	orrs	r3, r4
10002e98:	d02f      	beq.n	10002efa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10002e9a:	1d3b      	adds	r3, r7, #4
10002e9c:	681b      	ldr	r3, [r3, #0]
10002e9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10002ea2:	2b01      	cmp	r3, #1
10002ea4:	d11a      	bne.n	10002edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002ea6:	1d3b      	adds	r3, r7, #4
10002ea8:	681b      	ldr	r3, [r3, #0]
10002eaa:	3344      	adds	r3, #68	; 0x44
10002eac:	4618      	mov	r0, r3
10002eae:	f7ff fc79 	bl	100027a4 <RCCEx_PLL3_Config>
10002eb2:	4603      	mov	r3, r0
10002eb4:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10002eb8:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002ebc:	2b00      	cmp	r3, #0
10002ebe:	d003      	beq.n	10002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        return status;
10002ec0:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002ec4:	f001 bb8b 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002ec8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ecc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002ed0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002ed4:	f043 0320 	orr.w	r3, r3, #32
10002ed8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10002edc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ee0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10002ee4:	f023 0207 	bic.w	r2, r3, #7
10002ee8:	1d3b      	adds	r3, r7, #4
10002eea:	681b      	ldr	r3, [r3, #0]
10002eec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10002ef0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002ef4:	4313      	orrs	r3, r2
10002ef6:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10002efa:	1d3b      	adds	r3, r7, #4
10002efc:	681b      	ldr	r3, [r3, #0]
10002efe:	e9d3 bc00 	ldrd	fp, ip, [r3]
10002f02:	f04f 0180 	mov.w	r1, #128	; 0x80
10002f06:	f04f 0200 	mov.w	r2, #0
10002f0a:	ea0b 0301 	and.w	r3, fp, r1
10002f0e:	ea0c 0402 	and.w	r4, ip, r2
10002f12:	4323      	orrs	r3, r4
10002f14:	d06d      	beq.n	10002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10002f16:	1d3b      	adds	r3, r7, #4
10002f18:	681b      	ldr	r3, [r3, #0]
10002f1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10002f1e:	2b01      	cmp	r3, #1
10002f20:	d020      	beq.n	10002f64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
10002f22:	2b01      	cmp	r3, #1
10002f24:	d302      	bcc.n	10002f2c <HAL_RCCEx_PeriphCLKConfig+0x204>
10002f26:	2b04      	cmp	r3, #4
10002f28:	d038      	beq.n	10002f9c <HAL_RCCEx_PeriphCLKConfig+0x274>
10002f2a:	e053      	b.n	10002fd4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002f2c:	1d3b      	adds	r3, r7, #4
10002f2e:	681b      	ldr	r3, [r3, #0]
10002f30:	3380      	adds	r3, #128	; 0x80
10002f32:	4618      	mov	r0, r3
10002f34:	f7ff fda0 	bl	10002a78 <RCCEx_PLL4_Config>
10002f38:	4603      	mov	r3, r0
10002f3a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10002f3e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002f42:	2b00      	cmp	r3, #0
10002f44:	d003      	beq.n	10002f4e <HAL_RCCEx_PeriphCLKConfig+0x226>
        {
          return status;
10002f46:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002f4a:	f001 bb48 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10002f4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f52:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002f56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002f5a:	f043 0320 	orr.w	r3, r3, #32
10002f5e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10002f62:	e037      	b.n	10002fd4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002f64:	1d3b      	adds	r3, r7, #4
10002f66:	681b      	ldr	r3, [r3, #0]
10002f68:	3344      	adds	r3, #68	; 0x44
10002f6a:	4618      	mov	r0, r3
10002f6c:	f7ff fc1a 	bl	100027a4 <RCCEx_PLL3_Config>
10002f70:	4603      	mov	r3, r0
10002f72:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10002f76:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002f7a:	2b00      	cmp	r3, #0
10002f7c:	d003      	beq.n	10002f86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
        {
          return status;
10002f7e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002f82:	f001 bb2c 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002f86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f8a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002f8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002f92:	f043 0320 	orr.w	r3, r3, #32
10002f96:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10002f9a:	e01b      	b.n	10002fd4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002f9c:	1d3b      	adds	r3, r7, #4
10002f9e:	681b      	ldr	r3, [r3, #0]
10002fa0:	3344      	adds	r3, #68	; 0x44
10002fa2:	4618      	mov	r0, r3
10002fa4:	f7ff fbfe 	bl	100027a4 <RCCEx_PLL3_Config>
10002fa8:	4603      	mov	r3, r0
10002faa:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10002fae:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002fb2:	2b00      	cmp	r3, #0
10002fb4:	d003      	beq.n	10002fbe <HAL_RCCEx_PeriphCLKConfig+0x296>
        {
          return status;
10002fb6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002fba:	f001 bb10 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10002fbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fc2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002fc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10002fce:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10002fd2:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10002fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fd8:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
10002fdc:	f023 0207 	bic.w	r2, r3, #7
10002fe0:	1d3b      	adds	r3, r7, #4
10002fe2:	681b      	ldr	r3, [r3, #0]
10002fe4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10002fe8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002fec:	4313      	orrs	r3, r2
10002fee:	f8c1 38c8 	str.w	r3, [r1, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10002ff2:	1d3b      	adds	r3, r7, #4
10002ff4:	681b      	ldr	r3, [r3, #0]
10002ff6:	e9d3 bc00 	ldrd	fp, ip, [r3]
10002ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
10002ffe:	f04f 0200 	mov.w	r2, #0
10003002:	ea0b 0301 	and.w	r3, fp, r1
10003006:	ea0c 0402 	and.w	r4, ip, r2
1000300a:	4323      	orrs	r3, r4
1000300c:	d06d      	beq.n	100030ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
1000300e:	1d3b      	adds	r3, r7, #4
10003010:	681b      	ldr	r3, [r3, #0]
10003012:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10003016:	2b01      	cmp	r3, #1
10003018:	d020      	beq.n	1000305c <HAL_RCCEx_PeriphCLKConfig+0x334>
1000301a:	2b01      	cmp	r3, #1
1000301c:	d302      	bcc.n	10003024 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
1000301e:	2b05      	cmp	r3, #5
10003020:	d038      	beq.n	10003094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
10003022:	e053      	b.n	100030cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003024:	1d3b      	adds	r3, r7, #4
10003026:	681b      	ldr	r3, [r3, #0]
10003028:	3380      	adds	r3, #128	; 0x80
1000302a:	4618      	mov	r0, r3
1000302c:	f7ff fd24 	bl	10002a78 <RCCEx_PLL4_Config>
10003030:	4603      	mov	r3, r0
10003032:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003036:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000303a:	2b00      	cmp	r3, #0
1000303c:	d003      	beq.n	10003046 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        {
          return status;
1000303e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003042:	f001 bacc 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003046:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000304a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000304e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003052:	f043 0320 	orr.w	r3, r3, #32
10003056:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000305a:	e037      	b.n	100030cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000305c:	1d3b      	adds	r3, r7, #4
1000305e:	681b      	ldr	r3, [r3, #0]
10003060:	3344      	adds	r3, #68	; 0x44
10003062:	4618      	mov	r0, r3
10003064:	f7ff fb9e 	bl	100027a4 <RCCEx_PLL3_Config>
10003068:	4603      	mov	r3, r0
1000306a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000306e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003072:	2b00      	cmp	r3, #0
10003074:	d003      	beq.n	1000307e <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          return status;
10003076:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000307a:	f001 bab0 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000307e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003082:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003086:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000308a:	f043 0320 	orr.w	r3, r3, #32
1000308e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003092:	e01b      	b.n	100030cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003094:	1d3b      	adds	r3, r7, #4
10003096:	681b      	ldr	r3, [r3, #0]
10003098:	3344      	adds	r3, #68	; 0x44
1000309a:	4618      	mov	r0, r3
1000309c:	f7ff fb82 	bl	100027a4 <RCCEx_PLL3_Config>
100030a0:	4603      	mov	r3, r0
100030a2:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100030a6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100030aa:	2b00      	cmp	r3, #0
100030ac:	d003      	beq.n	100030b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
        {
          return status;
100030ae:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100030b2:	f001 ba94 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100030b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030ba:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100030be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100030c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100030c6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100030ca:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
100030cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030d0:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
100030d4:	f023 0207 	bic.w	r2, r3, #7
100030d8:	1d3b      	adds	r3, r7, #4
100030da:	681b      	ldr	r3, [r3, #0]
100030dc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
100030e0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100030e4:	4313      	orrs	r3, r2
100030e6:	f8c1 38cc 	str.w	r3, [r1, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
100030ea:	1d3b      	adds	r3, r7, #4
100030ec:	681b      	ldr	r3, [r3, #0]
100030ee:	e9d3 bc00 	ldrd	fp, ip, [r3]
100030f2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
100030f6:	f04f 0200 	mov.w	r2, #0
100030fa:	ea0b 0301 	and.w	r3, fp, r1
100030fe:	ea0c 0402 	and.w	r4, ip, r2
10003102:	4323      	orrs	r3, r4
10003104:	d06d      	beq.n	100031e2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10003106:	1d3b      	adds	r3, r7, #4
10003108:	681b      	ldr	r3, [r3, #0]
1000310a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
1000310e:	2b01      	cmp	r3, #1
10003110:	d020      	beq.n	10003154 <HAL_RCCEx_PeriphCLKConfig+0x42c>
10003112:	2b01      	cmp	r3, #1
10003114:	d302      	bcc.n	1000311c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
10003116:	2b04      	cmp	r3, #4
10003118:	d038      	beq.n	1000318c <HAL_RCCEx_PeriphCLKConfig+0x464>
1000311a:	e053      	b.n	100031c4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000311c:	1d3b      	adds	r3, r7, #4
1000311e:	681b      	ldr	r3, [r3, #0]
10003120:	3380      	adds	r3, #128	; 0x80
10003122:	4618      	mov	r0, r3
10003124:	f7ff fca8 	bl	10002a78 <RCCEx_PLL4_Config>
10003128:	4603      	mov	r3, r0
1000312a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000312e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003132:	2b00      	cmp	r3, #0
10003134:	d003      	beq.n	1000313e <HAL_RCCEx_PeriphCLKConfig+0x416>
        {
          return status;
10003136:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000313a:	f001 ba50 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000313e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003142:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003146:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000314a:	f043 0320 	orr.w	r3, r3, #32
1000314e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003152:	e037      	b.n	100031c4 <HAL_RCCEx_PeriphCLKConfig+0x49c>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003154:	1d3b      	adds	r3, r7, #4
10003156:	681b      	ldr	r3, [r3, #0]
10003158:	3344      	adds	r3, #68	; 0x44
1000315a:	4618      	mov	r0, r3
1000315c:	f7ff fb22 	bl	100027a4 <RCCEx_PLL3_Config>
10003160:	4603      	mov	r3, r0
10003162:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003166:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000316a:	2b00      	cmp	r3, #0
1000316c:	d003      	beq.n	10003176 <HAL_RCCEx_PeriphCLKConfig+0x44e>
        {
          return status;
1000316e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003172:	f001 ba34 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003176:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000317a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000317e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003182:	f043 0320 	orr.w	r3, r3, #32
10003186:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000318a:	e01b      	b.n	100031c4 <HAL_RCCEx_PeriphCLKConfig+0x49c>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000318c:	1d3b      	adds	r3, r7, #4
1000318e:	681b      	ldr	r3, [r3, #0]
10003190:	3344      	adds	r3, #68	; 0x44
10003192:	4618      	mov	r0, r3
10003194:	f7ff fb06 	bl	100027a4 <RCCEx_PLL3_Config>
10003198:	4603      	mov	r3, r0
1000319a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000319e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100031a2:	2b00      	cmp	r3, #0
100031a4:	d003      	beq.n	100031ae <HAL_RCCEx_PeriphCLKConfig+0x486>
        {
          return status;
100031a6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100031aa:	f001 ba18 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100031ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100031b2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100031b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100031ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100031be:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100031c2:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
100031c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100031c8:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
100031cc:	f023 0207 	bic.w	r2, r3, #7
100031d0:	1d3b      	adds	r3, r7, #4
100031d2:	681b      	ldr	r3, [r3, #0]
100031d4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
100031d8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100031dc:	4313      	orrs	r3, r2
100031de:	f8c1 38d0 	str.w	r3, [r1, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
100031e2:	1d3b      	adds	r3, r7, #4
100031e4:	681b      	ldr	r3, [r3, #0]
100031e6:	e9d3 bc00 	ldrd	fp, ip, [r3]
100031ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
100031ee:	f04f 0200 	mov.w	r2, #0
100031f2:	ea0b 0301 	and.w	r3, fp, r1
100031f6:	ea0c 0402 	and.w	r4, ip, r2
100031fa:	4323      	orrs	r3, r4
100031fc:	d06d      	beq.n	100032da <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
100031fe:	1d3b      	adds	r3, r7, #4
10003200:	681b      	ldr	r3, [r3, #0]
10003202:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10003206:	2b01      	cmp	r3, #1
10003208:	d020      	beq.n	1000324c <HAL_RCCEx_PeriphCLKConfig+0x524>
1000320a:	2b01      	cmp	r3, #1
1000320c:	d302      	bcc.n	10003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
1000320e:	2b04      	cmp	r3, #4
10003210:	d038      	beq.n	10003284 <HAL_RCCEx_PeriphCLKConfig+0x55c>
10003212:	e053      	b.n	100032bc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003214:	1d3b      	adds	r3, r7, #4
10003216:	681b      	ldr	r3, [r3, #0]
10003218:	3380      	adds	r3, #128	; 0x80
1000321a:	4618      	mov	r0, r3
1000321c:	f7ff fc2c 	bl	10002a78 <RCCEx_PLL4_Config>
10003220:	4603      	mov	r3, r0
10003222:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003226:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000322a:	2b00      	cmp	r3, #0
1000322c:	d003      	beq.n	10003236 <HAL_RCCEx_PeriphCLKConfig+0x50e>
        {
          return status;
1000322e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003232:	f001 b9d4 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003236:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000323a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000323e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003242:	f043 0320 	orr.w	r3, r3, #32
10003246:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000324a:	e037      	b.n	100032bc <HAL_RCCEx_PeriphCLKConfig+0x594>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000324c:	1d3b      	adds	r3, r7, #4
1000324e:	681b      	ldr	r3, [r3, #0]
10003250:	3344      	adds	r3, #68	; 0x44
10003252:	4618      	mov	r0, r3
10003254:	f7ff faa6 	bl	100027a4 <RCCEx_PLL3_Config>
10003258:	4603      	mov	r3, r0
1000325a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000325e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003262:	2b00      	cmp	r3, #0
10003264:	d003      	beq.n	1000326e <HAL_RCCEx_PeriphCLKConfig+0x546>
        {
          return status;
10003266:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000326a:	f001 b9b8 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000326e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003272:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003276:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000327a:	f043 0320 	orr.w	r3, r3, #32
1000327e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003282:	e01b      	b.n	100032bc <HAL_RCCEx_PeriphCLKConfig+0x594>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003284:	1d3b      	adds	r3, r7, #4
10003286:	681b      	ldr	r3, [r3, #0]
10003288:	3344      	adds	r3, #68	; 0x44
1000328a:	4618      	mov	r0, r3
1000328c:	f7ff fa8a 	bl	100027a4 <RCCEx_PLL3_Config>
10003290:	4603      	mov	r3, r0
10003292:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003296:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000329a:	2b00      	cmp	r3, #0
1000329c:	d003      	beq.n	100032a6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
        {
          return status;
1000329e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100032a2:	f001 b99c 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100032a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032aa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100032ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100032b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100032b6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100032ba:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
100032bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032c0:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
100032c4:	f023 0207 	bic.w	r2, r3, #7
100032c8:	1d3b      	adds	r3, r7, #4
100032ca:	681b      	ldr	r3, [r3, #0]
100032cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100032d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100032d4:	4313      	orrs	r3, r2
100032d6:	f8c1 38d4 	str.w	r3, [r1, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
100032da:	1d3b      	adds	r3, r7, #4
100032dc:	681b      	ldr	r3, [r3, #0]
100032de:	e9d3 bc00 	ldrd	fp, ip, [r3]
100032e2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
100032e6:	f04f 0200 	mov.w	r2, #0
100032ea:	ea0b 0301 	and.w	r3, fp, r1
100032ee:	ea0c 0402 	and.w	r4, ip, r2
100032f2:	4323      	orrs	r3, r4
100032f4:	d06d      	beq.n	100033d2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
100032f6:	1d3b      	adds	r3, r7, #4
100032f8:	681b      	ldr	r3, [r3, #0]
100032fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
100032fe:	2b01      	cmp	r3, #1
10003300:	d020      	beq.n	10003344 <HAL_RCCEx_PeriphCLKConfig+0x61c>
10003302:	2b01      	cmp	r3, #1
10003304:	d302      	bcc.n	1000330c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
10003306:	2b04      	cmp	r3, #4
10003308:	d038      	beq.n	1000337c <HAL_RCCEx_PeriphCLKConfig+0x654>
1000330a:	e053      	b.n	100033b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000330c:	1d3b      	adds	r3, r7, #4
1000330e:	681b      	ldr	r3, [r3, #0]
10003310:	3380      	adds	r3, #128	; 0x80
10003312:	4618      	mov	r0, r3
10003314:	f7ff fbb0 	bl	10002a78 <RCCEx_PLL4_Config>
10003318:	4603      	mov	r3, r0
1000331a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000331e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003322:	2b00      	cmp	r3, #0
10003324:	d003      	beq.n	1000332e <HAL_RCCEx_PeriphCLKConfig+0x606>
        {
          return status;
10003326:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000332a:	f001 b958 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000332e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003332:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003336:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000333a:	f043 0310 	orr.w	r3, r3, #16
1000333e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003342:	e037      	b.n	100033b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003344:	1d3b      	adds	r3, r7, #4
10003346:	681b      	ldr	r3, [r3, #0]
10003348:	3344      	adds	r3, #68	; 0x44
1000334a:	4618      	mov	r0, r3
1000334c:	f7ff fa2a 	bl	100027a4 <RCCEx_PLL3_Config>
10003350:	4603      	mov	r3, r0
10003352:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003356:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000335a:	2b00      	cmp	r3, #0
1000335c:	d003      	beq.n	10003366 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        {
          return status;
1000335e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003362:	f001 b93c 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003366:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000336a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000336e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003372:	f043 0320 	orr.w	r3, r3, #32
10003376:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000337a:	e01b      	b.n	100033b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000337c:	1d3b      	adds	r3, r7, #4
1000337e:	681b      	ldr	r3, [r3, #0]
10003380:	3344      	adds	r3, #68	; 0x44
10003382:	4618      	mov	r0, r3
10003384:	f7ff fa0e 	bl	100027a4 <RCCEx_PLL3_Config>
10003388:	4603      	mov	r3, r0
1000338a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000338e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003392:	2b00      	cmp	r3, #0
10003394:	d003      	beq.n	1000339e <HAL_RCCEx_PeriphCLKConfig+0x676>
        {
          return status;
10003396:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000339a:	f001 b920 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000339e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033a2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100033a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100033aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100033ae:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100033b2:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
100033b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033b8:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
100033bc:	f023 0207 	bic.w	r2, r3, #7
100033c0:	1d3b      	adds	r3, r7, #4
100033c2:	681b      	ldr	r3, [r3, #0]
100033c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
100033c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100033cc:	4313      	orrs	r3, r2
100033ce:	f8c1 38d8 	str.w	r3, [r1, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
100033d2:	1d3b      	adds	r3, r7, #4
100033d4:	681b      	ldr	r3, [r3, #0]
100033d6:	e9d3 bc00 	ldrd	fp, ip, [r3]
100033da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
100033de:	f04f 0200 	mov.w	r2, #0
100033e2:	ea0b 0301 	and.w	r3, fp, r1
100033e6:	ea0c 0402 	and.w	r4, ip, r2
100033ea:	4323      	orrs	r3, r4
100033ec:	d06d      	beq.n	100034ca <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
100033ee:	1d3b      	adds	r3, r7, #4
100033f0:	681b      	ldr	r3, [r3, #0]
100033f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
100033f6:	2b01      	cmp	r3, #1
100033f8:	d020      	beq.n	1000343c <HAL_RCCEx_PeriphCLKConfig+0x714>
100033fa:	2b01      	cmp	r3, #1
100033fc:	d302      	bcc.n	10003404 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
100033fe:	2b04      	cmp	r3, #4
10003400:	d038      	beq.n	10003474 <HAL_RCCEx_PeriphCLKConfig+0x74c>
10003402:	e053      	b.n	100034ac <HAL_RCCEx_PeriphCLKConfig+0x784>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003404:	1d3b      	adds	r3, r7, #4
10003406:	681b      	ldr	r3, [r3, #0]
10003408:	3380      	adds	r3, #128	; 0x80
1000340a:	4618      	mov	r0, r3
1000340c:	f7ff fb34 	bl	10002a78 <RCCEx_PLL4_Config>
10003410:	4603      	mov	r3, r0
10003412:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003416:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000341a:	2b00      	cmp	r3, #0
1000341c:	d003      	beq.n	10003426 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
        {
          return status;
1000341e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003422:	f001 b8dc 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003426:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000342a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000342e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003432:	f043 0310 	orr.w	r3, r3, #16
10003436:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000343a:	e037      	b.n	100034ac <HAL_RCCEx_PeriphCLKConfig+0x784>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000343c:	1d3b      	adds	r3, r7, #4
1000343e:	681b      	ldr	r3, [r3, #0]
10003440:	3344      	adds	r3, #68	; 0x44
10003442:	4618      	mov	r0, r3
10003444:	f7ff f9ae 	bl	100027a4 <RCCEx_PLL3_Config>
10003448:	4603      	mov	r3, r0
1000344a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000344e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003452:	2b00      	cmp	r3, #0
10003454:	d003      	beq.n	1000345e <HAL_RCCEx_PeriphCLKConfig+0x736>
        {
          return status;
10003456:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000345a:	f001 b8c0 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000345e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003462:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003466:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000346a:	f043 0320 	orr.w	r3, r3, #32
1000346e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003472:	e01b      	b.n	100034ac <HAL_RCCEx_PeriphCLKConfig+0x784>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003474:	1d3b      	adds	r3, r7, #4
10003476:	681b      	ldr	r3, [r3, #0]
10003478:	3344      	adds	r3, #68	; 0x44
1000347a:	4618      	mov	r0, r3
1000347c:	f7ff f992 	bl	100027a4 <RCCEx_PLL3_Config>
10003480:	4603      	mov	r3, r0
10003482:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003486:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000348a:	2b00      	cmp	r3, #0
1000348c:	d003      	beq.n	10003496 <HAL_RCCEx_PeriphCLKConfig+0x76e>
        {
          return status;
1000348e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003492:	f001 b8a4 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003496:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000349a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000349e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100034a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100034a6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100034aa:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
100034ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034b0:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
100034b4:	f023 0207 	bic.w	r2, r3, #7
100034b8:	1d3b      	adds	r3, r7, #4
100034ba:	681b      	ldr	r3, [r3, #0]
100034bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
100034c0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100034c4:	4313      	orrs	r3, r2
100034c6:	f8c1 38dc 	str.w	r3, [r1, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
100034ca:	1d3b      	adds	r3, r7, #4
100034cc:	681b      	ldr	r3, [r3, #0]
100034ce:	e9d3 bc00 	ldrd	fp, ip, [r3]
100034d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
100034d6:	f04f 0200 	mov.w	r2, #0
100034da:	ea0b 0301 	and.w	r3, fp, r1
100034de:	ea0c 0402 	and.w	r4, ip, r2
100034e2:	4323      	orrs	r3, r4
100034e4:	d02f      	beq.n	10003546 <HAL_RCCEx_PeriphCLKConfig+0x81e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
100034e6:	1d3b      	adds	r3, r7, #4
100034e8:	681b      	ldr	r3, [r3, #0]
100034ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
100034ee:	2b01      	cmp	r3, #1
100034f0:	d11a      	bne.n	10003528 <HAL_RCCEx_PeriphCLKConfig+0x800>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100034f2:	1d3b      	adds	r3, r7, #4
100034f4:	681b      	ldr	r3, [r3, #0]
100034f6:	3380      	adds	r3, #128	; 0x80
100034f8:	4618      	mov	r0, r3
100034fa:	f7ff fabd 	bl	10002a78 <RCCEx_PLL4_Config>
100034fe:	4603      	mov	r3, r0
10003500:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10003504:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003508:	2b00      	cmp	r3, #0
1000350a:	d003      	beq.n	10003514 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      {
        return status;
1000350c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003510:	f001 b865 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003514:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003518:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000351c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003520:	f043 0320 	orr.w	r3, r3, #32
10003524:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10003528:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000352c:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10003530:	f023 0207 	bic.w	r2, r3, #7
10003534:	1d3b      	adds	r3, r7, #4
10003536:	681b      	ldr	r3, [r3, #0]
10003538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
1000353c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003540:	4313      	orrs	r3, r2
10003542:	f8c1 38e0 	str.w	r3, [r1, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10003546:	1d3b      	adds	r3, r7, #4
10003548:	681b      	ldr	r3, [r3, #0]
1000354a:	e9d3 bc00 	ldrd	fp, ip, [r3]
1000354e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
10003552:	f04f 0200 	mov.w	r2, #0
10003556:	ea0b 0301 	and.w	r3, fp, r1
1000355a:	ea0c 0402 	and.w	r4, ip, r2
1000355e:	4323      	orrs	r3, r4
10003560:	d04f      	beq.n	10003602 <HAL_RCCEx_PeriphCLKConfig+0x8da>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10003562:	1d3b      	adds	r3, r7, #4
10003564:	681b      	ldr	r3, [r3, #0]
10003566:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
1000356a:	2b01      	cmp	r3, #1
1000356c:	d002      	beq.n	10003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>
1000356e:	2b05      	cmp	r3, #5
10003570:	d01c      	beq.n	100035ac <HAL_RCCEx_PeriphCLKConfig+0x884>
10003572:	e037      	b.n	100035e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003574:	1d3b      	adds	r3, r7, #4
10003576:	681b      	ldr	r3, [r3, #0]
10003578:	3380      	adds	r3, #128	; 0x80
1000357a:	4618      	mov	r0, r3
1000357c:	f7ff fa7c 	bl	10002a78 <RCCEx_PLL4_Config>
10003580:	4603      	mov	r3, r0
10003582:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003586:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000358a:	2b00      	cmp	r3, #0
1000358c:	d003      	beq.n	10003596 <HAL_RCCEx_PeriphCLKConfig+0x86e>
        {
          return status;
1000358e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003592:	f001 b824 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003596:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000359a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000359e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100035a2:	f043 0320 	orr.w	r3, r3, #32
100035a6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100035aa:	e01b      	b.n	100035e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100035ac:	1d3b      	adds	r3, r7, #4
100035ae:	681b      	ldr	r3, [r3, #0]
100035b0:	3344      	adds	r3, #68	; 0x44
100035b2:	4618      	mov	r0, r3
100035b4:	f7ff f8f6 	bl	100027a4 <RCCEx_PLL3_Config>
100035b8:	4603      	mov	r3, r0
100035ba:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100035be:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100035c2:	2b00      	cmp	r3, #0
100035c4:	d003      	beq.n	100035ce <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        {
          return status;
100035c6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100035ca:	f001 b808 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100035ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035d2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100035d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100035da:	f043 0320 	orr.w	r3, r3, #32
100035de:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100035e2:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
100035e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
100035ec:	f023 0207 	bic.w	r2, r3, #7
100035f0:	1d3b      	adds	r3, r7, #4
100035f2:	681b      	ldr	r3, [r3, #0]
100035f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
100035f8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100035fc:	4313      	orrs	r3, r2
100035fe:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10003602:	1d3b      	adds	r3, r7, #4
10003604:	681b      	ldr	r3, [r3, #0]
10003606:	e9d3 bc00 	ldrd	fp, ip, [r3]
1000360a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1000360e:	f04f 0200 	mov.w	r2, #0
10003612:	ea0b 0301 	and.w	r3, fp, r1
10003616:	ea0c 0402 	and.w	r4, ip, r2
1000361a:	4323      	orrs	r3, r4
1000361c:	d02f      	beq.n	1000367e <HAL_RCCEx_PeriphCLKConfig+0x956>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
1000361e:	1d3b      	adds	r3, r7, #4
10003620:	681b      	ldr	r3, [r3, #0]
10003622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10003626:	2b01      	cmp	r3, #1
10003628:	d11a      	bne.n	10003660 <HAL_RCCEx_PeriphCLKConfig+0x938>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000362a:	1d3b      	adds	r3, r7, #4
1000362c:	681b      	ldr	r3, [r3, #0]
1000362e:	3380      	adds	r3, #128	; 0x80
10003630:	4618      	mov	r0, r3
10003632:	f7ff fa21 	bl	10002a78 <RCCEx_PLL4_Config>
10003636:	4603      	mov	r3, r0
10003638:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
1000363c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003640:	2b00      	cmp	r3, #0
10003642:	d003      	beq.n	1000364c <HAL_RCCEx_PeriphCLKConfig+0x924>
      {
        return status;
10003644:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003648:	f000 bfc9 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000364c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003650:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003654:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003658:	f043 0320 	orr.w	r3, r3, #32
1000365c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10003660:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003664:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10003668:	f023 0207 	bic.w	r2, r3, #7
1000366c:	1d3b      	adds	r3, r7, #4
1000366e:	681b      	ldr	r3, [r3, #0]
10003670:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10003674:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003678:	4313      	orrs	r3, r2
1000367a:	f8c1 38e4 	str.w	r3, [r1, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
1000367e:	1d3b      	adds	r3, r7, #4
10003680:	681b      	ldr	r3, [r3, #0]
10003682:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003686:	f04f 0102 	mov.w	r1, #2
1000368a:	f04f 0200 	mov.w	r2, #0
1000368e:	ea0b 0301 	and.w	r3, fp, r1
10003692:	ea0c 0402 	and.w	r4, ip, r2
10003696:	4323      	orrs	r3, r4
10003698:	d02f      	beq.n	100036fa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
1000369a:	1d3b      	adds	r3, r7, #4
1000369c:	681b      	ldr	r3, [r3, #0]
1000369e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
100036a2:	2b01      	cmp	r3, #1
100036a4:	d11a      	bne.n	100036dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100036a6:	1d3b      	adds	r3, r7, #4
100036a8:	681b      	ldr	r3, [r3, #0]
100036aa:	3380      	adds	r3, #128	; 0x80
100036ac:	4618      	mov	r0, r3
100036ae:	f7ff f9e3 	bl	10002a78 <RCCEx_PLL4_Config>
100036b2:	4603      	mov	r3, r0
100036b4:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
100036b8:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100036bc:	2b00      	cmp	r3, #0
100036be:	d003      	beq.n	100036c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      {
        return status;
100036c0:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100036c4:	f000 bf8b 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100036c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036cc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100036d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100036d4:	f043 0320 	orr.w	r3, r3, #32
100036d8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
100036dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036e0:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
100036e4:	f023 0207 	bic.w	r2, r3, #7
100036e8:	1d3b      	adds	r3, r7, #4
100036ea:	681b      	ldr	r3, [r3, #0]
100036ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
100036f0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100036f4:	4313      	orrs	r3, r2
100036f6:	f8c1 38e8 	str.w	r3, [r1, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
100036fa:	1d3b      	adds	r3, r7, #4
100036fc:	681b      	ldr	r3, [r3, #0]
100036fe:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003702:	f04f 0104 	mov.w	r1, #4
10003706:	f04f 0200 	mov.w	r2, #0
1000370a:	ea0b 0301 	and.w	r3, fp, r1
1000370e:	ea0c 0402 	and.w	r4, ip, r2
10003712:	4323      	orrs	r3, r4
10003714:	d02f      	beq.n	10003776 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
10003716:	1d3b      	adds	r3, r7, #4
10003718:	681b      	ldr	r3, [r3, #0]
1000371a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
1000371e:	2b01      	cmp	r3, #1
10003720:	d11a      	bne.n	10003758 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003722:	1d3b      	adds	r3, r7, #4
10003724:	681b      	ldr	r3, [r3, #0]
10003726:	3380      	adds	r3, #128	; 0x80
10003728:	4618      	mov	r0, r3
1000372a:	f7ff f9a5 	bl	10002a78 <RCCEx_PLL4_Config>
1000372e:	4603      	mov	r3, r0
10003730:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10003734:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003738:	2b00      	cmp	r3, #0
1000373a:	d003      	beq.n	10003744 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      {
        return status;
1000373c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003740:	f000 bf4d 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003744:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003748:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000374c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003750:	f043 0320 	orr.w	r3, r3, #32
10003754:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10003758:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000375c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10003760:	f023 0207 	bic.w	r2, r3, #7
10003764:	1d3b      	adds	r3, r7, #4
10003766:	681b      	ldr	r3, [r3, #0]
10003768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
1000376c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003770:	4313      	orrs	r3, r2
10003772:	f8c1 38ec 	str.w	r3, [r1, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10003776:	1d3b      	adds	r3, r7, #4
10003778:	681b      	ldr	r3, [r3, #0]
1000377a:	e9d3 bc00 	ldrd	fp, ip, [r3]
1000377e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
10003782:	f04f 0200 	mov.w	r2, #0
10003786:	ea0b 0301 	and.w	r3, fp, r1
1000378a:	ea0c 0402 	and.w	r4, ip, r2
1000378e:	4323      	orrs	r3, r4
10003790:	d02f      	beq.n	100037f2 <HAL_RCCEx_PeriphCLKConfig+0xaca>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10003792:	1d3b      	adds	r3, r7, #4
10003794:	681b      	ldr	r3, [r3, #0]
10003796:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
1000379a:	2b01      	cmp	r3, #1
1000379c:	d11a      	bne.n	100037d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000379e:	1d3b      	adds	r3, r7, #4
100037a0:	681b      	ldr	r3, [r3, #0]
100037a2:	3380      	adds	r3, #128	; 0x80
100037a4:	4618      	mov	r0, r3
100037a6:	f7ff f967 	bl	10002a78 <RCCEx_PLL4_Config>
100037aa:	4603      	mov	r3, r0
100037ac:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
100037b0:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100037b4:	2b00      	cmp	r3, #0
100037b6:	d003      	beq.n	100037c0 <HAL_RCCEx_PeriphCLKConfig+0xa98>
      {
        return status;
100037b8:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100037bc:	f000 bf0f 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100037c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037c4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100037c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100037cc:	f043 0320 	orr.w	r3, r3, #32
100037d0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
100037d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037d8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100037dc:	f023 0207 	bic.w	r2, r3, #7
100037e0:	1d3b      	adds	r3, r7, #4
100037e2:	681b      	ldr	r3, [r3, #0]
100037e4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
100037e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100037ec:	4313      	orrs	r3, r2
100037ee:	f8c1 38f0 	str.w	r3, [r1, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
100037f2:	1d3b      	adds	r3, r7, #4
100037f4:	681b      	ldr	r3, [r3, #0]
100037f6:	e9d3 bc00 	ldrd	fp, ip, [r3]
100037fa:	f04f 0101 	mov.w	r1, #1
100037fe:	f04f 0200 	mov.w	r2, #0
10003802:	ea0b 0301 	and.w	r3, fp, r1
10003806:	ea0c 0402 	and.w	r4, ip, r2
1000380a:	4323      	orrs	r3, r4
1000380c:	d04f      	beq.n	100038ae <HAL_RCCEx_PeriphCLKConfig+0xb86>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
1000380e:	1d3b      	adds	r3, r7, #4
10003810:	681b      	ldr	r3, [r3, #0]
10003812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10003816:	2b01      	cmp	r3, #1
10003818:	d002      	beq.n	10003820 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
1000381a:	2b04      	cmp	r3, #4
1000381c:	d01c      	beq.n	10003858 <HAL_RCCEx_PeriphCLKConfig+0xb30>
1000381e:	e037      	b.n	10003890 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003820:	1d3b      	adds	r3, r7, #4
10003822:	681b      	ldr	r3, [r3, #0]
10003824:	3344      	adds	r3, #68	; 0x44
10003826:	4618      	mov	r0, r3
10003828:	f7fe ffbc 	bl	100027a4 <RCCEx_PLL3_Config>
1000382c:	4603      	mov	r3, r0
1000382e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003832:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003836:	2b00      	cmp	r3, #0
10003838:	d003      	beq.n	10003842 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          return status;
1000383a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000383e:	f000 bece 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003842:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003846:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000384a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000384e:	f043 0320 	orr.w	r3, r3, #32
10003852:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003856:	e01b      	b.n	10003890 <HAL_RCCEx_PeriphCLKConfig+0xb68>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003858:	1d3b      	adds	r3, r7, #4
1000385a:	681b      	ldr	r3, [r3, #0]
1000385c:	3380      	adds	r3, #128	; 0x80
1000385e:	4618      	mov	r0, r3
10003860:	f7ff f90a 	bl	10002a78 <RCCEx_PLL4_Config>
10003864:	4603      	mov	r3, r0
10003866:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000386a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000386e:	2b00      	cmp	r3, #0
10003870:	d003      	beq.n	1000387a <HAL_RCCEx_PeriphCLKConfig+0xb52>
        {
          return status;
10003872:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003876:	f000 beb2 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000387a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000387e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003882:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003886:	f043 0320 	orr.w	r3, r3, #32
1000388a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000388e:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
10003890:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003894:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10003898:	f023 0207 	bic.w	r2, r3, #7
1000389c:	1d3b      	adds	r3, r7, #4
1000389e:	681b      	ldr	r3, [r3, #0]
100038a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
100038a4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100038a8:	4313      	orrs	r3, r2
100038aa:	f8c1 30c8 	str.w	r3, [r1, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
100038ae:	1d3b      	adds	r3, r7, #4
100038b0:	681b      	ldr	r3, [r3, #0]
100038b2:	e9d3 bc00 	ldrd	fp, ip, [r3]
100038b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
100038ba:	f04f 0200 	mov.w	r2, #0
100038be:	ea0b 0301 	and.w	r3, fp, r1
100038c2:	ea0c 0402 	and.w	r4, ip, r2
100038c6:	4323      	orrs	r3, r4
100038c8:	d04f      	beq.n	1000396a <HAL_RCCEx_PeriphCLKConfig+0xc42>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
100038ca:	1d3b      	adds	r3, r7, #4
100038cc:	681b      	ldr	r3, [r3, #0]
100038ce:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
100038d2:	2b01      	cmp	r3, #1
100038d4:	d002      	beq.n	100038dc <HAL_RCCEx_PeriphCLKConfig+0xbb4>
100038d6:	2b02      	cmp	r3, #2
100038d8:	d01c      	beq.n	10003914 <HAL_RCCEx_PeriphCLKConfig+0xbec>
100038da:	e037      	b.n	1000394c <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100038dc:	1d3b      	adds	r3, r7, #4
100038de:	681b      	ldr	r3, [r3, #0]
100038e0:	3344      	adds	r3, #68	; 0x44
100038e2:	4618      	mov	r0, r3
100038e4:	f7fe ff5e 	bl	100027a4 <RCCEx_PLL3_Config>
100038e8:	4603      	mov	r3, r0
100038ea:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100038ee:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100038f2:	2b00      	cmp	r3, #0
100038f4:	d003      	beq.n	100038fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        {
          return status;
100038f6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100038fa:	f000 be70 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100038fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003902:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003906:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000390a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000390e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003912:	e01b      	b.n	1000394c <HAL_RCCEx_PeriphCLKConfig+0xc24>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003914:	1d3b      	adds	r3, r7, #4
10003916:	681b      	ldr	r3, [r3, #0]
10003918:	3380      	adds	r3, #128	; 0x80
1000391a:	4618      	mov	r0, r3
1000391c:	f7ff f8ac 	bl	10002a78 <RCCEx_PLL4_Config>
10003920:	4603      	mov	r3, r0
10003922:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003926:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000392a:	2b00      	cmp	r3, #0
1000392c:	d003      	beq.n	10003936 <HAL_RCCEx_PeriphCLKConfig+0xc0e>
        {
          return status;
1000392e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003932:	f000 be54 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003936:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000393a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000393e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003942:	f043 0310 	orr.w	r3, r3, #16
10003946:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000394a:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
1000394c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003950:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10003954:	f023 0203 	bic.w	r2, r3, #3
10003958:	1d3b      	adds	r3, r7, #4
1000395a:	681b      	ldr	r3, [r3, #0]
1000395c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10003960:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003964:	4313      	orrs	r3, r2
10003966:	f8c1 38f4 	str.w	r3, [r1, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
1000396a:	1d3b      	adds	r3, r7, #4
1000396c:	681b      	ldr	r3, [r3, #0]
1000396e:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003972:	f04f 0100 	mov.w	r1, #0
10003976:	f04f 0201 	mov.w	r2, #1
1000397a:	ea0b 0301 	and.w	r3, fp, r1
1000397e:	ea0c 0402 	and.w	r4, ip, r2
10003982:	4323      	orrs	r3, r4
10003984:	d04f      	beq.n	10003a26 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10003986:	1d3b      	adds	r3, r7, #4
10003988:	681b      	ldr	r3, [r3, #0]
1000398a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
1000398e:	2b01      	cmp	r3, #1
10003990:	d002      	beq.n	10003998 <HAL_RCCEx_PeriphCLKConfig+0xc70>
10003992:	2b02      	cmp	r3, #2
10003994:	d01c      	beq.n	100039d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
10003996:	e037      	b.n	10003a08 <HAL_RCCEx_PeriphCLKConfig+0xce0>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003998:	1d3b      	adds	r3, r7, #4
1000399a:	681b      	ldr	r3, [r3, #0]
1000399c:	3344      	adds	r3, #68	; 0x44
1000399e:	4618      	mov	r0, r3
100039a0:	f7fe ff00 	bl	100027a4 <RCCEx_PLL3_Config>
100039a4:	4603      	mov	r3, r0
100039a6:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100039aa:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100039ae:	2b00      	cmp	r3, #0
100039b0:	d003      	beq.n	100039ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
        {
          return status;
100039b2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100039b6:	f000 be12 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100039ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039be:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100039c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100039ca:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100039ce:	e01b      	b.n	10003a08 <HAL_RCCEx_PeriphCLKConfig+0xce0>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100039d0:	1d3b      	adds	r3, r7, #4
100039d2:	681b      	ldr	r3, [r3, #0]
100039d4:	3380      	adds	r3, #128	; 0x80
100039d6:	4618      	mov	r0, r3
100039d8:	f7ff f84e 	bl	10002a78 <RCCEx_PLL4_Config>
100039dc:	4603      	mov	r3, r0
100039de:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100039e2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100039e6:	2b00      	cmp	r3, #0
100039e8:	d003      	beq.n	100039f2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
        {
          return status;
100039ea:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100039ee:	f000 bdf6 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100039f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039f6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100039fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039fe:	f043 0310 	orr.w	r3, r3, #16
10003a02:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003a06:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10003a08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a0c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10003a10:	f023 0203 	bic.w	r2, r3, #3
10003a14:	1d3b      	adds	r3, r7, #4
10003a16:	681b      	ldr	r3, [r3, #0]
10003a18:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10003a1c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003a20:	4313      	orrs	r3, r2
10003a22:	f8c1 38f8 	str.w	r3, [r1, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10003a26:	1d3b      	adds	r3, r7, #4
10003a28:	681b      	ldr	r3, [r3, #0]
10003a2a:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003a2e:	f04f 0100 	mov.w	r1, #0
10003a32:	f04f 0202 	mov.w	r2, #2
10003a36:	ea0b 0301 	and.w	r3, fp, r1
10003a3a:	ea0c 0402 	and.w	r4, ip, r2
10003a3e:	4323      	orrs	r3, r4
10003a40:	d04f      	beq.n	10003ae2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10003a42:	1d3b      	adds	r3, r7, #4
10003a44:	681b      	ldr	r3, [r3, #0]
10003a46:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10003a4a:	2b00      	cmp	r3, #0
10003a4c:	d002      	beq.n	10003a54 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
10003a4e:	2b01      	cmp	r3, #1
10003a50:	d01c      	beq.n	10003a8c <HAL_RCCEx_PeriphCLKConfig+0xd64>
10003a52:	e037      	b.n	10003ac4 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003a54:	1d3b      	adds	r3, r7, #4
10003a56:	681b      	ldr	r3, [r3, #0]
10003a58:	3380      	adds	r3, #128	; 0x80
10003a5a:	4618      	mov	r0, r3
10003a5c:	f7ff f80c 	bl	10002a78 <RCCEx_PLL4_Config>
10003a60:	4603      	mov	r3, r0
10003a62:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003a66:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003a6a:	2b00      	cmp	r3, #0
10003a6c:	d003      	beq.n	10003a76 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
        {
          return status;
10003a6e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003a72:	f000 bdb4 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003a76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a7a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a82:	f043 0310 	orr.w	r3, r3, #16
10003a86:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003a8a:	e01b      	b.n	10003ac4 <HAL_RCCEx_PeriphCLKConfig+0xd9c>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003a8c:	1d3b      	adds	r3, r7, #4
10003a8e:	681b      	ldr	r3, [r3, #0]
10003a90:	3344      	adds	r3, #68	; 0x44
10003a92:	4618      	mov	r0, r3
10003a94:	f7fe fe86 	bl	100027a4 <RCCEx_PLL3_Config>
10003a98:	4603      	mov	r3, r0
10003a9a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003a9e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003aa2:	2b00      	cmp	r3, #0
10003aa4:	d003      	beq.n	10003aae <HAL_RCCEx_PeriphCLKConfig+0xd86>
        {
          return status;
10003aa6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003aaa:	f000 bd98 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003aae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ab2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003ab6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003aba:	f043 0320 	orr.w	r3, r3, #32
10003abe:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003ac2:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10003ac4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ac8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10003acc:	f023 0203 	bic.w	r2, r3, #3
10003ad0:	1d3b      	adds	r3, r7, #4
10003ad2:	681b      	ldr	r3, [r3, #0]
10003ad4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10003ad8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003adc:	4313      	orrs	r3, r2
10003ade:	f8c1 38fc 	str.w	r3, [r1, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10003ae2:	1d3b      	adds	r3, r7, #4
10003ae4:	681b      	ldr	r3, [r3, #0]
10003ae6:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
10003aee:	f04f 0200 	mov.w	r2, #0
10003af2:	ea0b 0301 	and.w	r3, fp, r1
10003af6:	ea0c 0402 	and.w	r4, ip, r2
10003afa:	4323      	orrs	r3, r4
10003afc:	d04f      	beq.n	10003b9e <HAL_RCCEx_PeriphCLKConfig+0xe76>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10003afe:	1d3b      	adds	r3, r7, #4
10003b00:	681b      	ldr	r3, [r3, #0]
10003b02:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10003b06:	2b01      	cmp	r3, #1
10003b08:	d002      	beq.n	10003b10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
10003b0a:	2b02      	cmp	r3, #2
10003b0c:	d01c      	beq.n	10003b48 <HAL_RCCEx_PeriphCLKConfig+0xe20>
10003b0e:	e037      	b.n	10003b80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003b10:	1d3b      	adds	r3, r7, #4
10003b12:	681b      	ldr	r3, [r3, #0]
10003b14:	3344      	adds	r3, #68	; 0x44
10003b16:	4618      	mov	r0, r3
10003b18:	f7fe fe44 	bl	100027a4 <RCCEx_PLL3_Config>
10003b1c:	4603      	mov	r3, r0
10003b1e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003b22:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003b26:	2b00      	cmp	r3, #0
10003b28:	d003      	beq.n	10003b32 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
        {
          return status;
10003b2a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003b2e:	f000 bd56 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b36:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003b3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003b42:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003b46:	e01b      	b.n	10003b80 <HAL_RCCEx_PeriphCLKConfig+0xe58>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003b48:	1d3b      	adds	r3, r7, #4
10003b4a:	681b      	ldr	r3, [r3, #0]
10003b4c:	3380      	adds	r3, #128	; 0x80
10003b4e:	4618      	mov	r0, r3
10003b50:	f7fe ff92 	bl	10002a78 <RCCEx_PLL4_Config>
10003b54:	4603      	mov	r3, r0
10003b56:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003b5a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003b5e:	2b00      	cmp	r3, #0
10003b60:	d003      	beq.n	10003b6a <HAL_RCCEx_PeriphCLKConfig+0xe42>
        {
          return status;
10003b62:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003b66:	f000 bd3a 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003b6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b6e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003b72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b76:	f043 0310 	orr.w	r3, r3, #16
10003b7a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003b7e:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10003b80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b84:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
10003b88:	f023 0203 	bic.w	r2, r3, #3
10003b8c:	1d3b      	adds	r3, r7, #4
10003b8e:	681b      	ldr	r3, [r3, #0]
10003b90:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10003b94:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003b98:	4313      	orrs	r3, r2
10003b9a:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10003b9e:	1d3b      	adds	r3, r7, #4
10003ba0:	681b      	ldr	r3, [r3, #0]
10003ba2:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003ba6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
10003baa:	f04f 0200 	mov.w	r2, #0
10003bae:	ea0b 0301 	and.w	r3, fp, r1
10003bb2:	ea0c 0402 	and.w	r4, ip, r2
10003bb6:	4323      	orrs	r3, r4
10003bb8:	d04f      	beq.n	10003c5a <HAL_RCCEx_PeriphCLKConfig+0xf32>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10003bba:	1d3b      	adds	r3, r7, #4
10003bbc:	681b      	ldr	r3, [r3, #0]
10003bbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10003bc2:	2b01      	cmp	r3, #1
10003bc4:	d002      	beq.n	10003bcc <HAL_RCCEx_PeriphCLKConfig+0xea4>
10003bc6:	2b02      	cmp	r3, #2
10003bc8:	d01c      	beq.n	10003c04 <HAL_RCCEx_PeriphCLKConfig+0xedc>
10003bca:	e037      	b.n	10003c3c <HAL_RCCEx_PeriphCLKConfig+0xf14>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003bcc:	1d3b      	adds	r3, r7, #4
10003bce:	681b      	ldr	r3, [r3, #0]
10003bd0:	3344      	adds	r3, #68	; 0x44
10003bd2:	4618      	mov	r0, r3
10003bd4:	f7fe fde6 	bl	100027a4 <RCCEx_PLL3_Config>
10003bd8:	4603      	mov	r3, r0
10003bda:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003bde:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003be2:	2b00      	cmp	r3, #0
10003be4:	d003      	beq.n	10003bee <HAL_RCCEx_PeriphCLKConfig+0xec6>
        {
          return status;
10003be6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003bea:	f000 bcf8 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003bee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bf2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003bf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003bfe:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003c02:	e01b      	b.n	10003c3c <HAL_RCCEx_PeriphCLKConfig+0xf14>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003c04:	1d3b      	adds	r3, r7, #4
10003c06:	681b      	ldr	r3, [r3, #0]
10003c08:	3380      	adds	r3, #128	; 0x80
10003c0a:	4618      	mov	r0, r3
10003c0c:	f7fe ff34 	bl	10002a78 <RCCEx_PLL4_Config>
10003c10:	4603      	mov	r3, r0
10003c12:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003c16:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003c1a:	2b00      	cmp	r3, #0
10003c1c:	d003      	beq.n	10003c26 <HAL_RCCEx_PeriphCLKConfig+0xefe>
        {
          return status;
10003c1e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003c22:	f000 bcdc 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003c26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c2a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003c2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c32:	f043 0310 	orr.w	r3, r3, #16
10003c36:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003c3a:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10003c3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c40:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10003c44:	f023 0203 	bic.w	r2, r3, #3
10003c48:	1d3b      	adds	r3, r7, #4
10003c4a:	681b      	ldr	r3, [r3, #0]
10003c4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10003c50:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003c54:	4313      	orrs	r3, r2
10003c56:	f8c1 3904 	str.w	r3, [r1, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10003c5a:	1d3b      	adds	r3, r7, #4
10003c5c:	681b      	ldr	r3, [r3, #0]
10003c5e:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003c62:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
10003c66:	f04f 0200 	mov.w	r2, #0
10003c6a:	ea0b 0301 	and.w	r3, fp, r1
10003c6e:	ea0c 0402 	and.w	r4, ip, r2
10003c72:	4323      	orrs	r3, r4
10003c74:	d06c      	beq.n	10003d50 <HAL_RCCEx_PeriphCLKConfig+0x1028>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10003c76:	1d3b      	adds	r3, r7, #4
10003c78:	681b      	ldr	r3, [r3, #0]
10003c7a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10003c7e:	2b02      	cmp	r3, #2
10003c80:	d01f      	beq.n	10003cc2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
10003c82:	2b03      	cmp	r3, #3
10003c84:	d039      	beq.n	10003cfa <HAL_RCCEx_PeriphCLKConfig+0xfd2>
10003c86:	2b01      	cmp	r3, #1
10003c88:	d153      	bne.n	10003d32 <HAL_RCCEx_PeriphCLKConfig+0x100a>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003c8a:	1d3b      	adds	r3, r7, #4
10003c8c:	681b      	ldr	r3, [r3, #0]
10003c8e:	3344      	adds	r3, #68	; 0x44
10003c90:	4618      	mov	r0, r3
10003c92:	f7fe fd87 	bl	100027a4 <RCCEx_PLL3_Config>
10003c96:	4603      	mov	r3, r0
10003c98:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003c9c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003ca0:	2b00      	cmp	r3, #0
10003ca2:	d003      	beq.n	10003cac <HAL_RCCEx_PeriphCLKConfig+0xf84>
        {
          return status;
10003ca4:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003ca8:	f000 bc99 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003cac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cb0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003cb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003cb8:	f043 0320 	orr.w	r3, r3, #32
10003cbc:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003cc0:	e037      	b.n	10003d32 <HAL_RCCEx_PeriphCLKConfig+0x100a>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003cc2:	1d3b      	adds	r3, r7, #4
10003cc4:	681b      	ldr	r3, [r3, #0]
10003cc6:	3380      	adds	r3, #128	; 0x80
10003cc8:	4618      	mov	r0, r3
10003cca:	f7fe fed5 	bl	10002a78 <RCCEx_PLL4_Config>
10003cce:	4603      	mov	r3, r0
10003cd0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003cd4:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003cd8:	2b00      	cmp	r3, #0
10003cda:	d003      	beq.n	10003ce4 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
        {
          return status;
10003cdc:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003ce0:	f000 bc7d 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003ce4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ce8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003cec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003cf0:	f043 0320 	orr.w	r3, r3, #32
10003cf4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003cf8:	e01b      	b.n	10003d32 <HAL_RCCEx_PeriphCLKConfig+0x100a>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003cfa:	1d3b      	adds	r3, r7, #4
10003cfc:	681b      	ldr	r3, [r3, #0]
10003cfe:	3380      	adds	r3, #128	; 0x80
10003d00:	4618      	mov	r0, r3
10003d02:	f7fe feb9 	bl	10002a78 <RCCEx_PLL4_Config>
10003d06:	4603      	mov	r3, r0
10003d08:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003d0c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003d10:	2b00      	cmp	r3, #0
10003d12:	d003      	beq.n	10003d1c <HAL_RCCEx_PeriphCLKConfig+0xff4>
        {
          return status;
10003d14:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003d18:	f000 bc61 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003d1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d20:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003d24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003d2c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003d30:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10003d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d36:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10003d3a:	f023 0203 	bic.w	r2, r3, #3
10003d3e:	1d3b      	adds	r3, r7, #4
10003d40:	681b      	ldr	r3, [r3, #0]
10003d42:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10003d46:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003d4a:	4313      	orrs	r3, r2
10003d4c:	f8c1 390c 	str.w	r3, [r1, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10003d50:	1d3b      	adds	r3, r7, #4
10003d52:	681b      	ldr	r3, [r3, #0]
10003d54:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003d58:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
10003d5c:	f04f 0200 	mov.w	r2, #0
10003d60:	ea0b 0301 	and.w	r3, fp, r1
10003d64:	ea0c 0402 	and.w	r4, ip, r2
10003d68:	4323      	orrs	r3, r4
10003d6a:	d04f      	beq.n	10003e0c <HAL_RCCEx_PeriphCLKConfig+0x10e4>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10003d6c:	1d3b      	adds	r3, r7, #4
10003d6e:	681b      	ldr	r3, [r3, #0]
10003d70:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10003d74:	2b00      	cmp	r3, #0
10003d76:	d002      	beq.n	10003d7e <HAL_RCCEx_PeriphCLKConfig+0x1056>
10003d78:	2b01      	cmp	r3, #1
10003d7a:	d01c      	beq.n	10003db6 <HAL_RCCEx_PeriphCLKConfig+0x108e>
10003d7c:	e037      	b.n	10003dee <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003d7e:	1d3b      	adds	r3, r7, #4
10003d80:	681b      	ldr	r3, [r3, #0]
10003d82:	3380      	adds	r3, #128	; 0x80
10003d84:	4618      	mov	r0, r3
10003d86:	f7fe fe77 	bl	10002a78 <RCCEx_PLL4_Config>
10003d8a:	4603      	mov	r3, r0
10003d8c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003d90:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003d94:	2b00      	cmp	r3, #0
10003d96:	d003      	beq.n	10003da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
        {
          return status;
10003d98:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003d9c:	f000 bc1f 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003da4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003da8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003dac:	f043 0310 	orr.w	r3, r3, #16
10003db0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003db4:	e01b      	b.n	10003dee <HAL_RCCEx_PeriphCLKConfig+0x10c6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003db6:	1d3b      	adds	r3, r7, #4
10003db8:	681b      	ldr	r3, [r3, #0]
10003dba:	3344      	adds	r3, #68	; 0x44
10003dbc:	4618      	mov	r0, r3
10003dbe:	f7fe fcf1 	bl	100027a4 <RCCEx_PLL3_Config>
10003dc2:	4603      	mov	r3, r0
10003dc4:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003dc8:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003dcc:	2b00      	cmp	r3, #0
10003dce:	d003      	beq.n	10003dd8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
        {
          return status;
10003dd0:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003dd4:	f000 bc03 	b.w	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003dd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ddc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003de0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003de4:	f043 0320 	orr.w	r3, r3, #32
10003de8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003dec:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10003dee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003df2:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10003df6:	f023 0203 	bic.w	r2, r3, #3
10003dfa:	1d3b      	adds	r3, r7, #4
10003dfc:	681b      	ldr	r3, [r3, #0]
10003dfe:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10003e02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003e06:	4313      	orrs	r3, r2
10003e08:	f8c1 3914 	str.w	r3, [r1, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10003e0c:	1d3b      	adds	r3, r7, #4
10003e0e:	681b      	ldr	r3, [r3, #0]
10003e10:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003e14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
10003e18:	f04f 0200 	mov.w	r2, #0
10003e1c:	ea0b 0301 	and.w	r3, fp, r1
10003e20:	ea0c 0402 	and.w	r4, ip, r2
10003e24:	4323      	orrs	r3, r4
10003e26:	d00e      	beq.n	10003e46 <HAL_RCCEx_PeriphCLKConfig+0x111e>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10003e28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e2c:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10003e30:	f023 0203 	bic.w	r2, r3, #3
10003e34:	1d3b      	adds	r3, r7, #4
10003e36:	681b      	ldr	r3, [r3, #0]
10003e38:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
10003e3c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003e40:	4313      	orrs	r3, r2
10003e42:	f8c1 3918 	str.w	r3, [r1, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10003e46:	1d3b      	adds	r3, r7, #4
10003e48:	681b      	ldr	r3, [r3, #0]
10003e4a:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
10003e52:	f04f 0200 	mov.w	r2, #0
10003e56:	ea0b 0301 	and.w	r3, fp, r1
10003e5a:	ea0c 0402 	and.w	r4, ip, r2
10003e5e:	4323      	orrs	r3, r4
10003e60:	d02e      	beq.n	10003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1198>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10003e62:	1d3b      	adds	r3, r7, #4
10003e64:	681b      	ldr	r3, [r3, #0]
10003e66:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10003e6a:	2b01      	cmp	r3, #1
10003e6c:	d119      	bne.n	10003ea2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003e6e:	1d3b      	adds	r3, r7, #4
10003e70:	681b      	ldr	r3, [r3, #0]
10003e72:	3380      	adds	r3, #128	; 0x80
10003e74:	4618      	mov	r0, r3
10003e76:	f7fe fdff 	bl	10002a78 <RCCEx_PLL4_Config>
10003e7a:	4603      	mov	r3, r0
10003e7c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10003e80:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003e84:	2b00      	cmp	r3, #0
10003e86:	d002      	beq.n	10003e8e <HAL_RCCEx_PeriphCLKConfig+0x1166>
      {
        return status;
10003e88:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003e8c:	e3a7      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003e8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e92:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003e96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003e9e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10003ea2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ea6:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10003eaa:	f023 0203 	bic.w	r2, r3, #3
10003eae:	1d3b      	adds	r3, r7, #4
10003eb0:	681b      	ldr	r3, [r3, #0]
10003eb2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10003eb6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003eba:	4313      	orrs	r3, r2
10003ebc:	f8c1 391c 	str.w	r3, [r1, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10003ec0:	1d3b      	adds	r3, r7, #4
10003ec2:	681b      	ldr	r3, [r3, #0]
10003ec4:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003ec8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
10003ecc:	f04f 0200 	mov.w	r2, #0
10003ed0:	ea0b 0301 	and.w	r3, fp, r1
10003ed4:	ea0c 0402 	and.w	r4, ip, r2
10003ed8:	4323      	orrs	r3, r4
10003eda:	d02e      	beq.n	10003f3a <HAL_RCCEx_PeriphCLKConfig+0x1212>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10003edc:	1d3b      	adds	r3, r7, #4
10003ede:	681b      	ldr	r3, [r3, #0]
10003ee0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10003ee4:	2b00      	cmp	r3, #0
10003ee6:	d119      	bne.n	10003f1c <HAL_RCCEx_PeriphCLKConfig+0x11f4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003ee8:	1d3b      	adds	r3, r7, #4
10003eea:	681b      	ldr	r3, [r3, #0]
10003eec:	3380      	adds	r3, #128	; 0x80
10003eee:	4618      	mov	r0, r3
10003ef0:	f7fe fdc2 	bl	10002a78 <RCCEx_PLL4_Config>
10003ef4:	4603      	mov	r3, r0
10003ef6:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10003efa:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003efe:	2b00      	cmp	r3, #0
10003f00:	d002      	beq.n	10003f08 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      {
        return status;
10003f02:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003f06:	e36a      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003f08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f0c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003f10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003f18:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
10003f1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f20:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10003f24:	f023 0210 	bic.w	r2, r3, #16
10003f28:	1d3b      	adds	r3, r7, #4
10003f2a:	681b      	ldr	r3, [r3, #0]
10003f2c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10003f30:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003f34:	4313      	orrs	r3, r2
10003f36:	f8c1 391c 	str.w	r3, [r1, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10003f3a:	1d3b      	adds	r3, r7, #4
10003f3c:	681b      	ldr	r3, [r3, #0]
10003f3e:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003f42:	f04f 0100 	mov.w	r1, #0
10003f46:	f04f 0204 	mov.w	r2, #4
10003f4a:	ea0b 0301 	and.w	r3, fp, r1
10003f4e:	ea0c 0402 	and.w	r4, ip, r2
10003f52:	4323      	orrs	r3, r4
10003f54:	d02e      	beq.n	10003fb4 <HAL_RCCEx_PeriphCLKConfig+0x128c>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10003f56:	1d3b      	adds	r3, r7, #4
10003f58:	681b      	ldr	r3, [r3, #0]
10003f5a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
10003f5e:	2b01      	cmp	r3, #1
10003f60:	d119      	bne.n	10003f96 <HAL_RCCEx_PeriphCLKConfig+0x126e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003f62:	1d3b      	adds	r3, r7, #4
10003f64:	681b      	ldr	r3, [r3, #0]
10003f66:	3380      	adds	r3, #128	; 0x80
10003f68:	4618      	mov	r0, r3
10003f6a:	f7fe fd85 	bl	10002a78 <RCCEx_PLL4_Config>
10003f6e:	4603      	mov	r3, r0
10003f70:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10003f74:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003f78:	2b00      	cmp	r3, #0
10003f7a:	d002      	beq.n	10003f82 <HAL_RCCEx_PeriphCLKConfig+0x125a>
      {
        return status;
10003f7c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003f80:	e32d      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003f82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f86:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003f8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003f92:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10003f96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f9a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10003f9e:	f023 0203 	bic.w	r2, r3, #3
10003fa2:	1d3b      	adds	r3, r7, #4
10003fa4:	681b      	ldr	r3, [r3, #0]
10003fa6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
10003faa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003fae:	4313      	orrs	r3, r2
10003fb0:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10003fb4:	1d3b      	adds	r3, r7, #4
10003fb6:	681b      	ldr	r3, [r3, #0]
10003fb8:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003fbc:	f04f 0100 	mov.w	r1, #0
10003fc0:	f04f 0208 	mov.w	r2, #8
10003fc4:	ea0b 0301 	and.w	r3, fp, r1
10003fc8:	ea0c 0402 	and.w	r4, ip, r2
10003fcc:	4323      	orrs	r3, r4
10003fce:	d02e      	beq.n	1000402e <HAL_RCCEx_PeriphCLKConfig+0x1306>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10003fd0:	1d3b      	adds	r3, r7, #4
10003fd2:	681b      	ldr	r3, [r3, #0]
10003fd4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10003fd8:	2b01      	cmp	r3, #1
10003fda:	d119      	bne.n	10004010 <HAL_RCCEx_PeriphCLKConfig+0x12e8>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003fdc:	1d3b      	adds	r3, r7, #4
10003fde:	681b      	ldr	r3, [r3, #0]
10003fe0:	3380      	adds	r3, #128	; 0x80
10003fe2:	4618      	mov	r0, r3
10003fe4:	f7fe fd48 	bl	10002a78 <RCCEx_PLL4_Config>
10003fe8:	4603      	mov	r3, r0
10003fea:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10003fee:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003ff2:	2b00      	cmp	r3, #0
10003ff4:	d002      	beq.n	10003ffc <HAL_RCCEx_PeriphCLKConfig+0x12d4>
      {
        return status;
10003ff6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003ffa:	e2f0      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003ffc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004000:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004004:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000400c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
10004010:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004014:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10004018:	f023 0203 	bic.w	r2, r3, #3
1000401c:	1d3b      	adds	r3, r7, #4
1000401e:	681b      	ldr	r3, [r3, #0]
10004020:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10004024:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004028:	4313      	orrs	r3, r2
1000402a:	f8c1 3920 	str.w	r3, [r1, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
1000402e:	1d3b      	adds	r3, r7, #4
10004030:	681b      	ldr	r3, [r3, #0]
10004032:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004036:	f04f 0100 	mov.w	r1, #0
1000403a:	f04f 0210 	mov.w	r2, #16
1000403e:	ea0b 0301 	and.w	r3, fp, r1
10004042:	ea0c 0402 	and.w	r4, ip, r2
10004046:	4323      	orrs	r3, r4
10004048:	d00e      	beq.n	10004068 <HAL_RCCEx_PeriphCLKConfig+0x1340>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
1000404a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000404e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10004052:	f023 0203 	bic.w	r2, r3, #3
10004056:	1d3b      	adds	r3, r7, #4
10004058:	681b      	ldr	r3, [r3, #0]
1000405a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
1000405e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004062:	4313      	orrs	r3, r2
10004064:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
10004068:	1d3b      	adds	r3, r7, #4
1000406a:	681b      	ldr	r3, [r3, #0]
1000406c:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004070:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
10004074:	f04f 0200 	mov.w	r2, #0
10004078:	ea0b 0301 	and.w	r3, fp, r1
1000407c:	ea0c 0402 	and.w	r4, ip, r2
10004080:	4323      	orrs	r3, r4
10004082:	d02e      	beq.n	100040e2 <HAL_RCCEx_PeriphCLKConfig+0x13ba>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
10004084:	1d3b      	adds	r3, r7, #4
10004086:	681b      	ldr	r3, [r3, #0]
10004088:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
1000408c:	2b01      	cmp	r3, #1
1000408e:	d119      	bne.n	100040c4 <HAL_RCCEx_PeriphCLKConfig+0x139c>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004090:	1d3b      	adds	r3, r7, #4
10004092:	681b      	ldr	r3, [r3, #0]
10004094:	3380      	adds	r3, #128	; 0x80
10004096:	4618      	mov	r0, r3
10004098:	f7fe fcee 	bl	10002a78 <RCCEx_PLL4_Config>
1000409c:	4603      	mov	r3, r0
1000409e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
100040a2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100040a6:	2b00      	cmp	r3, #0
100040a8:	d002      	beq.n	100040b0 <HAL_RCCEx_PeriphCLKConfig+0x1388>
      {
        return status;
100040aa:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100040ae:	e296      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100040b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040b4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100040b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040bc:	f043 0310 	orr.w	r3, r3, #16
100040c0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
100040c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040c8:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
100040cc:	f023 0201 	bic.w	r2, r3, #1
100040d0:	1d3b      	adds	r3, r7, #4
100040d2:	681b      	ldr	r3, [r3, #0]
100040d4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
100040d8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100040dc:	4313      	orrs	r3, r2
100040de:	f8c1 3924 	str.w	r3, [r1, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
100040e2:	1d3b      	adds	r3, r7, #4
100040e4:	681b      	ldr	r3, [r3, #0]
100040e6:	e9d3 bc00 	ldrd	fp, ip, [r3]
100040ea:	f04f 0108 	mov.w	r1, #8
100040ee:	f04f 0200 	mov.w	r2, #0
100040f2:	ea0b 0301 	and.w	r3, fp, r1
100040f6:	ea0c 0402 	and.w	r4, ip, r2
100040fa:	4323      	orrs	r3, r4
100040fc:	d04d      	beq.n	1000419a <HAL_RCCEx_PeriphCLKConfig+0x1472>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
100040fe:	1d3b      	adds	r3, r7, #4
10004100:	681b      	ldr	r3, [r3, #0]
10004102:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10004106:	2b00      	cmp	r3, #0
10004108:	d002      	beq.n	10004110 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
1000410a:	2b02      	cmp	r3, #2
1000410c:	d01b      	beq.n	10004146 <HAL_RCCEx_PeriphCLKConfig+0x141e>
1000410e:	e035      	b.n	1000417c <HAL_RCCEx_PeriphCLKConfig+0x1454>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004110:	1d3b      	adds	r3, r7, #4
10004112:	681b      	ldr	r3, [r3, #0]
10004114:	3380      	adds	r3, #128	; 0x80
10004116:	4618      	mov	r0, r3
10004118:	f7fe fcae 	bl	10002a78 <RCCEx_PLL4_Config>
1000411c:	4603      	mov	r3, r0
1000411e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10004122:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004126:	2b00      	cmp	r3, #0
10004128:	d002      	beq.n	10004130 <HAL_RCCEx_PeriphCLKConfig+0x1408>
        {
          return status;
1000412a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000412e:	e256      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004130:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004134:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004138:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000413c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004140:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10004144:	e01a      	b.n	1000417c <HAL_RCCEx_PeriphCLKConfig+0x1454>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004146:	1d3b      	adds	r3, r7, #4
10004148:	681b      	ldr	r3, [r3, #0]
1000414a:	3344      	adds	r3, #68	; 0x44
1000414c:	4618      	mov	r0, r3
1000414e:	f7fe fb29 	bl	100027a4 <RCCEx_PLL3_Config>
10004152:	4603      	mov	r3, r0
10004154:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10004158:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000415c:	2b00      	cmp	r3, #0
1000415e:	d002      	beq.n	10004166 <HAL_RCCEx_PeriphCLKConfig+0x143e>
        {
          return status;
10004160:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004164:	e23b      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004166:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000416a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000416e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004172:	f043 0320 	orr.w	r3, r3, #32
10004176:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000417a:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
1000417c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004180:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10004184:	f023 0203 	bic.w	r2, r3, #3
10004188:	1d3b      	adds	r3, r7, #4
1000418a:	681b      	ldr	r3, [r3, #0]
1000418c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10004190:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004194:	4313      	orrs	r3, r2
10004196:	f8c1 3928 	str.w	r3, [r1, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
1000419a:	1d3b      	adds	r3, r7, #4
1000419c:	681b      	ldr	r3, [r3, #0]
1000419e:	e9d3 bc00 	ldrd	fp, ip, [r3]
100041a2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
100041a6:	f04f 0200 	mov.w	r2, #0
100041aa:	ea0b 0301 	and.w	r3, fp, r1
100041ae:	ea0c 0402 	and.w	r4, ip, r2
100041b2:	4323      	orrs	r3, r4
100041b4:	d04c      	beq.n	10004250 <HAL_RCCEx_PeriphCLKConfig+0x1528>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
100041b6:	1d3b      	adds	r3, r7, #4
100041b8:	681b      	ldr	r3, [r3, #0]
100041ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100041be:	2b01      	cmp	r3, #1
100041c0:	d01c      	beq.n	100041fc <HAL_RCCEx_PeriphCLKConfig+0x14d4>
100041c2:	2b02      	cmp	r3, #2
100041c4:	d135      	bne.n	10004232 <HAL_RCCEx_PeriphCLKConfig+0x150a>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100041c6:	1d3b      	adds	r3, r7, #4
100041c8:	681b      	ldr	r3, [r3, #0]
100041ca:	3344      	adds	r3, #68	; 0x44
100041cc:	4618      	mov	r0, r3
100041ce:	f7fe fae9 	bl	100027a4 <RCCEx_PLL3_Config>
100041d2:	4603      	mov	r3, r0
100041d4:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100041d8:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100041dc:	2b00      	cmp	r3, #0
100041de:	d002      	beq.n	100041e6 <HAL_RCCEx_PeriphCLKConfig+0x14be>
        {
          return status;
100041e0:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100041e4:	e1fb      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100041e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041ea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100041ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100041f2:	f043 0320 	orr.w	r3, r3, #32
100041f6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100041fa:	e01a      	b.n	10004232 <HAL_RCCEx_PeriphCLKConfig+0x150a>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100041fc:	1d3b      	adds	r3, r7, #4
100041fe:	681b      	ldr	r3, [r3, #0]
10004200:	3380      	adds	r3, #128	; 0x80
10004202:	4618      	mov	r0, r3
10004204:	f7fe fc38 	bl	10002a78 <RCCEx_PLL4_Config>
10004208:	4603      	mov	r3, r0
1000420a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000420e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004212:	2b00      	cmp	r3, #0
10004214:	d002      	beq.n	1000421c <HAL_RCCEx_PeriphCLKConfig+0x14f4>
        {
          return status;
10004216:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000421a:	e1e0      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000421c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004220:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004224:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004228:	f043 0310 	orr.w	r3, r3, #16
1000422c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004230:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10004232:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004236:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
1000423a:	f023 0207 	bic.w	r2, r3, #7
1000423e:	1d3b      	adds	r3, r7, #4
10004240:	681b      	ldr	r3, [r3, #0]
10004242:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004246:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000424a:	4313      	orrs	r3, r2
1000424c:	f8c1 392c 	str.w	r3, [r1, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10004250:	1d3b      	adds	r3, r7, #4
10004252:	681b      	ldr	r3, [r3, #0]
10004254:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004258:	f44f 3180 	mov.w	r1, #65536	; 0x10000
1000425c:	f04f 0200 	mov.w	r2, #0
10004260:	ea0b 0301 	and.w	r3, fp, r1
10004264:	ea0c 0402 	and.w	r4, ip, r2
10004268:	4323      	orrs	r3, r4
1000426a:	d02e      	beq.n	100042ca <HAL_RCCEx_PeriphCLKConfig+0x15a2>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
1000426c:	1d3b      	adds	r3, r7, #4
1000426e:	681b      	ldr	r3, [r3, #0]
10004270:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10004274:	2b01      	cmp	r3, #1
10004276:	d119      	bne.n	100042ac <HAL_RCCEx_PeriphCLKConfig+0x1584>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004278:	1d3b      	adds	r3, r7, #4
1000427a:	681b      	ldr	r3, [r3, #0]
1000427c:	3380      	adds	r3, #128	; 0x80
1000427e:	4618      	mov	r0, r3
10004280:	f7fe fbfa 	bl	10002a78 <RCCEx_PLL4_Config>
10004284:	4603      	mov	r3, r0
10004286:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
1000428a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000428e:	2b00      	cmp	r3, #0
10004290:	d002      	beq.n	10004298 <HAL_RCCEx_PeriphCLKConfig+0x1570>
      {
        return status;
10004292:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004296:	e1a2      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004298:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000429c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100042a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042a4:	f043 0320 	orr.w	r3, r3, #32
100042a8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
100042ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042b0:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
100042b4:	f023 0207 	bic.w	r2, r3, #7
100042b8:	1d3b      	adds	r3, r7, #4
100042ba:	681b      	ldr	r3, [r3, #0]
100042bc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
100042c0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100042c4:	4313      	orrs	r3, r2
100042c6:	f8c1 3930 	str.w	r3, [r1, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
100042ca:	1d3b      	adds	r3, r7, #4
100042cc:	681b      	ldr	r3, [r3, #0]
100042ce:	e9d3 bc00 	ldrd	fp, ip, [r3]
100042d2:	f04f 0140 	mov.w	r1, #64	; 0x40
100042d6:	f04f 0200 	mov.w	r2, #0
100042da:	ea0b 0301 	and.w	r3, fp, r1
100042de:	ea0c 0402 	and.w	r4, ip, r2
100042e2:	4323      	orrs	r3, r4
100042e4:	d04c      	beq.n	10004380 <HAL_RCCEx_PeriphCLKConfig+0x1658>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
100042e6:	1d3b      	adds	r3, r7, #4
100042e8:	681b      	ldr	r3, [r3, #0]
100042ea:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
100042ee:	2b01      	cmp	r3, #1
100042f0:	d01c      	beq.n	1000432c <HAL_RCCEx_PeriphCLKConfig+0x1604>
100042f2:	2b02      	cmp	r3, #2
100042f4:	d135      	bne.n	10004362 <HAL_RCCEx_PeriphCLKConfig+0x163a>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100042f6:	1d3b      	adds	r3, r7, #4
100042f8:	681b      	ldr	r3, [r3, #0]
100042fa:	3344      	adds	r3, #68	; 0x44
100042fc:	4618      	mov	r0, r3
100042fe:	f7fe fa51 	bl	100027a4 <RCCEx_PLL3_Config>
10004302:	4603      	mov	r3, r0
10004304:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10004308:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000430c:	2b00      	cmp	r3, #0
1000430e:	d002      	beq.n	10004316 <HAL_RCCEx_PeriphCLKConfig+0x15ee>
        {
          return status;
10004310:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004314:	e163      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004316:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000431a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000431e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004322:	f043 0320 	orr.w	r3, r3, #32
10004326:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000432a:	e01a      	b.n	10004362 <HAL_RCCEx_PeriphCLKConfig+0x163a>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000432c:	1d3b      	adds	r3, r7, #4
1000432e:	681b      	ldr	r3, [r3, #0]
10004330:	3380      	adds	r3, #128	; 0x80
10004332:	4618      	mov	r0, r3
10004334:	f7fe fba0 	bl	10002a78 <RCCEx_PLL4_Config>
10004338:	4603      	mov	r3, r0
1000433a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000433e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004342:	2b00      	cmp	r3, #0
10004344:	d002      	beq.n	1000434c <HAL_RCCEx_PeriphCLKConfig+0x1624>
        {
          return status;
10004346:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000434a:	e148      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000434c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004350:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004354:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004358:	f043 0310 	orr.w	r3, r3, #16
1000435c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004360:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10004362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004366:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
1000436a:	f023 0207 	bic.w	r2, r3, #7
1000436e:	1d3b      	adds	r3, r7, #4
10004370:	681b      	ldr	r3, [r3, #0]
10004372:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10004376:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000437a:	4313      	orrs	r3, r2
1000437c:	f8c1 3934 	str.w	r3, [r1, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10004380:	1d3b      	adds	r3, r7, #4
10004382:	681b      	ldr	r3, [r3, #0]
10004384:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1000438c:	f04f 0200 	mov.w	r2, #0
10004390:	ea0b 0301 	and.w	r3, fp, r1
10004394:	ea0c 0402 	and.w	r4, ip, r2
10004398:	4323      	orrs	r3, r4
1000439a:	f000 80b3 	beq.w	10004504 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000439e:	4b93      	ldr	r3, [pc, #588]	; (100045ec <HAL_RCCEx_PeriphCLKConfig+0x18c4>)
100043a0:	681b      	ldr	r3, [r3, #0]
100043a2:	4a92      	ldr	r2, [pc, #584]	; (100045ec <HAL_RCCEx_PeriphCLKConfig+0x18c4>)
100043a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100043a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100043aa:	f7fc f96f 	bl	1000068c <HAL_GetTick>
100043ae:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100043b2:	e00a      	b.n	100043ca <HAL_RCCEx_PeriphCLKConfig+0x16a2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100043b4:	f7fc f96a 	bl	1000068c <HAL_GetTick>
100043b8:	4602      	mov	r2, r0
100043ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
100043be:	1ad3      	subs	r3, r2, r3
100043c0:	2b64      	cmp	r3, #100	; 0x64
100043c2:	d902      	bls.n	100043ca <HAL_RCCEx_PeriphCLKConfig+0x16a2>
      {
        ret = HAL_TIMEOUT;
100043c4:	2303      	movs	r3, #3
100043c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100043ca:	4b88      	ldr	r3, [pc, #544]	; (100045ec <HAL_RCCEx_PeriphCLKConfig+0x18c4>)
100043cc:	681b      	ldr	r3, [r3, #0]
100043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
100043d2:	2b00      	cmp	r3, #0
100043d4:	d0ee      	beq.n	100043b4 <HAL_RCCEx_PeriphCLKConfig+0x168c>
      }
    }

    if (ret == HAL_OK)
100043d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
100043da:	2b00      	cmp	r3, #0
100043dc:	f040 808f 	bne.w	100044fe <HAL_RCCEx_PeriphCLKConfig+0x17d6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
100043e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043e4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100043e8:	1d3b      	adds	r3, r7, #4
100043ea:	681b      	ldr	r3, [r3, #0]
100043ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
100043f0:	4053      	eors	r3, r2
100043f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
100043f6:	2b00      	cmp	r3, #0
100043f8:	d076      	beq.n	100044e8 <HAL_RCCEx_PeriphCLKConfig+0x17c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
100043fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004402:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
10004406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
1000440a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000440e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004412:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1000441a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
1000441e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004422:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004426:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000442a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
1000442e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
10004432:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004436:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000443a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
1000443e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
10004442:	f003 0330 	and.w	r3, r3, #48	; 0x30
10004446:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000444a:	4313      	orrs	r3, r2
1000444c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10004450:	f107 0308 	add.w	r3, r7, #8
10004454:	2204      	movs	r2, #4
10004456:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10004458:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
1000445c:	f003 020b 	and.w	r2, r3, #11
10004460:	f107 0308 	add.w	r3, r7, #8
10004464:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10004466:	f107 0308 	add.w	r3, r7, #8
1000446a:	2200      	movs	r2, #0
1000446c:	625a      	str	r2, [r3, #36]	; 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
1000446e:	f107 0308 	add.w	r3, r7, #8
10004472:	2200      	movs	r2, #0
10004474:	661a      	str	r2, [r3, #96]	; 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
10004476:	f107 0308 	add.w	r3, r7, #8
1000447a:	2200      	movs	r2, #0
1000447c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10004480:	f107 0308 	add.w	r3, r7, #8
10004484:	2200      	movs	r2, #0
10004486:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
1000448a:	f107 0308 	add.w	r3, r7, #8
1000448e:	4618      	mov	r0, r3
10004490:	f7fc fbb8 	bl	10000c04 <HAL_RCC_OscConfig>
10004494:	4603      	mov	r3, r0
10004496:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        if (ret != HAL_OK)
1000449a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
1000449e:	2b00      	cmp	r3, #0
100044a0:	d002      	beq.n	100044a8 <HAL_RCCEx_PeriphCLKConfig+0x1780>
        {
          return ret;
100044a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
100044a6:	e09a      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
100044a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100044b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
100044b4:	1d3b      	adds	r3, r7, #4
100044b6:	681b      	ldr	r3, [r3, #0]
100044b8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
100044bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100044c0:	4313      	orrs	r3, r2
100044c2:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
100044c6:	4b4a      	ldr	r3, [pc, #296]	; (100045f0 <HAL_RCCEx_PeriphCLKConfig+0x18c8>)
100044c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
100044cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044d0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100044d4:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
100044d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
100044dc:	400b      	ands	r3, r1
100044de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100044e2:	4313      	orrs	r3, r2
100044e4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
100044e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100044f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100044f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100044f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100044fc:	e002      	b.n	10004504 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
100044fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
10004502:	e06c      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
10004504:	1d3b      	adds	r3, r7, #4
10004506:	681b      	ldr	r3, [r3, #0]
10004508:	e9d3 bc00 	ldrd	fp, ip, [r3]
1000450c:	f44f 6180 	mov.w	r1, #1024	; 0x400
10004510:	f04f 0200 	mov.w	r2, #0
10004514:	ea0b 0301 	and.w	r3, fp, r1
10004518:	ea0c 0402 	and.w	r4, ip, r2
1000451c:	4323      	orrs	r3, r4
1000451e:	d027      	beq.n	10004570 <HAL_RCCEx_PeriphCLKConfig+0x1848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10004520:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004524:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10004528:	f023 0201 	bic.w	r2, r3, #1
1000452c:	1d3b      	adds	r3, r7, #4
1000452e:	681b      	ldr	r3, [r3, #0]
10004530:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
10004534:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004538:	4313      	orrs	r3, r2
1000453a:	f8c1 3828 	str.w	r3, [r1, #2088]	; 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000453e:	f7fc f8a5 	bl	1000068c <HAL_GetTick>
10004542:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10004546:	e00a      	b.n	1000455e <HAL_RCCEx_PeriphCLKConfig+0x1836>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004548:	f7fc f8a0 	bl	1000068c <HAL_GetTick>
1000454c:	4602      	mov	r2, r0
1000454e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
10004552:	1ad3      	subs	r3, r2, r3
10004554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004558:	d901      	bls.n	1000455e <HAL_RCCEx_PeriphCLKConfig+0x1836>
      {
        return HAL_TIMEOUT;
1000455a:	2303      	movs	r3, #3
1000455c:	e03f      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000455e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004562:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10004566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000456a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000456e:	d1eb      	bne.n	10004548 <HAL_RCCEx_PeriphCLKConfig+0x1820>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
10004570:	1d3b      	adds	r3, r7, #4
10004572:	681b      	ldr	r3, [r3, #0]
10004574:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004578:	f44f 6100 	mov.w	r1, #2048	; 0x800
1000457c:	f04f 0200 	mov.w	r2, #0
10004580:	ea0b 0301 	and.w	r3, fp, r1
10004584:	ea0c 0402 	and.w	r4, ip, r2
10004588:	4323      	orrs	r3, r4
1000458a:	d027      	beq.n	100045dc <HAL_RCCEx_PeriphCLKConfig+0x18b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
1000458c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004590:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10004594:	f023 0201 	bic.w	r2, r3, #1
10004598:	1d3b      	adds	r3, r7, #4
1000459a:	681b      	ldr	r3, [r3, #0]
1000459c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
100045a0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100045a4:	4313      	orrs	r3, r2
100045a6:	f8c1 382c 	str.w	r3, [r1, #2092]	; 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100045aa:	f7fc f86f 	bl	1000068c <HAL_GetTick>
100045ae:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
100045b2:	e00a      	b.n	100045ca <HAL_RCCEx_PeriphCLKConfig+0x18a2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100045b4:	f7fc f86a 	bl	1000068c <HAL_GetTick>
100045b8:	4602      	mov	r2, r0
100045ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
100045be:	1ad3      	subs	r3, r2, r3
100045c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100045c4:	d901      	bls.n	100045ca <HAL_RCCEx_PeriphCLKConfig+0x18a2>
      {
        return HAL_TIMEOUT;
100045c6:	2303      	movs	r3, #3
100045c8:	e009      	b.n	100045de <HAL_RCCEx_PeriphCLKConfig+0x18b6>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
100045ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045ce:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
100045d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100045d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100045da:	d1eb      	bne.n	100045b4 <HAL_RCCEx_PeriphCLKConfig+0x188c>
      }
    }
  }

  return HAL_OK;
100045dc:	2300      	movs	r3, #0
}
100045de:	4618      	mov	r0, r3
100045e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
100045e4:	46bd      	mov	sp, r7
100045e6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
100045ea:	bf00      	nop
100045ec:	50001000 	.word	0x50001000
100045f0:	7fecfdc0 	.word	0x7fecfdc0

100045f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
100045f4:	b580      	push	{r7, lr}
100045f6:	b082      	sub	sp, #8
100045f8:	af00      	add	r7, sp, #0
100045fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
100045fc:	687b      	ldr	r3, [r7, #4]
100045fe:	2b00      	cmp	r3, #0
10004600:	d101      	bne.n	10004606 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
10004602:	2301      	movs	r3, #1
10004604:	e01d      	b.n	10004642 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
10004606:	687b      	ldr	r3, [r7, #4]
10004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
1000460c:	b2db      	uxtb	r3, r3
1000460e:	2b00      	cmp	r3, #0
10004610:	d106      	bne.n	10004620 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
10004612:	687b      	ldr	r3, [r7, #4]
10004614:	2200      	movs	r2, #0
10004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
1000461a:	6878      	ldr	r0, [r7, #4]
1000461c:	f7fb fec2 	bl	100003a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
10004620:	687b      	ldr	r3, [r7, #4]
10004622:	2202      	movs	r2, #2
10004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
10004628:	687b      	ldr	r3, [r7, #4]
1000462a:	681a      	ldr	r2, [r3, #0]
1000462c:	687b      	ldr	r3, [r7, #4]
1000462e:	3304      	adds	r3, #4
10004630:	4619      	mov	r1, r3
10004632:	4610      	mov	r0, r2
10004634:	f000 f978 	bl	10004928 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
10004638:	687b      	ldr	r3, [r7, #4]
1000463a:	2201      	movs	r2, #1
1000463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
10004640:	2300      	movs	r3, #0
}
10004642:	4618      	mov	r0, r3
10004644:	3708      	adds	r7, #8
10004646:	46bd      	mov	sp, r7
10004648:	bd80      	pop	{r7, pc}
	...

1000464c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
1000464c:	b580      	push	{r7, lr}
1000464e:	b084      	sub	sp, #16
10004650:	af00      	add	r7, sp, #0
10004652:	6078      	str	r0, [r7, #4]
10004654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
10004656:	687b      	ldr	r3, [r7, #4]
10004658:	681b      	ldr	r3, [r3, #0]
1000465a:	2201      	movs	r2, #1
1000465c:	6839      	ldr	r1, [r7, #0]
1000465e:	4618      	mov	r0, r3
10004660:	f000 fcc4 	bl	10004fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
10004664:	687b      	ldr	r3, [r7, #4]
10004666:	681b      	ldr	r3, [r3, #0]
10004668:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
1000466c:	d013      	beq.n	10004696 <HAL_TIM_PWM_Start+0x4a>
1000466e:	687b      	ldr	r3, [r7, #4]
10004670:	681b      	ldr	r3, [r3, #0]
10004672:	4a1c      	ldr	r2, [pc, #112]	; (100046e4 <HAL_TIM_PWM_Start+0x98>)
10004674:	4293      	cmp	r3, r2
10004676:	d00e      	beq.n	10004696 <HAL_TIM_PWM_Start+0x4a>
10004678:	687b      	ldr	r3, [r7, #4]
1000467a:	681b      	ldr	r3, [r3, #0]
1000467c:	4a1a      	ldr	r2, [pc, #104]	; (100046e8 <HAL_TIM_PWM_Start+0x9c>)
1000467e:	4293      	cmp	r3, r2
10004680:	d009      	beq.n	10004696 <HAL_TIM_PWM_Start+0x4a>
10004682:	687b      	ldr	r3, [r7, #4]
10004684:	681b      	ldr	r3, [r3, #0]
10004686:	4a19      	ldr	r2, [pc, #100]	; (100046ec <HAL_TIM_PWM_Start+0xa0>)
10004688:	4293      	cmp	r3, r2
1000468a:	d004      	beq.n	10004696 <HAL_TIM_PWM_Start+0x4a>
1000468c:	687b      	ldr	r3, [r7, #4]
1000468e:	681b      	ldr	r3, [r3, #0]
10004690:	4a17      	ldr	r2, [pc, #92]	; (100046f0 <HAL_TIM_PWM_Start+0xa4>)
10004692:	4293      	cmp	r3, r2
10004694:	d101      	bne.n	1000469a <HAL_TIM_PWM_Start+0x4e>
10004696:	2301      	movs	r3, #1
10004698:	e000      	b.n	1000469c <HAL_TIM_PWM_Start+0x50>
1000469a:	2300      	movs	r3, #0
1000469c:	2b00      	cmp	r3, #0
1000469e:	d007      	beq.n	100046b0 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
100046a0:	687b      	ldr	r3, [r7, #4]
100046a2:	681b      	ldr	r3, [r3, #0]
100046a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
100046a6:	687b      	ldr	r3, [r7, #4]
100046a8:	681b      	ldr	r3, [r3, #0]
100046aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
100046ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
100046b0:	687b      	ldr	r3, [r7, #4]
100046b2:	681b      	ldr	r3, [r3, #0]
100046b4:	689a      	ldr	r2, [r3, #8]
100046b6:	4b0f      	ldr	r3, [pc, #60]	; (100046f4 <HAL_TIM_PWM_Start+0xa8>)
100046b8:	4013      	ands	r3, r2
100046ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
100046bc:	68fb      	ldr	r3, [r7, #12]
100046be:	2b06      	cmp	r3, #6
100046c0:	d00b      	beq.n	100046da <HAL_TIM_PWM_Start+0x8e>
100046c2:	68fb      	ldr	r3, [r7, #12]
100046c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
100046c8:	d007      	beq.n	100046da <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
100046ca:	687b      	ldr	r3, [r7, #4]
100046cc:	681b      	ldr	r3, [r3, #0]
100046ce:	681a      	ldr	r2, [r3, #0]
100046d0:	687b      	ldr	r3, [r7, #4]
100046d2:	681b      	ldr	r3, [r3, #0]
100046d4:	f042 0201 	orr.w	r2, r2, #1
100046d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
100046da:	2300      	movs	r3, #0
}
100046dc:	4618      	mov	r0, r3
100046de:	3710      	adds	r7, #16
100046e0:	46bd      	mov	sp, r7
100046e2:	bd80      	pop	{r7, pc}
100046e4:	44001000 	.word	0x44001000
100046e8:	44006000 	.word	0x44006000
100046ec:	44007000 	.word	0x44007000
100046f0:	44008000 	.word	0x44008000
100046f4:	00010007 	.word	0x00010007

100046f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
100046f8:	b580      	push	{r7, lr}
100046fa:	b084      	sub	sp, #16
100046fc:	af00      	add	r7, sp, #0
100046fe:	60f8      	str	r0, [r7, #12]
10004700:	60b9      	str	r1, [r7, #8]
10004702:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
10004704:	68fb      	ldr	r3, [r7, #12]
10004706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
1000470a:	2b01      	cmp	r3, #1
1000470c:	d101      	bne.n	10004712 <HAL_TIM_PWM_ConfigChannel+0x1a>
1000470e:	2302      	movs	r3, #2
10004710:	e105      	b.n	1000491e <HAL_TIM_PWM_ConfigChannel+0x226>
10004712:	68fb      	ldr	r3, [r7, #12]
10004714:	2201      	movs	r2, #1
10004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
1000471a:	68fb      	ldr	r3, [r7, #12]
1000471c:	2202      	movs	r2, #2
1000471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
10004722:	687b      	ldr	r3, [r7, #4]
10004724:	2b14      	cmp	r3, #20
10004726:	f200 80f0 	bhi.w	1000490a <HAL_TIM_PWM_ConfigChannel+0x212>
1000472a:	a201      	add	r2, pc, #4	; (adr r2, 10004730 <HAL_TIM_PWM_ConfigChannel+0x38>)
1000472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004730:	10004785 	.word	0x10004785
10004734:	1000490b 	.word	0x1000490b
10004738:	1000490b 	.word	0x1000490b
1000473c:	1000490b 	.word	0x1000490b
10004740:	100047c5 	.word	0x100047c5
10004744:	1000490b 	.word	0x1000490b
10004748:	1000490b 	.word	0x1000490b
1000474c:	1000490b 	.word	0x1000490b
10004750:	10004807 	.word	0x10004807
10004754:	1000490b 	.word	0x1000490b
10004758:	1000490b 	.word	0x1000490b
1000475c:	1000490b 	.word	0x1000490b
10004760:	10004847 	.word	0x10004847
10004764:	1000490b 	.word	0x1000490b
10004768:	1000490b 	.word	0x1000490b
1000476c:	1000490b 	.word	0x1000490b
10004770:	10004889 	.word	0x10004889
10004774:	1000490b 	.word	0x1000490b
10004778:	1000490b 	.word	0x1000490b
1000477c:	1000490b 	.word	0x1000490b
10004780:	100048c9 	.word	0x100048c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
10004784:	68fb      	ldr	r3, [r7, #12]
10004786:	681b      	ldr	r3, [r3, #0]
10004788:	68b9      	ldr	r1, [r7, #8]
1000478a:	4618      	mov	r0, r3
1000478c:	f000 f964 	bl	10004a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
10004790:	68fb      	ldr	r3, [r7, #12]
10004792:	681b      	ldr	r3, [r3, #0]
10004794:	699a      	ldr	r2, [r3, #24]
10004796:	68fb      	ldr	r3, [r7, #12]
10004798:	681b      	ldr	r3, [r3, #0]
1000479a:	f042 0208 	orr.w	r2, r2, #8
1000479e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
100047a0:	68fb      	ldr	r3, [r7, #12]
100047a2:	681b      	ldr	r3, [r3, #0]
100047a4:	699a      	ldr	r2, [r3, #24]
100047a6:	68fb      	ldr	r3, [r7, #12]
100047a8:	681b      	ldr	r3, [r3, #0]
100047aa:	f022 0204 	bic.w	r2, r2, #4
100047ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
100047b0:	68fb      	ldr	r3, [r7, #12]
100047b2:	681b      	ldr	r3, [r3, #0]
100047b4:	6999      	ldr	r1, [r3, #24]
100047b6:	68bb      	ldr	r3, [r7, #8]
100047b8:	691a      	ldr	r2, [r3, #16]
100047ba:	68fb      	ldr	r3, [r7, #12]
100047bc:	681b      	ldr	r3, [r3, #0]
100047be:	430a      	orrs	r2, r1
100047c0:	619a      	str	r2, [r3, #24]
      break;
100047c2:	e0a3      	b.n	1000490c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
100047c4:	68fb      	ldr	r3, [r7, #12]
100047c6:	681b      	ldr	r3, [r3, #0]
100047c8:	68b9      	ldr	r1, [r7, #8]
100047ca:	4618      	mov	r0, r3
100047cc:	f000 f9d2 	bl	10004b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
100047d0:	68fb      	ldr	r3, [r7, #12]
100047d2:	681b      	ldr	r3, [r3, #0]
100047d4:	699a      	ldr	r2, [r3, #24]
100047d6:	68fb      	ldr	r3, [r7, #12]
100047d8:	681b      	ldr	r3, [r3, #0]
100047da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
100047de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
100047e0:	68fb      	ldr	r3, [r7, #12]
100047e2:	681b      	ldr	r3, [r3, #0]
100047e4:	699a      	ldr	r2, [r3, #24]
100047e6:	68fb      	ldr	r3, [r7, #12]
100047e8:	681b      	ldr	r3, [r3, #0]
100047ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
100047ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
100047f0:	68fb      	ldr	r3, [r7, #12]
100047f2:	681b      	ldr	r3, [r3, #0]
100047f4:	6999      	ldr	r1, [r3, #24]
100047f6:	68bb      	ldr	r3, [r7, #8]
100047f8:	691b      	ldr	r3, [r3, #16]
100047fa:	021a      	lsls	r2, r3, #8
100047fc:	68fb      	ldr	r3, [r7, #12]
100047fe:	681b      	ldr	r3, [r3, #0]
10004800:	430a      	orrs	r2, r1
10004802:	619a      	str	r2, [r3, #24]
      break;
10004804:	e082      	b.n	1000490c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
10004806:	68fb      	ldr	r3, [r7, #12]
10004808:	681b      	ldr	r3, [r3, #0]
1000480a:	68b9      	ldr	r1, [r7, #8]
1000480c:	4618      	mov	r0, r3
1000480e:	f000 fa39 	bl	10004c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
10004812:	68fb      	ldr	r3, [r7, #12]
10004814:	681b      	ldr	r3, [r3, #0]
10004816:	69da      	ldr	r2, [r3, #28]
10004818:	68fb      	ldr	r3, [r7, #12]
1000481a:	681b      	ldr	r3, [r3, #0]
1000481c:	f042 0208 	orr.w	r2, r2, #8
10004820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
10004822:	68fb      	ldr	r3, [r7, #12]
10004824:	681b      	ldr	r3, [r3, #0]
10004826:	69da      	ldr	r2, [r3, #28]
10004828:	68fb      	ldr	r3, [r7, #12]
1000482a:	681b      	ldr	r3, [r3, #0]
1000482c:	f022 0204 	bic.w	r2, r2, #4
10004830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
10004832:	68fb      	ldr	r3, [r7, #12]
10004834:	681b      	ldr	r3, [r3, #0]
10004836:	69d9      	ldr	r1, [r3, #28]
10004838:	68bb      	ldr	r3, [r7, #8]
1000483a:	691a      	ldr	r2, [r3, #16]
1000483c:	68fb      	ldr	r3, [r7, #12]
1000483e:	681b      	ldr	r3, [r3, #0]
10004840:	430a      	orrs	r2, r1
10004842:	61da      	str	r2, [r3, #28]
      break;
10004844:	e062      	b.n	1000490c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
10004846:	68fb      	ldr	r3, [r7, #12]
10004848:	681b      	ldr	r3, [r3, #0]
1000484a:	68b9      	ldr	r1, [r7, #8]
1000484c:	4618      	mov	r0, r3
1000484e:	f000 fa9f 	bl	10004d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
10004852:	68fb      	ldr	r3, [r7, #12]
10004854:	681b      	ldr	r3, [r3, #0]
10004856:	69da      	ldr	r2, [r3, #28]
10004858:	68fb      	ldr	r3, [r7, #12]
1000485a:	681b      	ldr	r3, [r3, #0]
1000485c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
10004860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
10004862:	68fb      	ldr	r3, [r7, #12]
10004864:	681b      	ldr	r3, [r3, #0]
10004866:	69da      	ldr	r2, [r3, #28]
10004868:	68fb      	ldr	r3, [r7, #12]
1000486a:	681b      	ldr	r3, [r3, #0]
1000486c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
10004870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
10004872:	68fb      	ldr	r3, [r7, #12]
10004874:	681b      	ldr	r3, [r3, #0]
10004876:	69d9      	ldr	r1, [r3, #28]
10004878:	68bb      	ldr	r3, [r7, #8]
1000487a:	691b      	ldr	r3, [r3, #16]
1000487c:	021a      	lsls	r2, r3, #8
1000487e:	68fb      	ldr	r3, [r7, #12]
10004880:	681b      	ldr	r3, [r3, #0]
10004882:	430a      	orrs	r2, r1
10004884:	61da      	str	r2, [r3, #28]
      break;
10004886:	e041      	b.n	1000490c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
10004888:	68fb      	ldr	r3, [r7, #12]
1000488a:	681b      	ldr	r3, [r3, #0]
1000488c:	68b9      	ldr	r1, [r7, #8]
1000488e:	4618      	mov	r0, r3
10004890:	f000 fae6 	bl	10004e60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
10004894:	68fb      	ldr	r3, [r7, #12]
10004896:	681b      	ldr	r3, [r3, #0]
10004898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
1000489a:	68fb      	ldr	r3, [r7, #12]
1000489c:	681b      	ldr	r3, [r3, #0]
1000489e:	f042 0208 	orr.w	r2, r2, #8
100048a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
100048a4:	68fb      	ldr	r3, [r7, #12]
100048a6:	681b      	ldr	r3, [r3, #0]
100048a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
100048aa:	68fb      	ldr	r3, [r7, #12]
100048ac:	681b      	ldr	r3, [r3, #0]
100048ae:	f022 0204 	bic.w	r2, r2, #4
100048b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
100048b4:	68fb      	ldr	r3, [r7, #12]
100048b6:	681b      	ldr	r3, [r3, #0]
100048b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
100048ba:	68bb      	ldr	r3, [r7, #8]
100048bc:	691a      	ldr	r2, [r3, #16]
100048be:	68fb      	ldr	r3, [r7, #12]
100048c0:	681b      	ldr	r3, [r3, #0]
100048c2:	430a      	orrs	r2, r1
100048c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
100048c6:	e021      	b.n	1000490c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
100048c8:	68fb      	ldr	r3, [r7, #12]
100048ca:	681b      	ldr	r3, [r3, #0]
100048cc:	68b9      	ldr	r1, [r7, #8]
100048ce:	4618      	mov	r0, r3
100048d0:	f000 fb28 	bl	10004f24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
100048d4:	68fb      	ldr	r3, [r7, #12]
100048d6:	681b      	ldr	r3, [r3, #0]
100048d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
100048da:	68fb      	ldr	r3, [r7, #12]
100048dc:	681b      	ldr	r3, [r3, #0]
100048de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
100048e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
100048e4:	68fb      	ldr	r3, [r7, #12]
100048e6:	681b      	ldr	r3, [r3, #0]
100048e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
100048ea:	68fb      	ldr	r3, [r7, #12]
100048ec:	681b      	ldr	r3, [r3, #0]
100048ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
100048f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
100048f4:	68fb      	ldr	r3, [r7, #12]
100048f6:	681b      	ldr	r3, [r3, #0]
100048f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
100048fa:	68bb      	ldr	r3, [r7, #8]
100048fc:	691b      	ldr	r3, [r3, #16]
100048fe:	021a      	lsls	r2, r3, #8
10004900:	68fb      	ldr	r3, [r7, #12]
10004902:	681b      	ldr	r3, [r3, #0]
10004904:	430a      	orrs	r2, r1
10004906:	655a      	str	r2, [r3, #84]	; 0x54
      break;
10004908:	e000      	b.n	1000490c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
1000490a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
1000490c:	68fb      	ldr	r3, [r7, #12]
1000490e:	2201      	movs	r2, #1
10004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
10004914:	68fb      	ldr	r3, [r7, #12]
10004916:	2200      	movs	r2, #0
10004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
1000491c:	2300      	movs	r3, #0
}
1000491e:	4618      	mov	r0, r3
10004920:	3710      	adds	r7, #16
10004922:	46bd      	mov	sp, r7
10004924:	bd80      	pop	{r7, pc}
10004926:	bf00      	nop

10004928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
10004928:	b480      	push	{r7}
1000492a:	b085      	sub	sp, #20
1000492c:	af00      	add	r7, sp, #0
1000492e:	6078      	str	r0, [r7, #4]
10004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
10004932:	687b      	ldr	r3, [r7, #4]
10004934:	681b      	ldr	r3, [r3, #0]
10004936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
10004938:	687b      	ldr	r3, [r7, #4]
1000493a:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
1000493e:	d013      	beq.n	10004968 <TIM_Base_SetConfig+0x40>
10004940:	687b      	ldr	r3, [r7, #4]
10004942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
10004946:	d00f      	beq.n	10004968 <TIM_Base_SetConfig+0x40>
10004948:	687b      	ldr	r3, [r7, #4]
1000494a:	4a3c      	ldr	r2, [pc, #240]	; (10004a3c <TIM_Base_SetConfig+0x114>)
1000494c:	4293      	cmp	r3, r2
1000494e:	d00b      	beq.n	10004968 <TIM_Base_SetConfig+0x40>
10004950:	687b      	ldr	r3, [r7, #4]
10004952:	4a3b      	ldr	r2, [pc, #236]	; (10004a40 <TIM_Base_SetConfig+0x118>)
10004954:	4293      	cmp	r3, r2
10004956:	d007      	beq.n	10004968 <TIM_Base_SetConfig+0x40>
10004958:	687b      	ldr	r3, [r7, #4]
1000495a:	4a3a      	ldr	r2, [pc, #232]	; (10004a44 <TIM_Base_SetConfig+0x11c>)
1000495c:	4293      	cmp	r3, r2
1000495e:	d003      	beq.n	10004968 <TIM_Base_SetConfig+0x40>
10004960:	687b      	ldr	r3, [r7, #4]
10004962:	4a39      	ldr	r2, [pc, #228]	; (10004a48 <TIM_Base_SetConfig+0x120>)
10004964:	4293      	cmp	r3, r2
10004966:	d108      	bne.n	1000497a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
10004968:	68fb      	ldr	r3, [r7, #12]
1000496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000496e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
10004970:	683b      	ldr	r3, [r7, #0]
10004972:	685b      	ldr	r3, [r3, #4]
10004974:	68fa      	ldr	r2, [r7, #12]
10004976:	4313      	orrs	r3, r2
10004978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
1000497a:	687b      	ldr	r3, [r7, #4]
1000497c:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10004980:	d01f      	beq.n	100049c2 <TIM_Base_SetConfig+0x9a>
10004982:	687b      	ldr	r3, [r7, #4]
10004984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
10004988:	d01b      	beq.n	100049c2 <TIM_Base_SetConfig+0x9a>
1000498a:	687b      	ldr	r3, [r7, #4]
1000498c:	4a2b      	ldr	r2, [pc, #172]	; (10004a3c <TIM_Base_SetConfig+0x114>)
1000498e:	4293      	cmp	r3, r2
10004990:	d017      	beq.n	100049c2 <TIM_Base_SetConfig+0x9a>
10004992:	687b      	ldr	r3, [r7, #4]
10004994:	4a2a      	ldr	r2, [pc, #168]	; (10004a40 <TIM_Base_SetConfig+0x118>)
10004996:	4293      	cmp	r3, r2
10004998:	d013      	beq.n	100049c2 <TIM_Base_SetConfig+0x9a>
1000499a:	687b      	ldr	r3, [r7, #4]
1000499c:	4a29      	ldr	r2, [pc, #164]	; (10004a44 <TIM_Base_SetConfig+0x11c>)
1000499e:	4293      	cmp	r3, r2
100049a0:	d00f      	beq.n	100049c2 <TIM_Base_SetConfig+0x9a>
100049a2:	687b      	ldr	r3, [r7, #4]
100049a4:	4a28      	ldr	r2, [pc, #160]	; (10004a48 <TIM_Base_SetConfig+0x120>)
100049a6:	4293      	cmp	r3, r2
100049a8:	d00b      	beq.n	100049c2 <TIM_Base_SetConfig+0x9a>
100049aa:	687b      	ldr	r3, [r7, #4]
100049ac:	4a27      	ldr	r2, [pc, #156]	; (10004a4c <TIM_Base_SetConfig+0x124>)
100049ae:	4293      	cmp	r3, r2
100049b0:	d007      	beq.n	100049c2 <TIM_Base_SetConfig+0x9a>
100049b2:	687b      	ldr	r3, [r7, #4]
100049b4:	4a26      	ldr	r2, [pc, #152]	; (10004a50 <TIM_Base_SetConfig+0x128>)
100049b6:	4293      	cmp	r3, r2
100049b8:	d003      	beq.n	100049c2 <TIM_Base_SetConfig+0x9a>
100049ba:	687b      	ldr	r3, [r7, #4]
100049bc:	4a25      	ldr	r2, [pc, #148]	; (10004a54 <TIM_Base_SetConfig+0x12c>)
100049be:	4293      	cmp	r3, r2
100049c0:	d108      	bne.n	100049d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
100049c2:	68fb      	ldr	r3, [r7, #12]
100049c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
100049c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
100049ca:	683b      	ldr	r3, [r7, #0]
100049cc:	68db      	ldr	r3, [r3, #12]
100049ce:	68fa      	ldr	r2, [r7, #12]
100049d0:	4313      	orrs	r3, r2
100049d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
100049d4:	68fb      	ldr	r3, [r7, #12]
100049d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
100049da:	683b      	ldr	r3, [r7, #0]
100049dc:	695b      	ldr	r3, [r3, #20]
100049de:	4313      	orrs	r3, r2
100049e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
100049e2:	687b      	ldr	r3, [r7, #4]
100049e4:	68fa      	ldr	r2, [r7, #12]
100049e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
100049e8:	683b      	ldr	r3, [r7, #0]
100049ea:	689a      	ldr	r2, [r3, #8]
100049ec:	687b      	ldr	r3, [r7, #4]
100049ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
100049f0:	683b      	ldr	r3, [r7, #0]
100049f2:	681a      	ldr	r2, [r3, #0]
100049f4:	687b      	ldr	r3, [r7, #4]
100049f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
100049f8:	687b      	ldr	r3, [r7, #4]
100049fa:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
100049fe:	d00f      	beq.n	10004a20 <TIM_Base_SetConfig+0xf8>
10004a00:	687b      	ldr	r3, [r7, #4]
10004a02:	4a11      	ldr	r2, [pc, #68]	; (10004a48 <TIM_Base_SetConfig+0x120>)
10004a04:	4293      	cmp	r3, r2
10004a06:	d00b      	beq.n	10004a20 <TIM_Base_SetConfig+0xf8>
10004a08:	687b      	ldr	r3, [r7, #4]
10004a0a:	4a10      	ldr	r2, [pc, #64]	; (10004a4c <TIM_Base_SetConfig+0x124>)
10004a0c:	4293      	cmp	r3, r2
10004a0e:	d007      	beq.n	10004a20 <TIM_Base_SetConfig+0xf8>
10004a10:	687b      	ldr	r3, [r7, #4]
10004a12:	4a0f      	ldr	r2, [pc, #60]	; (10004a50 <TIM_Base_SetConfig+0x128>)
10004a14:	4293      	cmp	r3, r2
10004a16:	d003      	beq.n	10004a20 <TIM_Base_SetConfig+0xf8>
10004a18:	687b      	ldr	r3, [r7, #4]
10004a1a:	4a0e      	ldr	r2, [pc, #56]	; (10004a54 <TIM_Base_SetConfig+0x12c>)
10004a1c:	4293      	cmp	r3, r2
10004a1e:	d103      	bne.n	10004a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
10004a20:	683b      	ldr	r3, [r7, #0]
10004a22:	691a      	ldr	r2, [r3, #16]
10004a24:	687b      	ldr	r3, [r7, #4]
10004a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
10004a28:	687b      	ldr	r3, [r7, #4]
10004a2a:	2201      	movs	r2, #1
10004a2c:	615a      	str	r2, [r3, #20]
}
10004a2e:	bf00      	nop
10004a30:	3714      	adds	r7, #20
10004a32:	46bd      	mov	sp, r7
10004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
10004a38:	4770      	bx	lr
10004a3a:	bf00      	nop
10004a3c:	40001000 	.word	0x40001000
10004a40:	40002000 	.word	0x40002000
10004a44:	40003000 	.word	0x40003000
10004a48:	44001000 	.word	0x44001000
10004a4c:	44006000 	.word	0x44006000
10004a50:	44007000 	.word	0x44007000
10004a54:	44008000 	.word	0x44008000

10004a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
10004a58:	b480      	push	{r7}
10004a5a:	b087      	sub	sp, #28
10004a5c:	af00      	add	r7, sp, #0
10004a5e:	6078      	str	r0, [r7, #4]
10004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
10004a62:	687b      	ldr	r3, [r7, #4]
10004a64:	6a1b      	ldr	r3, [r3, #32]
10004a66:	f023 0201 	bic.w	r2, r3, #1
10004a6a:	687b      	ldr	r3, [r7, #4]
10004a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10004a6e:	687b      	ldr	r3, [r7, #4]
10004a70:	6a1b      	ldr	r3, [r3, #32]
10004a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
10004a74:	687b      	ldr	r3, [r7, #4]
10004a76:	685b      	ldr	r3, [r3, #4]
10004a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
10004a7a:	687b      	ldr	r3, [r7, #4]
10004a7c:	699b      	ldr	r3, [r3, #24]
10004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
10004a80:	68fb      	ldr	r3, [r7, #12]
10004a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10004a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
10004a8c:	68fb      	ldr	r3, [r7, #12]
10004a8e:	f023 0303 	bic.w	r3, r3, #3
10004a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
10004a94:	683b      	ldr	r3, [r7, #0]
10004a96:	681b      	ldr	r3, [r3, #0]
10004a98:	68fa      	ldr	r2, [r7, #12]
10004a9a:	4313      	orrs	r3, r2
10004a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
10004a9e:	697b      	ldr	r3, [r7, #20]
10004aa0:	f023 0302 	bic.w	r3, r3, #2
10004aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
10004aa6:	683b      	ldr	r3, [r7, #0]
10004aa8:	689b      	ldr	r3, [r3, #8]
10004aaa:	697a      	ldr	r2, [r7, #20]
10004aac:	4313      	orrs	r3, r2
10004aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
10004ab0:	687b      	ldr	r3, [r7, #4]
10004ab2:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10004ab6:	d00f      	beq.n	10004ad8 <TIM_OC1_SetConfig+0x80>
10004ab8:	687b      	ldr	r3, [r7, #4]
10004aba:	4a2a      	ldr	r2, [pc, #168]	; (10004b64 <TIM_OC1_SetConfig+0x10c>)
10004abc:	4293      	cmp	r3, r2
10004abe:	d00b      	beq.n	10004ad8 <TIM_OC1_SetConfig+0x80>
10004ac0:	687b      	ldr	r3, [r7, #4]
10004ac2:	4a29      	ldr	r2, [pc, #164]	; (10004b68 <TIM_OC1_SetConfig+0x110>)
10004ac4:	4293      	cmp	r3, r2
10004ac6:	d007      	beq.n	10004ad8 <TIM_OC1_SetConfig+0x80>
10004ac8:	687b      	ldr	r3, [r7, #4]
10004aca:	4a28      	ldr	r2, [pc, #160]	; (10004b6c <TIM_OC1_SetConfig+0x114>)
10004acc:	4293      	cmp	r3, r2
10004ace:	d003      	beq.n	10004ad8 <TIM_OC1_SetConfig+0x80>
10004ad0:	687b      	ldr	r3, [r7, #4]
10004ad2:	4a27      	ldr	r2, [pc, #156]	; (10004b70 <TIM_OC1_SetConfig+0x118>)
10004ad4:	4293      	cmp	r3, r2
10004ad6:	d10c      	bne.n	10004af2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
10004ad8:	697b      	ldr	r3, [r7, #20]
10004ada:	f023 0308 	bic.w	r3, r3, #8
10004ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
10004ae0:	683b      	ldr	r3, [r7, #0]
10004ae2:	68db      	ldr	r3, [r3, #12]
10004ae4:	697a      	ldr	r2, [r7, #20]
10004ae6:	4313      	orrs	r3, r2
10004ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
10004aea:	697b      	ldr	r3, [r7, #20]
10004aec:	f023 0304 	bic.w	r3, r3, #4
10004af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
10004af2:	687b      	ldr	r3, [r7, #4]
10004af4:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10004af8:	d00f      	beq.n	10004b1a <TIM_OC1_SetConfig+0xc2>
10004afa:	687b      	ldr	r3, [r7, #4]
10004afc:	4a19      	ldr	r2, [pc, #100]	; (10004b64 <TIM_OC1_SetConfig+0x10c>)
10004afe:	4293      	cmp	r3, r2
10004b00:	d00b      	beq.n	10004b1a <TIM_OC1_SetConfig+0xc2>
10004b02:	687b      	ldr	r3, [r7, #4]
10004b04:	4a18      	ldr	r2, [pc, #96]	; (10004b68 <TIM_OC1_SetConfig+0x110>)
10004b06:	4293      	cmp	r3, r2
10004b08:	d007      	beq.n	10004b1a <TIM_OC1_SetConfig+0xc2>
10004b0a:	687b      	ldr	r3, [r7, #4]
10004b0c:	4a17      	ldr	r2, [pc, #92]	; (10004b6c <TIM_OC1_SetConfig+0x114>)
10004b0e:	4293      	cmp	r3, r2
10004b10:	d003      	beq.n	10004b1a <TIM_OC1_SetConfig+0xc2>
10004b12:	687b      	ldr	r3, [r7, #4]
10004b14:	4a16      	ldr	r2, [pc, #88]	; (10004b70 <TIM_OC1_SetConfig+0x118>)
10004b16:	4293      	cmp	r3, r2
10004b18:	d111      	bne.n	10004b3e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
10004b1a:	693b      	ldr	r3, [r7, #16]
10004b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
10004b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
10004b22:	693b      	ldr	r3, [r7, #16]
10004b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
10004b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
10004b2a:	683b      	ldr	r3, [r7, #0]
10004b2c:	695b      	ldr	r3, [r3, #20]
10004b2e:	693a      	ldr	r2, [r7, #16]
10004b30:	4313      	orrs	r3, r2
10004b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
10004b34:	683b      	ldr	r3, [r7, #0]
10004b36:	699b      	ldr	r3, [r3, #24]
10004b38:	693a      	ldr	r2, [r7, #16]
10004b3a:	4313      	orrs	r3, r2
10004b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
10004b3e:	687b      	ldr	r3, [r7, #4]
10004b40:	693a      	ldr	r2, [r7, #16]
10004b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
10004b44:	687b      	ldr	r3, [r7, #4]
10004b46:	68fa      	ldr	r2, [r7, #12]
10004b48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
10004b4a:	683b      	ldr	r3, [r7, #0]
10004b4c:	685a      	ldr	r2, [r3, #4]
10004b4e:	687b      	ldr	r3, [r7, #4]
10004b50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
10004b52:	687b      	ldr	r3, [r7, #4]
10004b54:	697a      	ldr	r2, [r7, #20]
10004b56:	621a      	str	r2, [r3, #32]
}
10004b58:	bf00      	nop
10004b5a:	371c      	adds	r7, #28
10004b5c:	46bd      	mov	sp, r7
10004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
10004b62:	4770      	bx	lr
10004b64:	44001000 	.word	0x44001000
10004b68:	44006000 	.word	0x44006000
10004b6c:	44007000 	.word	0x44007000
10004b70:	44008000 	.word	0x44008000

10004b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
10004b74:	b480      	push	{r7}
10004b76:	b087      	sub	sp, #28
10004b78:	af00      	add	r7, sp, #0
10004b7a:	6078      	str	r0, [r7, #4]
10004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
10004b7e:	687b      	ldr	r3, [r7, #4]
10004b80:	6a1b      	ldr	r3, [r3, #32]
10004b82:	f023 0210 	bic.w	r2, r3, #16
10004b86:	687b      	ldr	r3, [r7, #4]
10004b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10004b8a:	687b      	ldr	r3, [r7, #4]
10004b8c:	6a1b      	ldr	r3, [r3, #32]
10004b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
10004b90:	687b      	ldr	r3, [r7, #4]
10004b92:	685b      	ldr	r3, [r3, #4]
10004b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
10004b96:	687b      	ldr	r3, [r7, #4]
10004b98:	699b      	ldr	r3, [r3, #24]
10004b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
10004b9c:	68fb      	ldr	r3, [r7, #12]
10004b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
10004ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
10004ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
10004ba8:	68fb      	ldr	r3, [r7, #12]
10004baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10004bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
10004bb0:	683b      	ldr	r3, [r7, #0]
10004bb2:	681b      	ldr	r3, [r3, #0]
10004bb4:	021b      	lsls	r3, r3, #8
10004bb6:	68fa      	ldr	r2, [r7, #12]
10004bb8:	4313      	orrs	r3, r2
10004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
10004bbc:	697b      	ldr	r3, [r7, #20]
10004bbe:	f023 0320 	bic.w	r3, r3, #32
10004bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
10004bc4:	683b      	ldr	r3, [r7, #0]
10004bc6:	689b      	ldr	r3, [r3, #8]
10004bc8:	011b      	lsls	r3, r3, #4
10004bca:	697a      	ldr	r2, [r7, #20]
10004bcc:	4313      	orrs	r3, r2
10004bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
10004bd0:	687b      	ldr	r3, [r7, #4]
10004bd2:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10004bd6:	d003      	beq.n	10004be0 <TIM_OC2_SetConfig+0x6c>
10004bd8:	687b      	ldr	r3, [r7, #4]
10004bda:	4a26      	ldr	r2, [pc, #152]	; (10004c74 <TIM_OC2_SetConfig+0x100>)
10004bdc:	4293      	cmp	r3, r2
10004bde:	d10d      	bne.n	10004bfc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
10004be0:	697b      	ldr	r3, [r7, #20]
10004be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
10004be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
10004be8:	683b      	ldr	r3, [r7, #0]
10004bea:	68db      	ldr	r3, [r3, #12]
10004bec:	011b      	lsls	r3, r3, #4
10004bee:	697a      	ldr	r2, [r7, #20]
10004bf0:	4313      	orrs	r3, r2
10004bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
10004bf4:	697b      	ldr	r3, [r7, #20]
10004bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
10004bfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
10004bfc:	687b      	ldr	r3, [r7, #4]
10004bfe:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10004c02:	d00f      	beq.n	10004c24 <TIM_OC2_SetConfig+0xb0>
10004c04:	687b      	ldr	r3, [r7, #4]
10004c06:	4a1b      	ldr	r2, [pc, #108]	; (10004c74 <TIM_OC2_SetConfig+0x100>)
10004c08:	4293      	cmp	r3, r2
10004c0a:	d00b      	beq.n	10004c24 <TIM_OC2_SetConfig+0xb0>
10004c0c:	687b      	ldr	r3, [r7, #4]
10004c0e:	4a1a      	ldr	r2, [pc, #104]	; (10004c78 <TIM_OC2_SetConfig+0x104>)
10004c10:	4293      	cmp	r3, r2
10004c12:	d007      	beq.n	10004c24 <TIM_OC2_SetConfig+0xb0>
10004c14:	687b      	ldr	r3, [r7, #4]
10004c16:	4a19      	ldr	r2, [pc, #100]	; (10004c7c <TIM_OC2_SetConfig+0x108>)
10004c18:	4293      	cmp	r3, r2
10004c1a:	d003      	beq.n	10004c24 <TIM_OC2_SetConfig+0xb0>
10004c1c:	687b      	ldr	r3, [r7, #4]
10004c1e:	4a18      	ldr	r2, [pc, #96]	; (10004c80 <TIM_OC2_SetConfig+0x10c>)
10004c20:	4293      	cmp	r3, r2
10004c22:	d113      	bne.n	10004c4c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
10004c24:	693b      	ldr	r3, [r7, #16]
10004c26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
10004c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
10004c2c:	693b      	ldr	r3, [r7, #16]
10004c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
10004c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
10004c34:	683b      	ldr	r3, [r7, #0]
10004c36:	695b      	ldr	r3, [r3, #20]
10004c38:	009b      	lsls	r3, r3, #2
10004c3a:	693a      	ldr	r2, [r7, #16]
10004c3c:	4313      	orrs	r3, r2
10004c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
10004c40:	683b      	ldr	r3, [r7, #0]
10004c42:	699b      	ldr	r3, [r3, #24]
10004c44:	009b      	lsls	r3, r3, #2
10004c46:	693a      	ldr	r2, [r7, #16]
10004c48:	4313      	orrs	r3, r2
10004c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
10004c4c:	687b      	ldr	r3, [r7, #4]
10004c4e:	693a      	ldr	r2, [r7, #16]
10004c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
10004c52:	687b      	ldr	r3, [r7, #4]
10004c54:	68fa      	ldr	r2, [r7, #12]
10004c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
10004c58:	683b      	ldr	r3, [r7, #0]
10004c5a:	685a      	ldr	r2, [r3, #4]
10004c5c:	687b      	ldr	r3, [r7, #4]
10004c5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
10004c60:	687b      	ldr	r3, [r7, #4]
10004c62:	697a      	ldr	r2, [r7, #20]
10004c64:	621a      	str	r2, [r3, #32]
}
10004c66:	bf00      	nop
10004c68:	371c      	adds	r7, #28
10004c6a:	46bd      	mov	sp, r7
10004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
10004c70:	4770      	bx	lr
10004c72:	bf00      	nop
10004c74:	44001000 	.word	0x44001000
10004c78:	44006000 	.word	0x44006000
10004c7c:	44007000 	.word	0x44007000
10004c80:	44008000 	.word	0x44008000

10004c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
10004c84:	b480      	push	{r7}
10004c86:	b087      	sub	sp, #28
10004c88:	af00      	add	r7, sp, #0
10004c8a:	6078      	str	r0, [r7, #4]
10004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
10004c8e:	687b      	ldr	r3, [r7, #4]
10004c90:	6a1b      	ldr	r3, [r3, #32]
10004c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
10004c96:	687b      	ldr	r3, [r7, #4]
10004c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10004c9a:	687b      	ldr	r3, [r7, #4]
10004c9c:	6a1b      	ldr	r3, [r3, #32]
10004c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
10004ca0:	687b      	ldr	r3, [r7, #4]
10004ca2:	685b      	ldr	r3, [r3, #4]
10004ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
10004ca6:	687b      	ldr	r3, [r7, #4]
10004ca8:	69db      	ldr	r3, [r3, #28]
10004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
10004cac:	68fb      	ldr	r3, [r7, #12]
10004cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
10004cb8:	68fb      	ldr	r3, [r7, #12]
10004cba:	f023 0303 	bic.w	r3, r3, #3
10004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
10004cc0:	683b      	ldr	r3, [r7, #0]
10004cc2:	681b      	ldr	r3, [r3, #0]
10004cc4:	68fa      	ldr	r2, [r7, #12]
10004cc6:	4313      	orrs	r3, r2
10004cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
10004cca:	697b      	ldr	r3, [r7, #20]
10004ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
10004cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
10004cd2:	683b      	ldr	r3, [r7, #0]
10004cd4:	689b      	ldr	r3, [r3, #8]
10004cd6:	021b      	lsls	r3, r3, #8
10004cd8:	697a      	ldr	r2, [r7, #20]
10004cda:	4313      	orrs	r3, r2
10004cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
10004cde:	687b      	ldr	r3, [r7, #4]
10004ce0:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10004ce4:	d003      	beq.n	10004cee <TIM_OC3_SetConfig+0x6a>
10004ce6:	687b      	ldr	r3, [r7, #4]
10004ce8:	4a25      	ldr	r2, [pc, #148]	; (10004d80 <TIM_OC3_SetConfig+0xfc>)
10004cea:	4293      	cmp	r3, r2
10004cec:	d10d      	bne.n	10004d0a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
10004cee:	697b      	ldr	r3, [r7, #20]
10004cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
10004cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
10004cf6:	683b      	ldr	r3, [r7, #0]
10004cf8:	68db      	ldr	r3, [r3, #12]
10004cfa:	021b      	lsls	r3, r3, #8
10004cfc:	697a      	ldr	r2, [r7, #20]
10004cfe:	4313      	orrs	r3, r2
10004d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
10004d02:	697b      	ldr	r3, [r7, #20]
10004d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
10004d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
10004d0a:	687b      	ldr	r3, [r7, #4]
10004d0c:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10004d10:	d00f      	beq.n	10004d32 <TIM_OC3_SetConfig+0xae>
10004d12:	687b      	ldr	r3, [r7, #4]
10004d14:	4a1a      	ldr	r2, [pc, #104]	; (10004d80 <TIM_OC3_SetConfig+0xfc>)
10004d16:	4293      	cmp	r3, r2
10004d18:	d00b      	beq.n	10004d32 <TIM_OC3_SetConfig+0xae>
10004d1a:	687b      	ldr	r3, [r7, #4]
10004d1c:	4a19      	ldr	r2, [pc, #100]	; (10004d84 <TIM_OC3_SetConfig+0x100>)
10004d1e:	4293      	cmp	r3, r2
10004d20:	d007      	beq.n	10004d32 <TIM_OC3_SetConfig+0xae>
10004d22:	687b      	ldr	r3, [r7, #4]
10004d24:	4a18      	ldr	r2, [pc, #96]	; (10004d88 <TIM_OC3_SetConfig+0x104>)
10004d26:	4293      	cmp	r3, r2
10004d28:	d003      	beq.n	10004d32 <TIM_OC3_SetConfig+0xae>
10004d2a:	687b      	ldr	r3, [r7, #4]
10004d2c:	4a17      	ldr	r2, [pc, #92]	; (10004d8c <TIM_OC3_SetConfig+0x108>)
10004d2e:	4293      	cmp	r3, r2
10004d30:	d113      	bne.n	10004d5a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
10004d32:	693b      	ldr	r3, [r7, #16]
10004d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
10004d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
10004d3a:	693b      	ldr	r3, [r7, #16]
10004d3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
10004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
10004d42:	683b      	ldr	r3, [r7, #0]
10004d44:	695b      	ldr	r3, [r3, #20]
10004d46:	011b      	lsls	r3, r3, #4
10004d48:	693a      	ldr	r2, [r7, #16]
10004d4a:	4313      	orrs	r3, r2
10004d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
10004d4e:	683b      	ldr	r3, [r7, #0]
10004d50:	699b      	ldr	r3, [r3, #24]
10004d52:	011b      	lsls	r3, r3, #4
10004d54:	693a      	ldr	r2, [r7, #16]
10004d56:	4313      	orrs	r3, r2
10004d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
10004d5a:	687b      	ldr	r3, [r7, #4]
10004d5c:	693a      	ldr	r2, [r7, #16]
10004d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
10004d60:	687b      	ldr	r3, [r7, #4]
10004d62:	68fa      	ldr	r2, [r7, #12]
10004d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
10004d66:	683b      	ldr	r3, [r7, #0]
10004d68:	685a      	ldr	r2, [r3, #4]
10004d6a:	687b      	ldr	r3, [r7, #4]
10004d6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
10004d6e:	687b      	ldr	r3, [r7, #4]
10004d70:	697a      	ldr	r2, [r7, #20]
10004d72:	621a      	str	r2, [r3, #32]
}
10004d74:	bf00      	nop
10004d76:	371c      	adds	r7, #28
10004d78:	46bd      	mov	sp, r7
10004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
10004d7e:	4770      	bx	lr
10004d80:	44001000 	.word	0x44001000
10004d84:	44006000 	.word	0x44006000
10004d88:	44007000 	.word	0x44007000
10004d8c:	44008000 	.word	0x44008000

10004d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
10004d90:	b480      	push	{r7}
10004d92:	b087      	sub	sp, #28
10004d94:	af00      	add	r7, sp, #0
10004d96:	6078      	str	r0, [r7, #4]
10004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
10004d9a:	687b      	ldr	r3, [r7, #4]
10004d9c:	6a1b      	ldr	r3, [r3, #32]
10004d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
10004da2:	687b      	ldr	r3, [r7, #4]
10004da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10004da6:	687b      	ldr	r3, [r7, #4]
10004da8:	6a1b      	ldr	r3, [r3, #32]
10004daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
10004dac:	687b      	ldr	r3, [r7, #4]
10004dae:	685b      	ldr	r3, [r3, #4]
10004db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
10004db2:	687b      	ldr	r3, [r7, #4]
10004db4:	69db      	ldr	r3, [r3, #28]
10004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
10004db8:	68fb      	ldr	r3, [r7, #12]
10004dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
10004dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
10004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
10004dc4:	68fb      	ldr	r3, [r7, #12]
10004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10004dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
10004dcc:	683b      	ldr	r3, [r7, #0]
10004dce:	681b      	ldr	r3, [r3, #0]
10004dd0:	021b      	lsls	r3, r3, #8
10004dd2:	68fa      	ldr	r2, [r7, #12]
10004dd4:	4313      	orrs	r3, r2
10004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
10004dd8:	693b      	ldr	r3, [r7, #16]
10004dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
10004dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
10004de0:	683b      	ldr	r3, [r7, #0]
10004de2:	689b      	ldr	r3, [r3, #8]
10004de4:	031b      	lsls	r3, r3, #12
10004de6:	693a      	ldr	r2, [r7, #16]
10004de8:	4313      	orrs	r3, r2
10004dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
10004dec:	687b      	ldr	r3, [r7, #4]
10004dee:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10004df2:	d00f      	beq.n	10004e14 <TIM_OC4_SetConfig+0x84>
10004df4:	687b      	ldr	r3, [r7, #4]
10004df6:	4a16      	ldr	r2, [pc, #88]	; (10004e50 <TIM_OC4_SetConfig+0xc0>)
10004df8:	4293      	cmp	r3, r2
10004dfa:	d00b      	beq.n	10004e14 <TIM_OC4_SetConfig+0x84>
10004dfc:	687b      	ldr	r3, [r7, #4]
10004dfe:	4a15      	ldr	r2, [pc, #84]	; (10004e54 <TIM_OC4_SetConfig+0xc4>)
10004e00:	4293      	cmp	r3, r2
10004e02:	d007      	beq.n	10004e14 <TIM_OC4_SetConfig+0x84>
10004e04:	687b      	ldr	r3, [r7, #4]
10004e06:	4a14      	ldr	r2, [pc, #80]	; (10004e58 <TIM_OC4_SetConfig+0xc8>)
10004e08:	4293      	cmp	r3, r2
10004e0a:	d003      	beq.n	10004e14 <TIM_OC4_SetConfig+0x84>
10004e0c:	687b      	ldr	r3, [r7, #4]
10004e0e:	4a13      	ldr	r2, [pc, #76]	; (10004e5c <TIM_OC4_SetConfig+0xcc>)
10004e10:	4293      	cmp	r3, r2
10004e12:	d109      	bne.n	10004e28 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
10004e14:	697b      	ldr	r3, [r7, #20]
10004e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
10004e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
10004e1c:	683b      	ldr	r3, [r7, #0]
10004e1e:	695b      	ldr	r3, [r3, #20]
10004e20:	019b      	lsls	r3, r3, #6
10004e22:	697a      	ldr	r2, [r7, #20]
10004e24:	4313      	orrs	r3, r2
10004e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
10004e28:	687b      	ldr	r3, [r7, #4]
10004e2a:	697a      	ldr	r2, [r7, #20]
10004e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
10004e2e:	687b      	ldr	r3, [r7, #4]
10004e30:	68fa      	ldr	r2, [r7, #12]
10004e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
10004e34:	683b      	ldr	r3, [r7, #0]
10004e36:	685a      	ldr	r2, [r3, #4]
10004e38:	687b      	ldr	r3, [r7, #4]
10004e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
10004e3c:	687b      	ldr	r3, [r7, #4]
10004e3e:	693a      	ldr	r2, [r7, #16]
10004e40:	621a      	str	r2, [r3, #32]
}
10004e42:	bf00      	nop
10004e44:	371c      	adds	r7, #28
10004e46:	46bd      	mov	sp, r7
10004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
10004e4c:	4770      	bx	lr
10004e4e:	bf00      	nop
10004e50:	44001000 	.word	0x44001000
10004e54:	44006000 	.word	0x44006000
10004e58:	44007000 	.word	0x44007000
10004e5c:	44008000 	.word	0x44008000

10004e60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
10004e60:	b480      	push	{r7}
10004e62:	b087      	sub	sp, #28
10004e64:	af00      	add	r7, sp, #0
10004e66:	6078      	str	r0, [r7, #4]
10004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
10004e6a:	687b      	ldr	r3, [r7, #4]
10004e6c:	6a1b      	ldr	r3, [r3, #32]
10004e6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
10004e72:	687b      	ldr	r3, [r7, #4]
10004e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10004e76:	687b      	ldr	r3, [r7, #4]
10004e78:	6a1b      	ldr	r3, [r3, #32]
10004e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
10004e7c:	687b      	ldr	r3, [r7, #4]
10004e7e:	685b      	ldr	r3, [r3, #4]
10004e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
10004e82:	687b      	ldr	r3, [r7, #4]
10004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
10004e88:	68fb      	ldr	r3, [r7, #12]
10004e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10004e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10004e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
10004e94:	683b      	ldr	r3, [r7, #0]
10004e96:	681b      	ldr	r3, [r3, #0]
10004e98:	68fa      	ldr	r2, [r7, #12]
10004e9a:	4313      	orrs	r3, r2
10004e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
10004e9e:	693b      	ldr	r3, [r7, #16]
10004ea0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
10004ea4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
10004ea6:	683b      	ldr	r3, [r7, #0]
10004ea8:	689b      	ldr	r3, [r3, #8]
10004eaa:	041b      	lsls	r3, r3, #16
10004eac:	693a      	ldr	r2, [r7, #16]
10004eae:	4313      	orrs	r3, r2
10004eb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
10004eb2:	687b      	ldr	r3, [r7, #4]
10004eb4:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10004eb8:	d00f      	beq.n	10004eda <TIM_OC5_SetConfig+0x7a>
10004eba:	687b      	ldr	r3, [r7, #4]
10004ebc:	4a15      	ldr	r2, [pc, #84]	; (10004f14 <TIM_OC5_SetConfig+0xb4>)
10004ebe:	4293      	cmp	r3, r2
10004ec0:	d00b      	beq.n	10004eda <TIM_OC5_SetConfig+0x7a>
10004ec2:	687b      	ldr	r3, [r7, #4]
10004ec4:	4a14      	ldr	r2, [pc, #80]	; (10004f18 <TIM_OC5_SetConfig+0xb8>)
10004ec6:	4293      	cmp	r3, r2
10004ec8:	d007      	beq.n	10004eda <TIM_OC5_SetConfig+0x7a>
10004eca:	687b      	ldr	r3, [r7, #4]
10004ecc:	4a13      	ldr	r2, [pc, #76]	; (10004f1c <TIM_OC5_SetConfig+0xbc>)
10004ece:	4293      	cmp	r3, r2
10004ed0:	d003      	beq.n	10004eda <TIM_OC5_SetConfig+0x7a>
10004ed2:	687b      	ldr	r3, [r7, #4]
10004ed4:	4a12      	ldr	r2, [pc, #72]	; (10004f20 <TIM_OC5_SetConfig+0xc0>)
10004ed6:	4293      	cmp	r3, r2
10004ed8:	d109      	bne.n	10004eee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
10004eda:	697b      	ldr	r3, [r7, #20]
10004edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10004ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
10004ee2:	683b      	ldr	r3, [r7, #0]
10004ee4:	695b      	ldr	r3, [r3, #20]
10004ee6:	021b      	lsls	r3, r3, #8
10004ee8:	697a      	ldr	r2, [r7, #20]
10004eea:	4313      	orrs	r3, r2
10004eec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
10004eee:	687b      	ldr	r3, [r7, #4]
10004ef0:	697a      	ldr	r2, [r7, #20]
10004ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
10004ef4:	687b      	ldr	r3, [r7, #4]
10004ef6:	68fa      	ldr	r2, [r7, #12]
10004ef8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
10004efa:	683b      	ldr	r3, [r7, #0]
10004efc:	685a      	ldr	r2, [r3, #4]
10004efe:	687b      	ldr	r3, [r7, #4]
10004f00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
10004f02:	687b      	ldr	r3, [r7, #4]
10004f04:	693a      	ldr	r2, [r7, #16]
10004f06:	621a      	str	r2, [r3, #32]
}
10004f08:	bf00      	nop
10004f0a:	371c      	adds	r7, #28
10004f0c:	46bd      	mov	sp, r7
10004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
10004f12:	4770      	bx	lr
10004f14:	44001000 	.word	0x44001000
10004f18:	44006000 	.word	0x44006000
10004f1c:	44007000 	.word	0x44007000
10004f20:	44008000 	.word	0x44008000

10004f24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
10004f24:	b480      	push	{r7}
10004f26:	b087      	sub	sp, #28
10004f28:	af00      	add	r7, sp, #0
10004f2a:	6078      	str	r0, [r7, #4]
10004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
10004f2e:	687b      	ldr	r3, [r7, #4]
10004f30:	6a1b      	ldr	r3, [r3, #32]
10004f32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
10004f36:	687b      	ldr	r3, [r7, #4]
10004f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
10004f3a:	687b      	ldr	r3, [r7, #4]
10004f3c:	6a1b      	ldr	r3, [r3, #32]
10004f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
10004f40:	687b      	ldr	r3, [r7, #4]
10004f42:	685b      	ldr	r3, [r3, #4]
10004f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
10004f46:	687b      	ldr	r3, [r7, #4]
10004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
10004f4c:	68fb      	ldr	r3, [r7, #12]
10004f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
10004f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
10004f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
10004f58:	683b      	ldr	r3, [r7, #0]
10004f5a:	681b      	ldr	r3, [r3, #0]
10004f5c:	021b      	lsls	r3, r3, #8
10004f5e:	68fa      	ldr	r2, [r7, #12]
10004f60:	4313      	orrs	r3, r2
10004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
10004f64:	693b      	ldr	r3, [r7, #16]
10004f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
10004f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
10004f6c:	683b      	ldr	r3, [r7, #0]
10004f6e:	689b      	ldr	r3, [r3, #8]
10004f70:	051b      	lsls	r3, r3, #20
10004f72:	693a      	ldr	r2, [r7, #16]
10004f74:	4313      	orrs	r3, r2
10004f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
10004f78:	687b      	ldr	r3, [r7, #4]
10004f7a:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10004f7e:	d00f      	beq.n	10004fa0 <TIM_OC6_SetConfig+0x7c>
10004f80:	687b      	ldr	r3, [r7, #4]
10004f82:	4a16      	ldr	r2, [pc, #88]	; (10004fdc <TIM_OC6_SetConfig+0xb8>)
10004f84:	4293      	cmp	r3, r2
10004f86:	d00b      	beq.n	10004fa0 <TIM_OC6_SetConfig+0x7c>
10004f88:	687b      	ldr	r3, [r7, #4]
10004f8a:	4a15      	ldr	r2, [pc, #84]	; (10004fe0 <TIM_OC6_SetConfig+0xbc>)
10004f8c:	4293      	cmp	r3, r2
10004f8e:	d007      	beq.n	10004fa0 <TIM_OC6_SetConfig+0x7c>
10004f90:	687b      	ldr	r3, [r7, #4]
10004f92:	4a14      	ldr	r2, [pc, #80]	; (10004fe4 <TIM_OC6_SetConfig+0xc0>)
10004f94:	4293      	cmp	r3, r2
10004f96:	d003      	beq.n	10004fa0 <TIM_OC6_SetConfig+0x7c>
10004f98:	687b      	ldr	r3, [r7, #4]
10004f9a:	4a13      	ldr	r2, [pc, #76]	; (10004fe8 <TIM_OC6_SetConfig+0xc4>)
10004f9c:	4293      	cmp	r3, r2
10004f9e:	d109      	bne.n	10004fb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
10004fa0:	697b      	ldr	r3, [r7, #20]
10004fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
10004fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
10004fa8:	683b      	ldr	r3, [r7, #0]
10004faa:	695b      	ldr	r3, [r3, #20]
10004fac:	029b      	lsls	r3, r3, #10
10004fae:	697a      	ldr	r2, [r7, #20]
10004fb0:	4313      	orrs	r3, r2
10004fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
10004fb4:	687b      	ldr	r3, [r7, #4]
10004fb6:	697a      	ldr	r2, [r7, #20]
10004fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
10004fba:	687b      	ldr	r3, [r7, #4]
10004fbc:	68fa      	ldr	r2, [r7, #12]
10004fbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
10004fc0:	683b      	ldr	r3, [r7, #0]
10004fc2:	685a      	ldr	r2, [r3, #4]
10004fc4:	687b      	ldr	r3, [r7, #4]
10004fc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
10004fc8:	687b      	ldr	r3, [r7, #4]
10004fca:	693a      	ldr	r2, [r7, #16]
10004fcc:	621a      	str	r2, [r3, #32]
}
10004fce:	bf00      	nop
10004fd0:	371c      	adds	r7, #28
10004fd2:	46bd      	mov	sp, r7
10004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
10004fd8:	4770      	bx	lr
10004fda:	bf00      	nop
10004fdc:	44001000 	.word	0x44001000
10004fe0:	44006000 	.word	0x44006000
10004fe4:	44007000 	.word	0x44007000
10004fe8:	44008000 	.word	0x44008000

10004fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
10004fec:	b480      	push	{r7}
10004fee:	b087      	sub	sp, #28
10004ff0:	af00      	add	r7, sp, #0
10004ff2:	60f8      	str	r0, [r7, #12]
10004ff4:	60b9      	str	r1, [r7, #8]
10004ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
10004ff8:	68bb      	ldr	r3, [r7, #8]
10004ffa:	f003 031f 	and.w	r3, r3, #31
10004ffe:	2201      	movs	r2, #1
10005000:	fa02 f303 	lsl.w	r3, r2, r3
10005004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
10005006:	68fb      	ldr	r3, [r7, #12]
10005008:	6a1a      	ldr	r2, [r3, #32]
1000500a:	697b      	ldr	r3, [r7, #20]
1000500c:	43db      	mvns	r3, r3
1000500e:	401a      	ands	r2, r3
10005010:	68fb      	ldr	r3, [r7, #12]
10005012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
10005014:	68fb      	ldr	r3, [r7, #12]
10005016:	6a1a      	ldr	r2, [r3, #32]
10005018:	68bb      	ldr	r3, [r7, #8]
1000501a:	f003 031f 	and.w	r3, r3, #31
1000501e:	6879      	ldr	r1, [r7, #4]
10005020:	fa01 f303 	lsl.w	r3, r1, r3
10005024:	431a      	orrs	r2, r3
10005026:	68fb      	ldr	r3, [r7, #12]
10005028:	621a      	str	r2, [r3, #32]
}
1000502a:	bf00      	nop
1000502c:	371c      	adds	r7, #28
1000502e:	46bd      	mov	sp, r7
10005030:	f85d 7b04 	ldr.w	r7, [sp], #4
10005034:	4770      	bx	lr
	...

10005038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
10005038:	b480      	push	{r7}
1000503a:	b085      	sub	sp, #20
1000503c:	af00      	add	r7, sp, #0
1000503e:	6078      	str	r0, [r7, #4]
10005040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
10005042:	687b      	ldr	r3, [r7, #4]
10005044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
10005048:	2b01      	cmp	r3, #1
1000504a:	d101      	bne.n	10005050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
1000504c:	2302      	movs	r3, #2
1000504e:	e045      	b.n	100050dc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
10005050:	687b      	ldr	r3, [r7, #4]
10005052:	2201      	movs	r2, #1
10005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
10005058:	687b      	ldr	r3, [r7, #4]
1000505a:	2202      	movs	r2, #2
1000505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
10005060:	687b      	ldr	r3, [r7, #4]
10005062:	681b      	ldr	r3, [r3, #0]
10005064:	685b      	ldr	r3, [r3, #4]
10005066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
10005068:	687b      	ldr	r3, [r7, #4]
1000506a:	681b      	ldr	r3, [r3, #0]
1000506c:	689b      	ldr	r3, [r3, #8]
1000506e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
10005070:	687b      	ldr	r3, [r7, #4]
10005072:	681b      	ldr	r3, [r3, #0]
10005074:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10005078:	d004      	beq.n	10005084 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
1000507a:	687b      	ldr	r3, [r7, #4]
1000507c:	681b      	ldr	r3, [r3, #0]
1000507e:	4a1a      	ldr	r2, [pc, #104]	; (100050e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
10005080:	4293      	cmp	r3, r2
10005082:	d108      	bne.n	10005096 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
10005084:	68fb      	ldr	r3, [r7, #12]
10005086:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
1000508a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
1000508c:	683b      	ldr	r3, [r7, #0]
1000508e:	685b      	ldr	r3, [r3, #4]
10005090:	68fa      	ldr	r2, [r7, #12]
10005092:	4313      	orrs	r3, r2
10005094:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
10005096:	68fb      	ldr	r3, [r7, #12]
10005098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000509c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
1000509e:	683b      	ldr	r3, [r7, #0]
100050a0:	681b      	ldr	r3, [r3, #0]
100050a2:	68fa      	ldr	r2, [r7, #12]
100050a4:	4313      	orrs	r3, r2
100050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
100050a8:	68bb      	ldr	r3, [r7, #8]
100050aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
100050ae:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
100050b0:	683b      	ldr	r3, [r7, #0]
100050b2:	689b      	ldr	r3, [r3, #8]
100050b4:	68ba      	ldr	r2, [r7, #8]
100050b6:	4313      	orrs	r3, r2
100050b8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
100050ba:	687b      	ldr	r3, [r7, #4]
100050bc:	681b      	ldr	r3, [r3, #0]
100050be:	68fa      	ldr	r2, [r7, #12]
100050c0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
100050c2:	687b      	ldr	r3, [r7, #4]
100050c4:	681b      	ldr	r3, [r3, #0]
100050c6:	68ba      	ldr	r2, [r7, #8]
100050c8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
100050ca:	687b      	ldr	r3, [r7, #4]
100050cc:	2201      	movs	r2, #1
100050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
100050d2:	687b      	ldr	r3, [r7, #4]
100050d4:	2200      	movs	r2, #0
100050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
100050da:	2300      	movs	r3, #0
}
100050dc:	4618      	mov	r0, r3
100050de:	3714      	adds	r7, #20
100050e0:	46bd      	mov	sp, r7
100050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
100050e6:	4770      	bx	lr
100050e8:	44001000 	.word	0x44001000

100050ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
100050ec:	b580      	push	{r7, lr}
100050ee:	b082      	sub	sp, #8
100050f0:	af00      	add	r7, sp, #0
100050f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
100050f4:	687b      	ldr	r3, [r7, #4]
100050f6:	2b00      	cmp	r3, #0
100050f8:	d101      	bne.n	100050fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
100050fa:	2301      	movs	r3, #1
100050fc:	e042      	b.n	10005184 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100050fe:	687b      	ldr	r3, [r7, #4]
10005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10005104:	2b00      	cmp	r3, #0
10005106:	d106      	bne.n	10005116 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10005108:	687b      	ldr	r3, [r7, #4]
1000510a:	2200      	movs	r2, #0
1000510c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10005110:	6878      	ldr	r0, [r7, #4]
10005112:	f7fb f9d9 	bl	100004c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10005116:	687b      	ldr	r3, [r7, #4]
10005118:	2224      	movs	r2, #36	; 0x24
1000511a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
1000511e:	687b      	ldr	r3, [r7, #4]
10005120:	681b      	ldr	r3, [r3, #0]
10005122:	681a      	ldr	r2, [r3, #0]
10005124:	687b      	ldr	r3, [r7, #4]
10005126:	681b      	ldr	r3, [r3, #0]
10005128:	f022 0201 	bic.w	r2, r2, #1
1000512c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
1000512e:	6878      	ldr	r0, [r7, #4]
10005130:	f000 f8c4 	bl	100052bc <UART_SetConfig>
10005134:	4603      	mov	r3, r0
10005136:	2b01      	cmp	r3, #1
10005138:	d101      	bne.n	1000513e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
1000513a:	2301      	movs	r3, #1
1000513c:	e022      	b.n	10005184 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
1000513e:	687b      	ldr	r3, [r7, #4]
10005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005142:	2b00      	cmp	r3, #0
10005144:	d002      	beq.n	1000514c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
10005146:	6878      	ldr	r0, [r7, #4]
10005148:	f001 fa24 	bl	10006594 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1000514c:	687b      	ldr	r3, [r7, #4]
1000514e:	681b      	ldr	r3, [r3, #0]
10005150:	685a      	ldr	r2, [r3, #4]
10005152:	687b      	ldr	r3, [r7, #4]
10005154:	681b      	ldr	r3, [r3, #0]
10005156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
1000515a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1000515c:	687b      	ldr	r3, [r7, #4]
1000515e:	681b      	ldr	r3, [r3, #0]
10005160:	689a      	ldr	r2, [r3, #8]
10005162:	687b      	ldr	r3, [r7, #4]
10005164:	681b      	ldr	r3, [r3, #0]
10005166:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
1000516a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
1000516c:	687b      	ldr	r3, [r7, #4]
1000516e:	681b      	ldr	r3, [r3, #0]
10005170:	681a      	ldr	r2, [r3, #0]
10005172:	687b      	ldr	r3, [r7, #4]
10005174:	681b      	ldr	r3, [r3, #0]
10005176:	f042 0201 	orr.w	r2, r2, #1
1000517a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
1000517c:	6878      	ldr	r0, [r7, #4]
1000517e:	f001 faab 	bl	100066d8 <UART_CheckIdleState>
10005182:	4603      	mov	r3, r0
}
10005184:	4618      	mov	r0, r3
10005186:	3708      	adds	r7, #8
10005188:	46bd      	mov	sp, r7
1000518a:	bd80      	pop	{r7, pc}

1000518c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
1000518c:	b580      	push	{r7, lr}
1000518e:	b08a      	sub	sp, #40	; 0x28
10005190:	af02      	add	r7, sp, #8
10005192:	60f8      	str	r0, [r7, #12]
10005194:	60b9      	str	r1, [r7, #8]
10005196:	603b      	str	r3, [r7, #0]
10005198:	4613      	mov	r3, r2
1000519a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
1000519c:	68fb      	ldr	r3, [r7, #12]
1000519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100051a2:	2b20      	cmp	r3, #32
100051a4:	f040 8084 	bne.w	100052b0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
100051a8:	68bb      	ldr	r3, [r7, #8]
100051aa:	2b00      	cmp	r3, #0
100051ac:	d002      	beq.n	100051b4 <HAL_UART_Transmit+0x28>
100051ae:	88fb      	ldrh	r3, [r7, #6]
100051b0:	2b00      	cmp	r3, #0
100051b2:	d101      	bne.n	100051b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
100051b4:	2301      	movs	r3, #1
100051b6:	e07c      	b.n	100052b2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
100051b8:	68fb      	ldr	r3, [r7, #12]
100051ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
100051be:	2b01      	cmp	r3, #1
100051c0:	d101      	bne.n	100051c6 <HAL_UART_Transmit+0x3a>
100051c2:	2302      	movs	r3, #2
100051c4:	e075      	b.n	100052b2 <HAL_UART_Transmit+0x126>
100051c6:	68fb      	ldr	r3, [r7, #12]
100051c8:	2201      	movs	r2, #1
100051ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    huart->ErrorCode = HAL_UART_ERROR_NONE;
100051ce:	68fb      	ldr	r3, [r7, #12]
100051d0:	2200      	movs	r2, #0
100051d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
100051d6:	68fb      	ldr	r3, [r7, #12]
100051d8:	2221      	movs	r2, #33	; 0x21
100051da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
100051de:	f7fb fa55 	bl	1000068c <HAL_GetTick>
100051e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
100051e4:	68fb      	ldr	r3, [r7, #12]
100051e6:	88fa      	ldrh	r2, [r7, #6]
100051e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
100051ec:	68fb      	ldr	r3, [r7, #12]
100051ee:	88fa      	ldrh	r2, [r7, #6]
100051f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
100051f4:	68fb      	ldr	r3, [r7, #12]
100051f6:	689b      	ldr	r3, [r3, #8]
100051f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
100051fc:	d108      	bne.n	10005210 <HAL_UART_Transmit+0x84>
100051fe:	68fb      	ldr	r3, [r7, #12]
10005200:	691b      	ldr	r3, [r3, #16]
10005202:	2b00      	cmp	r3, #0
10005204:	d104      	bne.n	10005210 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
10005206:	2300      	movs	r3, #0
10005208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
1000520a:	68bb      	ldr	r3, [r7, #8]
1000520c:	61bb      	str	r3, [r7, #24]
1000520e:	e003      	b.n	10005218 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
10005210:	68bb      	ldr	r3, [r7, #8]
10005212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10005214:	2300      	movs	r3, #0
10005216:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
10005218:	68fb      	ldr	r3, [r7, #12]
1000521a:	2200      	movs	r2, #0
1000521c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    while (huart->TxXferCount > 0U)
10005220:	e02d      	b.n	1000527e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10005222:	683b      	ldr	r3, [r7, #0]
10005224:	9300      	str	r3, [sp, #0]
10005226:	697b      	ldr	r3, [r7, #20]
10005228:	2200      	movs	r2, #0
1000522a:	2180      	movs	r1, #128	; 0x80
1000522c:	68f8      	ldr	r0, [r7, #12]
1000522e:	f001 fa9b 	bl	10006768 <UART_WaitOnFlagUntilTimeout>
10005232:	4603      	mov	r3, r0
10005234:	2b00      	cmp	r3, #0
10005236:	d001      	beq.n	1000523c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
10005238:	2303      	movs	r3, #3
1000523a:	e03a      	b.n	100052b2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
1000523c:	69fb      	ldr	r3, [r7, #28]
1000523e:	2b00      	cmp	r3, #0
10005240:	d10b      	bne.n	1000525a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10005242:	69bb      	ldr	r3, [r7, #24]
10005244:	881a      	ldrh	r2, [r3, #0]
10005246:	68fb      	ldr	r3, [r7, #12]
10005248:	681b      	ldr	r3, [r3, #0]
1000524a:	f3c2 0208 	ubfx	r2, r2, #0, #9
1000524e:	b292      	uxth	r2, r2
10005250:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
10005252:	69bb      	ldr	r3, [r7, #24]
10005254:	3302      	adds	r3, #2
10005256:	61bb      	str	r3, [r7, #24]
10005258:	e008      	b.n	1000526c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
1000525a:	69fb      	ldr	r3, [r7, #28]
1000525c:	781a      	ldrb	r2, [r3, #0]
1000525e:	68fb      	ldr	r3, [r7, #12]
10005260:	681b      	ldr	r3, [r3, #0]
10005262:	b292      	uxth	r2, r2
10005264:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
10005266:	69fb      	ldr	r3, [r7, #28]
10005268:	3301      	adds	r3, #1
1000526a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
1000526c:	68fb      	ldr	r3, [r7, #12]
1000526e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10005272:	b29b      	uxth	r3, r3
10005274:	3b01      	subs	r3, #1
10005276:	b29a      	uxth	r2, r3
10005278:	68fb      	ldr	r3, [r7, #12]
1000527a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
1000527e:	68fb      	ldr	r3, [r7, #12]
10005280:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10005284:	b29b      	uxth	r3, r3
10005286:	2b00      	cmp	r3, #0
10005288:	d1cb      	bne.n	10005222 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
1000528a:	683b      	ldr	r3, [r7, #0]
1000528c:	9300      	str	r3, [sp, #0]
1000528e:	697b      	ldr	r3, [r7, #20]
10005290:	2200      	movs	r2, #0
10005292:	2140      	movs	r1, #64	; 0x40
10005294:	68f8      	ldr	r0, [r7, #12]
10005296:	f001 fa67 	bl	10006768 <UART_WaitOnFlagUntilTimeout>
1000529a:	4603      	mov	r3, r0
1000529c:	2b00      	cmp	r3, #0
1000529e:	d001      	beq.n	100052a4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
100052a0:	2303      	movs	r3, #3
100052a2:	e006      	b.n	100052b2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
100052a4:	68fb      	ldr	r3, [r7, #12]
100052a6:	2220      	movs	r2, #32
100052a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
100052ac:	2300      	movs	r3, #0
100052ae:	e000      	b.n	100052b2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
100052b0:	2302      	movs	r3, #2
  }
}
100052b2:	4618      	mov	r0, r3
100052b4:	3720      	adds	r7, #32
100052b6:	46bd      	mov	sp, r7
100052b8:	bd80      	pop	{r7, pc}
	...

100052bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
100052bc:	b580      	push	{r7, lr}
100052be:	b08e      	sub	sp, #56	; 0x38
100052c0:	af00      	add	r7, sp, #0
100052c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
100052c4:	2300      	movs	r3, #0
100052c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
100052c8:	2300      	movs	r3, #0
100052ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
100052ce:	687b      	ldr	r3, [r7, #4]
100052d0:	689a      	ldr	r2, [r3, #8]
100052d2:	687b      	ldr	r3, [r7, #4]
100052d4:	691b      	ldr	r3, [r3, #16]
100052d6:	431a      	orrs	r2, r3
100052d8:	687b      	ldr	r3, [r7, #4]
100052da:	695b      	ldr	r3, [r3, #20]
100052dc:	431a      	orrs	r2, r3
100052de:	687b      	ldr	r3, [r7, #4]
100052e0:	69db      	ldr	r3, [r3, #28]
100052e2:	4313      	orrs	r3, r2
100052e4:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
100052e6:	687b      	ldr	r3, [r7, #4]
100052e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100052ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
100052ec:	4313      	orrs	r3, r2
100052ee:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
100052f0:	687b      	ldr	r3, [r7, #4]
100052f2:	681b      	ldr	r3, [r3, #0]
100052f4:	681a      	ldr	r2, [r3, #0]
100052f6:	4bb7      	ldr	r3, [pc, #732]	; (100055d4 <UART_SetConfig+0x318>)
100052f8:	4013      	ands	r3, r2
100052fa:	687a      	ldr	r2, [r7, #4]
100052fc:	6812      	ldr	r2, [r2, #0]
100052fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10005300:	430b      	orrs	r3, r1
10005302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10005304:	687b      	ldr	r3, [r7, #4]
10005306:	681b      	ldr	r3, [r3, #0]
10005308:	685b      	ldr	r3, [r3, #4]
1000530a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
1000530e:	687b      	ldr	r3, [r7, #4]
10005310:	68da      	ldr	r2, [r3, #12]
10005312:	687b      	ldr	r3, [r7, #4]
10005314:	681b      	ldr	r3, [r3, #0]
10005316:	430a      	orrs	r2, r1
10005318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
1000531a:	687b      	ldr	r3, [r7, #4]
1000531c:	699b      	ldr	r3, [r3, #24]
1000531e:	62bb      	str	r3, [r7, #40]	; 0x28

  tmpreg |= huart->Init.OneBitSampling;
10005320:	687b      	ldr	r3, [r7, #4]
10005322:	6a1b      	ldr	r3, [r3, #32]
10005324:	6aba      	ldr	r2, [r7, #40]	; 0x28
10005326:	4313      	orrs	r3, r2
10005328:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
1000532a:	687b      	ldr	r3, [r7, #4]
1000532c:	681b      	ldr	r3, [r3, #0]
1000532e:	689b      	ldr	r3, [r3, #8]
10005330:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
10005334:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
10005338:	687a      	ldr	r2, [r7, #4]
1000533a:	6812      	ldr	r2, [r2, #0]
1000533c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1000533e:	430b      	orrs	r3, r1
10005340:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10005342:	687b      	ldr	r3, [r7, #4]
10005344:	681b      	ldr	r3, [r3, #0]
10005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10005348:	f023 010f 	bic.w	r1, r3, #15
1000534c:	687b      	ldr	r3, [r7, #4]
1000534e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10005350:	687b      	ldr	r3, [r7, #4]
10005352:	681b      	ldr	r3, [r3, #0]
10005354:	430a      	orrs	r2, r1
10005356:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
10005358:	687b      	ldr	r3, [r7, #4]
1000535a:	681b      	ldr	r3, [r3, #0]
1000535c:	f1b3 4fb8 	cmp.w	r3, #1543503872	; 0x5c000000
10005360:	d133      	bne.n	100053ca <UART_SetConfig+0x10e>
10005362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005366:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
1000536a:	f003 0307 	and.w	r3, r3, #7
1000536e:	2b05      	cmp	r3, #5
10005370:	d826      	bhi.n	100053c0 <UART_SetConfig+0x104>
10005372:	a201      	add	r2, pc, #4	; (adr r2, 10005378 <UART_SetConfig+0xbc>)
10005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005378:	10005391 	.word	0x10005391
1000537c:	10005399 	.word	0x10005399
10005380:	100053a1 	.word	0x100053a1
10005384:	100053a9 	.word	0x100053a9
10005388:	100053b1 	.word	0x100053b1
1000538c:	100053b9 	.word	0x100053b9
10005390:	2302      	movs	r3, #2
10005392:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005396:	e193      	b.n	100056c0 <UART_SetConfig+0x404>
10005398:	2304      	movs	r3, #4
1000539a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000539e:	e18f      	b.n	100056c0 <UART_SetConfig+0x404>
100053a0:	2310      	movs	r3, #16
100053a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100053a6:	e18b      	b.n	100056c0 <UART_SetConfig+0x404>
100053a8:	2320      	movs	r3, #32
100053aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100053ae:	e187      	b.n	100056c0 <UART_SetConfig+0x404>
100053b0:	2308      	movs	r3, #8
100053b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100053b6:	e183      	b.n	100056c0 <UART_SetConfig+0x404>
100053b8:	2340      	movs	r3, #64	; 0x40
100053ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100053be:	e17f      	b.n	100056c0 <UART_SetConfig+0x404>
100053c0:	2380      	movs	r3, #128	; 0x80
100053c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100053c6:	bf00      	nop
100053c8:	e17a      	b.n	100056c0 <UART_SetConfig+0x404>
100053ca:	687b      	ldr	r3, [r7, #4]
100053cc:	681b      	ldr	r3, [r3, #0]
100053ce:	4a82      	ldr	r2, [pc, #520]	; (100055d8 <UART_SetConfig+0x31c>)
100053d0:	4293      	cmp	r3, r2
100053d2:	d12e      	bne.n	10005432 <UART_SetConfig+0x176>
100053d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053d8:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
100053dc:	f003 0307 	and.w	r3, r3, #7
100053e0:	2b04      	cmp	r3, #4
100053e2:	d821      	bhi.n	10005428 <UART_SetConfig+0x16c>
100053e4:	a201      	add	r2, pc, #4	; (adr r2, 100053ec <UART_SetConfig+0x130>)
100053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100053ea:	bf00      	nop
100053ec:	10005401 	.word	0x10005401
100053f0:	10005409 	.word	0x10005409
100053f4:	10005411 	.word	0x10005411
100053f8:	10005419 	.word	0x10005419
100053fc:	10005421 	.word	0x10005421
10005400:	2300      	movs	r3, #0
10005402:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005406:	e15b      	b.n	100056c0 <UART_SetConfig+0x404>
10005408:	2308      	movs	r3, #8
1000540a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000540e:	e157      	b.n	100056c0 <UART_SetConfig+0x404>
10005410:	2310      	movs	r3, #16
10005412:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005416:	e153      	b.n	100056c0 <UART_SetConfig+0x404>
10005418:	2320      	movs	r3, #32
1000541a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000541e:	e14f      	b.n	100056c0 <UART_SetConfig+0x404>
10005420:	2340      	movs	r3, #64	; 0x40
10005422:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005426:	e14b      	b.n	100056c0 <UART_SetConfig+0x404>
10005428:	2380      	movs	r3, #128	; 0x80
1000542a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000542e:	bf00      	nop
10005430:	e146      	b.n	100056c0 <UART_SetConfig+0x404>
10005432:	687b      	ldr	r3, [r7, #4]
10005434:	681b      	ldr	r3, [r3, #0]
10005436:	4a69      	ldr	r2, [pc, #420]	; (100055dc <UART_SetConfig+0x320>)
10005438:	4293      	cmp	r3, r2
1000543a:	d12e      	bne.n	1000549a <UART_SetConfig+0x1de>
1000543c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005440:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10005444:	f003 0307 	and.w	r3, r3, #7
10005448:	2b04      	cmp	r3, #4
1000544a:	d821      	bhi.n	10005490 <UART_SetConfig+0x1d4>
1000544c:	a201      	add	r2, pc, #4	; (adr r2, 10005454 <UART_SetConfig+0x198>)
1000544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005452:	bf00      	nop
10005454:	10005469 	.word	0x10005469
10005458:	10005471 	.word	0x10005471
1000545c:	10005479 	.word	0x10005479
10005460:	10005481 	.word	0x10005481
10005464:	10005489 	.word	0x10005489
10005468:	2300      	movs	r3, #0
1000546a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000546e:	e127      	b.n	100056c0 <UART_SetConfig+0x404>
10005470:	2308      	movs	r3, #8
10005472:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005476:	e123      	b.n	100056c0 <UART_SetConfig+0x404>
10005478:	2310      	movs	r3, #16
1000547a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000547e:	e11f      	b.n	100056c0 <UART_SetConfig+0x404>
10005480:	2320      	movs	r3, #32
10005482:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005486:	e11b      	b.n	100056c0 <UART_SetConfig+0x404>
10005488:	2340      	movs	r3, #64	; 0x40
1000548a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000548e:	e117      	b.n	100056c0 <UART_SetConfig+0x404>
10005490:	2380      	movs	r3, #128	; 0x80
10005492:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005496:	bf00      	nop
10005498:	e112      	b.n	100056c0 <UART_SetConfig+0x404>
1000549a:	687b      	ldr	r3, [r7, #4]
1000549c:	681b      	ldr	r3, [r3, #0]
1000549e:	4a50      	ldr	r2, [pc, #320]	; (100055e0 <UART_SetConfig+0x324>)
100054a0:	4293      	cmp	r3, r2
100054a2:	d12e      	bne.n	10005502 <UART_SetConfig+0x246>
100054a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054a8:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
100054ac:	f003 0307 	and.w	r3, r3, #7
100054b0:	2b04      	cmp	r3, #4
100054b2:	d821      	bhi.n	100054f8 <UART_SetConfig+0x23c>
100054b4:	a201      	add	r2, pc, #4	; (adr r2, 100054bc <UART_SetConfig+0x200>)
100054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100054ba:	bf00      	nop
100054bc:	100054d1 	.word	0x100054d1
100054c0:	100054d9 	.word	0x100054d9
100054c4:	100054e1 	.word	0x100054e1
100054c8:	100054e9 	.word	0x100054e9
100054cc:	100054f1 	.word	0x100054f1
100054d0:	2300      	movs	r3, #0
100054d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100054d6:	e0f3      	b.n	100056c0 <UART_SetConfig+0x404>
100054d8:	2308      	movs	r3, #8
100054da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100054de:	e0ef      	b.n	100056c0 <UART_SetConfig+0x404>
100054e0:	2310      	movs	r3, #16
100054e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100054e6:	e0eb      	b.n	100056c0 <UART_SetConfig+0x404>
100054e8:	2320      	movs	r3, #32
100054ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100054ee:	e0e7      	b.n	100056c0 <UART_SetConfig+0x404>
100054f0:	2340      	movs	r3, #64	; 0x40
100054f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100054f6:	e0e3      	b.n	100056c0 <UART_SetConfig+0x404>
100054f8:	2380      	movs	r3, #128	; 0x80
100054fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100054fe:	bf00      	nop
10005500:	e0de      	b.n	100056c0 <UART_SetConfig+0x404>
10005502:	687b      	ldr	r3, [r7, #4]
10005504:	681b      	ldr	r3, [r3, #0]
10005506:	4a37      	ldr	r2, [pc, #220]	; (100055e4 <UART_SetConfig+0x328>)
10005508:	4293      	cmp	r3, r2
1000550a:	d12e      	bne.n	1000556a <UART_SetConfig+0x2ae>
1000550c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005510:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10005514:	f003 0307 	and.w	r3, r3, #7
10005518:	2b04      	cmp	r3, #4
1000551a:	d821      	bhi.n	10005560 <UART_SetConfig+0x2a4>
1000551c:	a201      	add	r2, pc, #4	; (adr r2, 10005524 <UART_SetConfig+0x268>)
1000551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005522:	bf00      	nop
10005524:	10005539 	.word	0x10005539
10005528:	10005541 	.word	0x10005541
1000552c:	10005549 	.word	0x10005549
10005530:	10005551 	.word	0x10005551
10005534:	10005559 	.word	0x10005559
10005538:	2300      	movs	r3, #0
1000553a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000553e:	e0bf      	b.n	100056c0 <UART_SetConfig+0x404>
10005540:	2308      	movs	r3, #8
10005542:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005546:	e0bb      	b.n	100056c0 <UART_SetConfig+0x404>
10005548:	2310      	movs	r3, #16
1000554a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000554e:	e0b7      	b.n	100056c0 <UART_SetConfig+0x404>
10005550:	2320      	movs	r3, #32
10005552:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005556:	e0b3      	b.n	100056c0 <UART_SetConfig+0x404>
10005558:	2340      	movs	r3, #64	; 0x40
1000555a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000555e:	e0af      	b.n	100056c0 <UART_SetConfig+0x404>
10005560:	2380      	movs	r3, #128	; 0x80
10005562:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005566:	bf00      	nop
10005568:	e0aa      	b.n	100056c0 <UART_SetConfig+0x404>
1000556a:	687b      	ldr	r3, [r7, #4]
1000556c:	681b      	ldr	r3, [r3, #0]
1000556e:	4a1e      	ldr	r2, [pc, #120]	; (100055e8 <UART_SetConfig+0x32c>)
10005570:	4293      	cmp	r3, r2
10005572:	d13b      	bne.n	100055ec <UART_SetConfig+0x330>
10005574:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005578:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
1000557c:	f003 0307 	and.w	r3, r3, #7
10005580:	2b04      	cmp	r3, #4
10005582:	d821      	bhi.n	100055c8 <UART_SetConfig+0x30c>
10005584:	a201      	add	r2, pc, #4	; (adr r2, 1000558c <UART_SetConfig+0x2d0>)
10005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000558a:	bf00      	nop
1000558c:	100055a1 	.word	0x100055a1
10005590:	100055a9 	.word	0x100055a9
10005594:	100055b1 	.word	0x100055b1
10005598:	100055b9 	.word	0x100055b9
1000559c:	100055c1 	.word	0x100055c1
100055a0:	2301      	movs	r3, #1
100055a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100055a6:	e08b      	b.n	100056c0 <UART_SetConfig+0x404>
100055a8:	2308      	movs	r3, #8
100055aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100055ae:	e087      	b.n	100056c0 <UART_SetConfig+0x404>
100055b0:	2310      	movs	r3, #16
100055b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100055b6:	e083      	b.n	100056c0 <UART_SetConfig+0x404>
100055b8:	2320      	movs	r3, #32
100055ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100055be:	e07f      	b.n	100056c0 <UART_SetConfig+0x404>
100055c0:	2340      	movs	r3, #64	; 0x40
100055c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100055c6:	e07b      	b.n	100056c0 <UART_SetConfig+0x404>
100055c8:	2380      	movs	r3, #128	; 0x80
100055ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100055ce:	bf00      	nop
100055d0:	e076      	b.n	100056c0 <UART_SetConfig+0x404>
100055d2:	bf00      	nop
100055d4:	cfff69f3 	.word	0xcfff69f3
100055d8:	4000e000 	.word	0x4000e000
100055dc:	4000f000 	.word	0x4000f000
100055e0:	40010000 	.word	0x40010000
100055e4:	40011000 	.word	0x40011000
100055e8:	44003000 	.word	0x44003000
100055ec:	687b      	ldr	r3, [r7, #4]
100055ee:	681b      	ldr	r3, [r3, #0]
100055f0:	4aa9      	ldr	r2, [pc, #676]	; (10005898 <UART_SetConfig+0x5dc>)
100055f2:	4293      	cmp	r3, r2
100055f4:	d12d      	bne.n	10005652 <UART_SetConfig+0x396>
100055f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055fa:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100055fe:	f003 0307 	and.w	r3, r3, #7
10005602:	2b04      	cmp	r3, #4
10005604:	d820      	bhi.n	10005648 <UART_SetConfig+0x38c>
10005606:	a201      	add	r2, pc, #4	; (adr r2, 1000560c <UART_SetConfig+0x350>)
10005608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000560c:	10005621 	.word	0x10005621
10005610:	10005629 	.word	0x10005629
10005614:	10005631 	.word	0x10005631
10005618:	10005639 	.word	0x10005639
1000561c:	10005641 	.word	0x10005641
10005620:	2300      	movs	r3, #0
10005622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005626:	e04b      	b.n	100056c0 <UART_SetConfig+0x404>
10005628:	2308      	movs	r3, #8
1000562a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000562e:	e047      	b.n	100056c0 <UART_SetConfig+0x404>
10005630:	2310      	movs	r3, #16
10005632:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005636:	e043      	b.n	100056c0 <UART_SetConfig+0x404>
10005638:	2320      	movs	r3, #32
1000563a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000563e:	e03f      	b.n	100056c0 <UART_SetConfig+0x404>
10005640:	2340      	movs	r3, #64	; 0x40
10005642:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005646:	e03b      	b.n	100056c0 <UART_SetConfig+0x404>
10005648:	2380      	movs	r3, #128	; 0x80
1000564a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000564e:	bf00      	nop
10005650:	e036      	b.n	100056c0 <UART_SetConfig+0x404>
10005652:	687b      	ldr	r3, [r7, #4]
10005654:	681b      	ldr	r3, [r3, #0]
10005656:	4a91      	ldr	r2, [pc, #580]	; (1000589c <UART_SetConfig+0x5e0>)
10005658:	4293      	cmp	r3, r2
1000565a:	d12e      	bne.n	100056ba <UART_SetConfig+0x3fe>
1000565c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005660:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10005664:	f003 0307 	and.w	r3, r3, #7
10005668:	2b04      	cmp	r3, #4
1000566a:	d821      	bhi.n	100056b0 <UART_SetConfig+0x3f4>
1000566c:	a201      	add	r2, pc, #4	; (adr r2, 10005674 <UART_SetConfig+0x3b8>)
1000566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005672:	bf00      	nop
10005674:	10005689 	.word	0x10005689
10005678:	10005691 	.word	0x10005691
1000567c:	10005699 	.word	0x10005699
10005680:	100056a1 	.word	0x100056a1
10005684:	100056a9 	.word	0x100056a9
10005688:	2300      	movs	r3, #0
1000568a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000568e:	e017      	b.n	100056c0 <UART_SetConfig+0x404>
10005690:	2308      	movs	r3, #8
10005692:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005696:	e013      	b.n	100056c0 <UART_SetConfig+0x404>
10005698:	2310      	movs	r3, #16
1000569a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000569e:	e00f      	b.n	100056c0 <UART_SetConfig+0x404>
100056a0:	2320      	movs	r3, #32
100056a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100056a6:	e00b      	b.n	100056c0 <UART_SetConfig+0x404>
100056a8:	2340      	movs	r3, #64	; 0x40
100056aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100056ae:	e007      	b.n	100056c0 <UART_SetConfig+0x404>
100056b0:	2380      	movs	r3, #128	; 0x80
100056b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100056b6:	bf00      	nop
100056b8:	e002      	b.n	100056c0 <UART_SetConfig+0x404>
100056ba:	2380      	movs	r3, #128	; 0x80
100056bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
100056c0:	687b      	ldr	r3, [r7, #4]
100056c2:	69db      	ldr	r3, [r3, #28]
100056c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
100056c8:	f040 83b4 	bne.w	10005e34 <UART_SetConfig+0xb78>
  {
    switch (clocksource)
100056cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
100056d0:	2b40      	cmp	r3, #64	; 0x40
100056d2:	f200 8357 	bhi.w	10005d84 <UART_SetConfig+0xac8>
100056d6:	a201      	add	r2, pc, #4	; (adr r2, 100056dc <UART_SetConfig+0x420>)
100056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100056dc:	100057e1 	.word	0x100057e1
100056e0:	100058a1 	.word	0x100058a1
100056e4:	10005959 	.word	0x10005959
100056e8:	10005d85 	.word	0x10005d85
100056ec:	10005a11 	.word	0x10005a11
100056f0:	10005d85 	.word	0x10005d85
100056f4:	10005d85 	.word	0x10005d85
100056f8:	10005d85 	.word	0x10005d85
100056fc:	10005acd 	.word	0x10005acd
10005700:	10005d85 	.word	0x10005d85
10005704:	10005d85 	.word	0x10005d85
10005708:	10005d85 	.word	0x10005d85
1000570c:	10005d85 	.word	0x10005d85
10005710:	10005d85 	.word	0x10005d85
10005714:	10005d85 	.word	0x10005d85
10005718:	10005d85 	.word	0x10005d85
1000571c:	10005b89 	.word	0x10005b89
10005720:	10005d85 	.word	0x10005d85
10005724:	10005d85 	.word	0x10005d85
10005728:	10005d85 	.word	0x10005d85
1000572c:	10005d85 	.word	0x10005d85
10005730:	10005d85 	.word	0x10005d85
10005734:	10005d85 	.word	0x10005d85
10005738:	10005d85 	.word	0x10005d85
1000573c:	10005d85 	.word	0x10005d85
10005740:	10005d85 	.word	0x10005d85
10005744:	10005d85 	.word	0x10005d85
10005748:	10005d85 	.word	0x10005d85
1000574c:	10005d85 	.word	0x10005d85
10005750:	10005d85 	.word	0x10005d85
10005754:	10005d85 	.word	0x10005d85
10005758:	10005d85 	.word	0x10005d85
1000575c:	10005c31 	.word	0x10005c31
10005760:	10005d85 	.word	0x10005d85
10005764:	10005d85 	.word	0x10005d85
10005768:	10005d85 	.word	0x10005d85
1000576c:	10005d85 	.word	0x10005d85
10005770:	10005d85 	.word	0x10005d85
10005774:	10005d85 	.word	0x10005d85
10005778:	10005d85 	.word	0x10005d85
1000577c:	10005d85 	.word	0x10005d85
10005780:	10005d85 	.word	0x10005d85
10005784:	10005d85 	.word	0x10005d85
10005788:	10005d85 	.word	0x10005d85
1000578c:	10005d85 	.word	0x10005d85
10005790:	10005d85 	.word	0x10005d85
10005794:	10005d85 	.word	0x10005d85
10005798:	10005d85 	.word	0x10005d85
1000579c:	10005d85 	.word	0x10005d85
100057a0:	10005d85 	.word	0x10005d85
100057a4:	10005d85 	.word	0x10005d85
100057a8:	10005d85 	.word	0x10005d85
100057ac:	10005d85 	.word	0x10005d85
100057b0:	10005d85 	.word	0x10005d85
100057b4:	10005d85 	.word	0x10005d85
100057b8:	10005d85 	.word	0x10005d85
100057bc:	10005d85 	.word	0x10005d85
100057c0:	10005d85 	.word	0x10005d85
100057c4:	10005d85 	.word	0x10005d85
100057c8:	10005d85 	.word	0x10005d85
100057cc:	10005d85 	.word	0x10005d85
100057d0:	10005d85 	.word	0x10005d85
100057d4:	10005d85 	.word	0x10005d85
100057d8:	10005d85 	.word	0x10005d85
100057dc:	10005cdd 	.word	0x10005cdd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
100057e0:	f7fc fd58 	bl	10002294 <HAL_RCC_GetPCLK1Freq>
100057e4:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100057e6:	687b      	ldr	r3, [r7, #4]
100057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057ea:	2b00      	cmp	r3, #0
100057ec:	d044      	beq.n	10005878 <UART_SetConfig+0x5bc>
100057ee:	687b      	ldr	r3, [r7, #4]
100057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057f2:	2b01      	cmp	r3, #1
100057f4:	d03e      	beq.n	10005874 <UART_SetConfig+0x5b8>
100057f6:	687b      	ldr	r3, [r7, #4]
100057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057fa:	2b02      	cmp	r3, #2
100057fc:	d038      	beq.n	10005870 <UART_SetConfig+0x5b4>
100057fe:	687b      	ldr	r3, [r7, #4]
10005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005802:	2b03      	cmp	r3, #3
10005804:	d032      	beq.n	1000586c <UART_SetConfig+0x5b0>
10005806:	687b      	ldr	r3, [r7, #4]
10005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000580a:	2b04      	cmp	r3, #4
1000580c:	d02c      	beq.n	10005868 <UART_SetConfig+0x5ac>
1000580e:	687b      	ldr	r3, [r7, #4]
10005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005812:	2b05      	cmp	r3, #5
10005814:	d026      	beq.n	10005864 <UART_SetConfig+0x5a8>
10005816:	687b      	ldr	r3, [r7, #4]
10005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000581a:	2b06      	cmp	r3, #6
1000581c:	d020      	beq.n	10005860 <UART_SetConfig+0x5a4>
1000581e:	687b      	ldr	r3, [r7, #4]
10005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005822:	2b07      	cmp	r3, #7
10005824:	d01a      	beq.n	1000585c <UART_SetConfig+0x5a0>
10005826:	687b      	ldr	r3, [r7, #4]
10005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000582a:	2b08      	cmp	r3, #8
1000582c:	d014      	beq.n	10005858 <UART_SetConfig+0x59c>
1000582e:	687b      	ldr	r3, [r7, #4]
10005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005832:	2b09      	cmp	r3, #9
10005834:	d00e      	beq.n	10005854 <UART_SetConfig+0x598>
10005836:	687b      	ldr	r3, [r7, #4]
10005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000583a:	2b0a      	cmp	r3, #10
1000583c:	d008      	beq.n	10005850 <UART_SetConfig+0x594>
1000583e:	687b      	ldr	r3, [r7, #4]
10005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005842:	2b0b      	cmp	r3, #11
10005844:	d102      	bne.n	1000584c <UART_SetConfig+0x590>
10005846:	f44f 7380 	mov.w	r3, #256	; 0x100
1000584a:	e016      	b.n	1000587a <UART_SetConfig+0x5be>
1000584c:	2301      	movs	r3, #1
1000584e:	e014      	b.n	1000587a <UART_SetConfig+0x5be>
10005850:	2380      	movs	r3, #128	; 0x80
10005852:	e012      	b.n	1000587a <UART_SetConfig+0x5be>
10005854:	2340      	movs	r3, #64	; 0x40
10005856:	e010      	b.n	1000587a <UART_SetConfig+0x5be>
10005858:	2320      	movs	r3, #32
1000585a:	e00e      	b.n	1000587a <UART_SetConfig+0x5be>
1000585c:	2310      	movs	r3, #16
1000585e:	e00c      	b.n	1000587a <UART_SetConfig+0x5be>
10005860:	230c      	movs	r3, #12
10005862:	e00a      	b.n	1000587a <UART_SetConfig+0x5be>
10005864:	230a      	movs	r3, #10
10005866:	e008      	b.n	1000587a <UART_SetConfig+0x5be>
10005868:	2308      	movs	r3, #8
1000586a:	e006      	b.n	1000587a <UART_SetConfig+0x5be>
1000586c:	2306      	movs	r3, #6
1000586e:	e004      	b.n	1000587a <UART_SetConfig+0x5be>
10005870:	2304      	movs	r3, #4
10005872:	e002      	b.n	1000587a <UART_SetConfig+0x5be>
10005874:	2302      	movs	r3, #2
10005876:	e000      	b.n	1000587a <UART_SetConfig+0x5be>
10005878:	2301      	movs	r3, #1
1000587a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000587c:	fbb2 f3f3 	udiv	r3, r2, r3
10005880:	005a      	lsls	r2, r3, #1
10005882:	687b      	ldr	r3, [r7, #4]
10005884:	685b      	ldr	r3, [r3, #4]
10005886:	085b      	lsrs	r3, r3, #1
10005888:	441a      	add	r2, r3
1000588a:	687b      	ldr	r3, [r7, #4]
1000588c:	685b      	ldr	r3, [r3, #4]
1000588e:	fbb2 f3f3 	udiv	r3, r2, r3
10005892:	b29b      	uxth	r3, r3
10005894:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005896:	e279      	b.n	10005d8c <UART_SetConfig+0xad0>
10005898:	40018000 	.word	0x40018000
1000589c:	40019000 	.word	0x40019000
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
100058a0:	f7fc fd13 	bl	100022ca <HAL_RCC_GetPCLK2Freq>
100058a4:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100058a6:	687b      	ldr	r3, [r7, #4]
100058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058aa:	2b00      	cmp	r3, #0
100058ac:	d044      	beq.n	10005938 <UART_SetConfig+0x67c>
100058ae:	687b      	ldr	r3, [r7, #4]
100058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058b2:	2b01      	cmp	r3, #1
100058b4:	d03e      	beq.n	10005934 <UART_SetConfig+0x678>
100058b6:	687b      	ldr	r3, [r7, #4]
100058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058ba:	2b02      	cmp	r3, #2
100058bc:	d038      	beq.n	10005930 <UART_SetConfig+0x674>
100058be:	687b      	ldr	r3, [r7, #4]
100058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058c2:	2b03      	cmp	r3, #3
100058c4:	d032      	beq.n	1000592c <UART_SetConfig+0x670>
100058c6:	687b      	ldr	r3, [r7, #4]
100058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058ca:	2b04      	cmp	r3, #4
100058cc:	d02c      	beq.n	10005928 <UART_SetConfig+0x66c>
100058ce:	687b      	ldr	r3, [r7, #4]
100058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058d2:	2b05      	cmp	r3, #5
100058d4:	d026      	beq.n	10005924 <UART_SetConfig+0x668>
100058d6:	687b      	ldr	r3, [r7, #4]
100058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058da:	2b06      	cmp	r3, #6
100058dc:	d020      	beq.n	10005920 <UART_SetConfig+0x664>
100058de:	687b      	ldr	r3, [r7, #4]
100058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058e2:	2b07      	cmp	r3, #7
100058e4:	d01a      	beq.n	1000591c <UART_SetConfig+0x660>
100058e6:	687b      	ldr	r3, [r7, #4]
100058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058ea:	2b08      	cmp	r3, #8
100058ec:	d014      	beq.n	10005918 <UART_SetConfig+0x65c>
100058ee:	687b      	ldr	r3, [r7, #4]
100058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058f2:	2b09      	cmp	r3, #9
100058f4:	d00e      	beq.n	10005914 <UART_SetConfig+0x658>
100058f6:	687b      	ldr	r3, [r7, #4]
100058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058fa:	2b0a      	cmp	r3, #10
100058fc:	d008      	beq.n	10005910 <UART_SetConfig+0x654>
100058fe:	687b      	ldr	r3, [r7, #4]
10005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005902:	2b0b      	cmp	r3, #11
10005904:	d102      	bne.n	1000590c <UART_SetConfig+0x650>
10005906:	f44f 7380 	mov.w	r3, #256	; 0x100
1000590a:	e016      	b.n	1000593a <UART_SetConfig+0x67e>
1000590c:	2301      	movs	r3, #1
1000590e:	e014      	b.n	1000593a <UART_SetConfig+0x67e>
10005910:	2380      	movs	r3, #128	; 0x80
10005912:	e012      	b.n	1000593a <UART_SetConfig+0x67e>
10005914:	2340      	movs	r3, #64	; 0x40
10005916:	e010      	b.n	1000593a <UART_SetConfig+0x67e>
10005918:	2320      	movs	r3, #32
1000591a:	e00e      	b.n	1000593a <UART_SetConfig+0x67e>
1000591c:	2310      	movs	r3, #16
1000591e:	e00c      	b.n	1000593a <UART_SetConfig+0x67e>
10005920:	230c      	movs	r3, #12
10005922:	e00a      	b.n	1000593a <UART_SetConfig+0x67e>
10005924:	230a      	movs	r3, #10
10005926:	e008      	b.n	1000593a <UART_SetConfig+0x67e>
10005928:	2308      	movs	r3, #8
1000592a:	e006      	b.n	1000593a <UART_SetConfig+0x67e>
1000592c:	2306      	movs	r3, #6
1000592e:	e004      	b.n	1000593a <UART_SetConfig+0x67e>
10005930:	2304      	movs	r3, #4
10005932:	e002      	b.n	1000593a <UART_SetConfig+0x67e>
10005934:	2302      	movs	r3, #2
10005936:	e000      	b.n	1000593a <UART_SetConfig+0x67e>
10005938:	2301      	movs	r3, #1
1000593a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000593c:	fbb2 f3f3 	udiv	r3, r2, r3
10005940:	005a      	lsls	r2, r3, #1
10005942:	687b      	ldr	r3, [r7, #4]
10005944:	685b      	ldr	r3, [r3, #4]
10005946:	085b      	lsrs	r3, r3, #1
10005948:	441a      	add	r2, r3
1000594a:	687b      	ldr	r3, [r7, #4]
1000594c:	685b      	ldr	r3, [r3, #4]
1000594e:	fbb2 f3f3 	udiv	r3, r2, r3
10005952:	b29b      	uxth	r3, r3
10005954:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005956:	e219      	b.n	10005d8c <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10005958:	f7fc fcd2 	bl	10002300 <HAL_RCC_GetPCLK5Freq>
1000595c:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000595e:	687b      	ldr	r3, [r7, #4]
10005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005962:	2b00      	cmp	r3, #0
10005964:	d044      	beq.n	100059f0 <UART_SetConfig+0x734>
10005966:	687b      	ldr	r3, [r7, #4]
10005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000596a:	2b01      	cmp	r3, #1
1000596c:	d03e      	beq.n	100059ec <UART_SetConfig+0x730>
1000596e:	687b      	ldr	r3, [r7, #4]
10005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005972:	2b02      	cmp	r3, #2
10005974:	d038      	beq.n	100059e8 <UART_SetConfig+0x72c>
10005976:	687b      	ldr	r3, [r7, #4]
10005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000597a:	2b03      	cmp	r3, #3
1000597c:	d032      	beq.n	100059e4 <UART_SetConfig+0x728>
1000597e:	687b      	ldr	r3, [r7, #4]
10005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005982:	2b04      	cmp	r3, #4
10005984:	d02c      	beq.n	100059e0 <UART_SetConfig+0x724>
10005986:	687b      	ldr	r3, [r7, #4]
10005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000598a:	2b05      	cmp	r3, #5
1000598c:	d026      	beq.n	100059dc <UART_SetConfig+0x720>
1000598e:	687b      	ldr	r3, [r7, #4]
10005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005992:	2b06      	cmp	r3, #6
10005994:	d020      	beq.n	100059d8 <UART_SetConfig+0x71c>
10005996:	687b      	ldr	r3, [r7, #4]
10005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000599a:	2b07      	cmp	r3, #7
1000599c:	d01a      	beq.n	100059d4 <UART_SetConfig+0x718>
1000599e:	687b      	ldr	r3, [r7, #4]
100059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059a2:	2b08      	cmp	r3, #8
100059a4:	d014      	beq.n	100059d0 <UART_SetConfig+0x714>
100059a6:	687b      	ldr	r3, [r7, #4]
100059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059aa:	2b09      	cmp	r3, #9
100059ac:	d00e      	beq.n	100059cc <UART_SetConfig+0x710>
100059ae:	687b      	ldr	r3, [r7, #4]
100059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059b2:	2b0a      	cmp	r3, #10
100059b4:	d008      	beq.n	100059c8 <UART_SetConfig+0x70c>
100059b6:	687b      	ldr	r3, [r7, #4]
100059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059ba:	2b0b      	cmp	r3, #11
100059bc:	d102      	bne.n	100059c4 <UART_SetConfig+0x708>
100059be:	f44f 7380 	mov.w	r3, #256	; 0x100
100059c2:	e016      	b.n	100059f2 <UART_SetConfig+0x736>
100059c4:	2301      	movs	r3, #1
100059c6:	e014      	b.n	100059f2 <UART_SetConfig+0x736>
100059c8:	2380      	movs	r3, #128	; 0x80
100059ca:	e012      	b.n	100059f2 <UART_SetConfig+0x736>
100059cc:	2340      	movs	r3, #64	; 0x40
100059ce:	e010      	b.n	100059f2 <UART_SetConfig+0x736>
100059d0:	2320      	movs	r3, #32
100059d2:	e00e      	b.n	100059f2 <UART_SetConfig+0x736>
100059d4:	2310      	movs	r3, #16
100059d6:	e00c      	b.n	100059f2 <UART_SetConfig+0x736>
100059d8:	230c      	movs	r3, #12
100059da:	e00a      	b.n	100059f2 <UART_SetConfig+0x736>
100059dc:	230a      	movs	r3, #10
100059de:	e008      	b.n	100059f2 <UART_SetConfig+0x736>
100059e0:	2308      	movs	r3, #8
100059e2:	e006      	b.n	100059f2 <UART_SetConfig+0x736>
100059e4:	2306      	movs	r3, #6
100059e6:	e004      	b.n	100059f2 <UART_SetConfig+0x736>
100059e8:	2304      	movs	r3, #4
100059ea:	e002      	b.n	100059f2 <UART_SetConfig+0x736>
100059ec:	2302      	movs	r3, #2
100059ee:	e000      	b.n	100059f2 <UART_SetConfig+0x736>
100059f0:	2301      	movs	r3, #1
100059f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100059f4:	fbb2 f3f3 	udiv	r3, r2, r3
100059f8:	005a      	lsls	r2, r3, #1
100059fa:	687b      	ldr	r3, [r7, #4]
100059fc:	685b      	ldr	r3, [r3, #4]
100059fe:	085b      	lsrs	r3, r3, #1
10005a00:	441a      	add	r2, r3
10005a02:	687b      	ldr	r3, [r7, #4]
10005a04:	685b      	ldr	r3, [r3, #4]
10005a06:	fbb2 f3f3 	udiv	r3, r2, r3
10005a0a:	b29b      	uxth	r3, r3
10005a0c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005a0e:	e1bd      	b.n	10005d8c <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10005a10:	f107 0314 	add.w	r3, r7, #20
10005a14:	4618      	mov	r0, r3
10005a16:	f7fc fa3b 	bl	10001e90 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005a1a:	69ba      	ldr	r2, [r7, #24]
10005a1c:	687b      	ldr	r3, [r7, #4]
10005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a20:	2b00      	cmp	r3, #0
10005a22:	d044      	beq.n	10005aae <UART_SetConfig+0x7f2>
10005a24:	687b      	ldr	r3, [r7, #4]
10005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a28:	2b01      	cmp	r3, #1
10005a2a:	d03e      	beq.n	10005aaa <UART_SetConfig+0x7ee>
10005a2c:	687b      	ldr	r3, [r7, #4]
10005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a30:	2b02      	cmp	r3, #2
10005a32:	d038      	beq.n	10005aa6 <UART_SetConfig+0x7ea>
10005a34:	687b      	ldr	r3, [r7, #4]
10005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a38:	2b03      	cmp	r3, #3
10005a3a:	d032      	beq.n	10005aa2 <UART_SetConfig+0x7e6>
10005a3c:	687b      	ldr	r3, [r7, #4]
10005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a40:	2b04      	cmp	r3, #4
10005a42:	d02c      	beq.n	10005a9e <UART_SetConfig+0x7e2>
10005a44:	687b      	ldr	r3, [r7, #4]
10005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a48:	2b05      	cmp	r3, #5
10005a4a:	d026      	beq.n	10005a9a <UART_SetConfig+0x7de>
10005a4c:	687b      	ldr	r3, [r7, #4]
10005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a50:	2b06      	cmp	r3, #6
10005a52:	d020      	beq.n	10005a96 <UART_SetConfig+0x7da>
10005a54:	687b      	ldr	r3, [r7, #4]
10005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a58:	2b07      	cmp	r3, #7
10005a5a:	d01a      	beq.n	10005a92 <UART_SetConfig+0x7d6>
10005a5c:	687b      	ldr	r3, [r7, #4]
10005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a60:	2b08      	cmp	r3, #8
10005a62:	d014      	beq.n	10005a8e <UART_SetConfig+0x7d2>
10005a64:	687b      	ldr	r3, [r7, #4]
10005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a68:	2b09      	cmp	r3, #9
10005a6a:	d00e      	beq.n	10005a8a <UART_SetConfig+0x7ce>
10005a6c:	687b      	ldr	r3, [r7, #4]
10005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a70:	2b0a      	cmp	r3, #10
10005a72:	d008      	beq.n	10005a86 <UART_SetConfig+0x7ca>
10005a74:	687b      	ldr	r3, [r7, #4]
10005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a78:	2b0b      	cmp	r3, #11
10005a7a:	d102      	bne.n	10005a82 <UART_SetConfig+0x7c6>
10005a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
10005a80:	e016      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005a82:	2301      	movs	r3, #1
10005a84:	e014      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005a86:	2380      	movs	r3, #128	; 0x80
10005a88:	e012      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005a8a:	2340      	movs	r3, #64	; 0x40
10005a8c:	e010      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005a8e:	2320      	movs	r3, #32
10005a90:	e00e      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005a92:	2310      	movs	r3, #16
10005a94:	e00c      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005a96:	230c      	movs	r3, #12
10005a98:	e00a      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005a9a:	230a      	movs	r3, #10
10005a9c:	e008      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005a9e:	2308      	movs	r3, #8
10005aa0:	e006      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005aa2:	2306      	movs	r3, #6
10005aa4:	e004      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005aa6:	2304      	movs	r3, #4
10005aa8:	e002      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005aaa:	2302      	movs	r3, #2
10005aac:	e000      	b.n	10005ab0 <UART_SetConfig+0x7f4>
10005aae:	2301      	movs	r3, #1
10005ab0:	fbb2 f3f3 	udiv	r3, r2, r3
10005ab4:	005a      	lsls	r2, r3, #1
10005ab6:	687b      	ldr	r3, [r7, #4]
10005ab8:	685b      	ldr	r3, [r3, #4]
10005aba:	085b      	lsrs	r3, r3, #1
10005abc:	441a      	add	r2, r3
10005abe:	687b      	ldr	r3, [r7, #4]
10005ac0:	685b      	ldr	r3, [r3, #4]
10005ac2:	fbb2 f3f3 	udiv	r3, r2, r3
10005ac6:	b29b      	uxth	r3, r3
10005ac8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005aca:	e15f      	b.n	10005d8c <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10005acc:	f107 0308 	add.w	r3, r7, #8
10005ad0:	4618      	mov	r0, r3
10005ad2:	f7fc fad7 	bl	10002084 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005ad6:	68fa      	ldr	r2, [r7, #12]
10005ad8:	687b      	ldr	r3, [r7, #4]
10005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005adc:	2b00      	cmp	r3, #0
10005ade:	d044      	beq.n	10005b6a <UART_SetConfig+0x8ae>
10005ae0:	687b      	ldr	r3, [r7, #4]
10005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005ae4:	2b01      	cmp	r3, #1
10005ae6:	d03e      	beq.n	10005b66 <UART_SetConfig+0x8aa>
10005ae8:	687b      	ldr	r3, [r7, #4]
10005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005aec:	2b02      	cmp	r3, #2
10005aee:	d038      	beq.n	10005b62 <UART_SetConfig+0x8a6>
10005af0:	687b      	ldr	r3, [r7, #4]
10005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005af4:	2b03      	cmp	r3, #3
10005af6:	d032      	beq.n	10005b5e <UART_SetConfig+0x8a2>
10005af8:	687b      	ldr	r3, [r7, #4]
10005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005afc:	2b04      	cmp	r3, #4
10005afe:	d02c      	beq.n	10005b5a <UART_SetConfig+0x89e>
10005b00:	687b      	ldr	r3, [r7, #4]
10005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b04:	2b05      	cmp	r3, #5
10005b06:	d026      	beq.n	10005b56 <UART_SetConfig+0x89a>
10005b08:	687b      	ldr	r3, [r7, #4]
10005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b0c:	2b06      	cmp	r3, #6
10005b0e:	d020      	beq.n	10005b52 <UART_SetConfig+0x896>
10005b10:	687b      	ldr	r3, [r7, #4]
10005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b14:	2b07      	cmp	r3, #7
10005b16:	d01a      	beq.n	10005b4e <UART_SetConfig+0x892>
10005b18:	687b      	ldr	r3, [r7, #4]
10005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b1c:	2b08      	cmp	r3, #8
10005b1e:	d014      	beq.n	10005b4a <UART_SetConfig+0x88e>
10005b20:	687b      	ldr	r3, [r7, #4]
10005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b24:	2b09      	cmp	r3, #9
10005b26:	d00e      	beq.n	10005b46 <UART_SetConfig+0x88a>
10005b28:	687b      	ldr	r3, [r7, #4]
10005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b2c:	2b0a      	cmp	r3, #10
10005b2e:	d008      	beq.n	10005b42 <UART_SetConfig+0x886>
10005b30:	687b      	ldr	r3, [r7, #4]
10005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b34:	2b0b      	cmp	r3, #11
10005b36:	d102      	bne.n	10005b3e <UART_SetConfig+0x882>
10005b38:	f44f 7380 	mov.w	r3, #256	; 0x100
10005b3c:	e016      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b3e:	2301      	movs	r3, #1
10005b40:	e014      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b42:	2380      	movs	r3, #128	; 0x80
10005b44:	e012      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b46:	2340      	movs	r3, #64	; 0x40
10005b48:	e010      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b4a:	2320      	movs	r3, #32
10005b4c:	e00e      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b4e:	2310      	movs	r3, #16
10005b50:	e00c      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b52:	230c      	movs	r3, #12
10005b54:	e00a      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b56:	230a      	movs	r3, #10
10005b58:	e008      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b5a:	2308      	movs	r3, #8
10005b5c:	e006      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b5e:	2306      	movs	r3, #6
10005b60:	e004      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b62:	2304      	movs	r3, #4
10005b64:	e002      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b66:	2302      	movs	r3, #2
10005b68:	e000      	b.n	10005b6c <UART_SetConfig+0x8b0>
10005b6a:	2301      	movs	r3, #1
10005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
10005b70:	005a      	lsls	r2, r3, #1
10005b72:	687b      	ldr	r3, [r7, #4]
10005b74:	685b      	ldr	r3, [r3, #4]
10005b76:	085b      	lsrs	r3, r3, #1
10005b78:	441a      	add	r2, r3
10005b7a:	687b      	ldr	r3, [r7, #4]
10005b7c:	685b      	ldr	r3, [r3, #4]
10005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
10005b82:	b29b      	uxth	r3, r3
10005b84:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005b86:	e101      	b.n	10005d8c <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005b88:	687b      	ldr	r3, [r7, #4]
10005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b8c:	2b00      	cmp	r3, #0
10005b8e:	d043      	beq.n	10005c18 <UART_SetConfig+0x95c>
10005b90:	687b      	ldr	r3, [r7, #4]
10005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b94:	2b01      	cmp	r3, #1
10005b96:	d03d      	beq.n	10005c14 <UART_SetConfig+0x958>
10005b98:	687b      	ldr	r3, [r7, #4]
10005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b9c:	2b02      	cmp	r3, #2
10005b9e:	d037      	beq.n	10005c10 <UART_SetConfig+0x954>
10005ba0:	687b      	ldr	r3, [r7, #4]
10005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005ba4:	2b03      	cmp	r3, #3
10005ba6:	d031      	beq.n	10005c0c <UART_SetConfig+0x950>
10005ba8:	687b      	ldr	r3, [r7, #4]
10005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bac:	2b04      	cmp	r3, #4
10005bae:	d02b      	beq.n	10005c08 <UART_SetConfig+0x94c>
10005bb0:	687b      	ldr	r3, [r7, #4]
10005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bb4:	2b05      	cmp	r3, #5
10005bb6:	d025      	beq.n	10005c04 <UART_SetConfig+0x948>
10005bb8:	687b      	ldr	r3, [r7, #4]
10005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bbc:	2b06      	cmp	r3, #6
10005bbe:	d01f      	beq.n	10005c00 <UART_SetConfig+0x944>
10005bc0:	687b      	ldr	r3, [r7, #4]
10005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bc4:	2b07      	cmp	r3, #7
10005bc6:	d019      	beq.n	10005bfc <UART_SetConfig+0x940>
10005bc8:	687b      	ldr	r3, [r7, #4]
10005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bcc:	2b08      	cmp	r3, #8
10005bce:	d013      	beq.n	10005bf8 <UART_SetConfig+0x93c>
10005bd0:	687b      	ldr	r3, [r7, #4]
10005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bd4:	2b09      	cmp	r3, #9
10005bd6:	d00d      	beq.n	10005bf4 <UART_SetConfig+0x938>
10005bd8:	687b      	ldr	r3, [r7, #4]
10005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bdc:	2b0a      	cmp	r3, #10
10005bde:	d007      	beq.n	10005bf0 <UART_SetConfig+0x934>
10005be0:	687b      	ldr	r3, [r7, #4]
10005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005be4:	2b0b      	cmp	r3, #11
10005be6:	d101      	bne.n	10005bec <UART_SetConfig+0x930>
10005be8:	4b77      	ldr	r3, [pc, #476]	; (10005dc8 <UART_SetConfig+0xb0c>)
10005bea:	e016      	b.n	10005c1a <UART_SetConfig+0x95e>
10005bec:	4b77      	ldr	r3, [pc, #476]	; (10005dcc <UART_SetConfig+0xb10>)
10005bee:	e014      	b.n	10005c1a <UART_SetConfig+0x95e>
10005bf0:	4b77      	ldr	r3, [pc, #476]	; (10005dd0 <UART_SetConfig+0xb14>)
10005bf2:	e012      	b.n	10005c1a <UART_SetConfig+0x95e>
10005bf4:	4b77      	ldr	r3, [pc, #476]	; (10005dd4 <UART_SetConfig+0xb18>)
10005bf6:	e010      	b.n	10005c1a <UART_SetConfig+0x95e>
10005bf8:	4b77      	ldr	r3, [pc, #476]	; (10005dd8 <UART_SetConfig+0xb1c>)
10005bfa:	e00e      	b.n	10005c1a <UART_SetConfig+0x95e>
10005bfc:	4b77      	ldr	r3, [pc, #476]	; (10005ddc <UART_SetConfig+0xb20>)
10005bfe:	e00c      	b.n	10005c1a <UART_SetConfig+0x95e>
10005c00:	4b77      	ldr	r3, [pc, #476]	; (10005de0 <UART_SetConfig+0xb24>)
10005c02:	e00a      	b.n	10005c1a <UART_SetConfig+0x95e>
10005c04:	4b77      	ldr	r3, [pc, #476]	; (10005de4 <UART_SetConfig+0xb28>)
10005c06:	e008      	b.n	10005c1a <UART_SetConfig+0x95e>
10005c08:	4b77      	ldr	r3, [pc, #476]	; (10005de8 <UART_SetConfig+0xb2c>)
10005c0a:	e006      	b.n	10005c1a <UART_SetConfig+0x95e>
10005c0c:	4b77      	ldr	r3, [pc, #476]	; (10005dec <UART_SetConfig+0xb30>)
10005c0e:	e004      	b.n	10005c1a <UART_SetConfig+0x95e>
10005c10:	4b77      	ldr	r3, [pc, #476]	; (10005df0 <UART_SetConfig+0xb34>)
10005c12:	e002      	b.n	10005c1a <UART_SetConfig+0x95e>
10005c14:	4b77      	ldr	r3, [pc, #476]	; (10005df4 <UART_SetConfig+0xb38>)
10005c16:	e000      	b.n	10005c1a <UART_SetConfig+0x95e>
10005c18:	4b6c      	ldr	r3, [pc, #432]	; (10005dcc <UART_SetConfig+0xb10>)
10005c1a:	687a      	ldr	r2, [r7, #4]
10005c1c:	6852      	ldr	r2, [r2, #4]
10005c1e:	0852      	lsrs	r2, r2, #1
10005c20:	441a      	add	r2, r3
10005c22:	687b      	ldr	r3, [r7, #4]
10005c24:	685b      	ldr	r3, [r3, #4]
10005c26:	fbb2 f3f3 	udiv	r3, r2, r3
10005c2a:	b29b      	uxth	r3, r3
10005c2c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005c2e:	e0ad      	b.n	10005d8c <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005c30:	687b      	ldr	r3, [r7, #4]
10005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c34:	2b00      	cmp	r3, #0
10005c36:	d045      	beq.n	10005cc4 <UART_SetConfig+0xa08>
10005c38:	687b      	ldr	r3, [r7, #4]
10005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c3c:	2b01      	cmp	r3, #1
10005c3e:	d03f      	beq.n	10005cc0 <UART_SetConfig+0xa04>
10005c40:	687b      	ldr	r3, [r7, #4]
10005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c44:	2b02      	cmp	r3, #2
10005c46:	d039      	beq.n	10005cbc <UART_SetConfig+0xa00>
10005c48:	687b      	ldr	r3, [r7, #4]
10005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c4c:	2b03      	cmp	r3, #3
10005c4e:	d033      	beq.n	10005cb8 <UART_SetConfig+0x9fc>
10005c50:	687b      	ldr	r3, [r7, #4]
10005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c54:	2b04      	cmp	r3, #4
10005c56:	d02d      	beq.n	10005cb4 <UART_SetConfig+0x9f8>
10005c58:	687b      	ldr	r3, [r7, #4]
10005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c5c:	2b05      	cmp	r3, #5
10005c5e:	d027      	beq.n	10005cb0 <UART_SetConfig+0x9f4>
10005c60:	687b      	ldr	r3, [r7, #4]
10005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c64:	2b06      	cmp	r3, #6
10005c66:	d021      	beq.n	10005cac <UART_SetConfig+0x9f0>
10005c68:	687b      	ldr	r3, [r7, #4]
10005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c6c:	2b07      	cmp	r3, #7
10005c6e:	d01b      	beq.n	10005ca8 <UART_SetConfig+0x9ec>
10005c70:	687b      	ldr	r3, [r7, #4]
10005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c74:	2b08      	cmp	r3, #8
10005c76:	d015      	beq.n	10005ca4 <UART_SetConfig+0x9e8>
10005c78:	687b      	ldr	r3, [r7, #4]
10005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c7c:	2b09      	cmp	r3, #9
10005c7e:	d00f      	beq.n	10005ca0 <UART_SetConfig+0x9e4>
10005c80:	687b      	ldr	r3, [r7, #4]
10005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c84:	2b0a      	cmp	r3, #10
10005c86:	d008      	beq.n	10005c9a <UART_SetConfig+0x9de>
10005c88:	687b      	ldr	r3, [r7, #4]
10005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c8c:	2b0b      	cmp	r3, #11
10005c8e:	d102      	bne.n	10005c96 <UART_SetConfig+0x9da>
10005c90:	f647 2312 	movw	r3, #31250	; 0x7a12
10005c94:	e017      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005c96:	4b51      	ldr	r3, [pc, #324]	; (10005ddc <UART_SetConfig+0xb20>)
10005c98:	e015      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005c9a:	f24f 4324 	movw	r3, #62500	; 0xf424
10005c9e:	e012      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005ca0:	4b55      	ldr	r3, [pc, #340]	; (10005df8 <UART_SetConfig+0xb3c>)
10005ca2:	e010      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005ca4:	4b55      	ldr	r3, [pc, #340]	; (10005dfc <UART_SetConfig+0xb40>)
10005ca6:	e00e      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005ca8:	4b47      	ldr	r3, [pc, #284]	; (10005dc8 <UART_SetConfig+0xb0c>)
10005caa:	e00c      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005cac:	4b54      	ldr	r3, [pc, #336]	; (10005e00 <UART_SetConfig+0xb44>)
10005cae:	e00a      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005cb0:	4b54      	ldr	r3, [pc, #336]	; (10005e04 <UART_SetConfig+0xb48>)
10005cb2:	e008      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005cb4:	4b46      	ldr	r3, [pc, #280]	; (10005dd0 <UART_SetConfig+0xb14>)
10005cb6:	e006      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005cb8:	4b53      	ldr	r3, [pc, #332]	; (10005e08 <UART_SetConfig+0xb4c>)
10005cba:	e004      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005cbc:	4b45      	ldr	r3, [pc, #276]	; (10005dd4 <UART_SetConfig+0xb18>)
10005cbe:	e002      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005cc0:	4b45      	ldr	r3, [pc, #276]	; (10005dd8 <UART_SetConfig+0xb1c>)
10005cc2:	e000      	b.n	10005cc6 <UART_SetConfig+0xa0a>
10005cc4:	4b45      	ldr	r3, [pc, #276]	; (10005ddc <UART_SetConfig+0xb20>)
10005cc6:	687a      	ldr	r2, [r7, #4]
10005cc8:	6852      	ldr	r2, [r2, #4]
10005cca:	0852      	lsrs	r2, r2, #1
10005ccc:	441a      	add	r2, r3
10005cce:	687b      	ldr	r3, [r7, #4]
10005cd0:	685b      	ldr	r3, [r3, #4]
10005cd2:	fbb2 f3f3 	udiv	r3, r2, r3
10005cd6:	b29b      	uxth	r3, r3
10005cd8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005cda:	e057      	b.n	10005d8c <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005cdc:	687b      	ldr	r3, [r7, #4]
10005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005ce0:	2b00      	cmp	r3, #0
10005ce2:	d043      	beq.n	10005d6c <UART_SetConfig+0xab0>
10005ce4:	687b      	ldr	r3, [r7, #4]
10005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005ce8:	2b01      	cmp	r3, #1
10005cea:	d03d      	beq.n	10005d68 <UART_SetConfig+0xaac>
10005cec:	687b      	ldr	r3, [r7, #4]
10005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005cf0:	2b02      	cmp	r3, #2
10005cf2:	d037      	beq.n	10005d64 <UART_SetConfig+0xaa8>
10005cf4:	687b      	ldr	r3, [r7, #4]
10005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005cf8:	2b03      	cmp	r3, #3
10005cfa:	d031      	beq.n	10005d60 <UART_SetConfig+0xaa4>
10005cfc:	687b      	ldr	r3, [r7, #4]
10005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d00:	2b04      	cmp	r3, #4
10005d02:	d02b      	beq.n	10005d5c <UART_SetConfig+0xaa0>
10005d04:	687b      	ldr	r3, [r7, #4]
10005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d08:	2b05      	cmp	r3, #5
10005d0a:	d025      	beq.n	10005d58 <UART_SetConfig+0xa9c>
10005d0c:	687b      	ldr	r3, [r7, #4]
10005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d10:	2b06      	cmp	r3, #6
10005d12:	d01f      	beq.n	10005d54 <UART_SetConfig+0xa98>
10005d14:	687b      	ldr	r3, [r7, #4]
10005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d18:	2b07      	cmp	r3, #7
10005d1a:	d019      	beq.n	10005d50 <UART_SetConfig+0xa94>
10005d1c:	687b      	ldr	r3, [r7, #4]
10005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d20:	2b08      	cmp	r3, #8
10005d22:	d013      	beq.n	10005d4c <UART_SetConfig+0xa90>
10005d24:	687b      	ldr	r3, [r7, #4]
10005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d28:	2b09      	cmp	r3, #9
10005d2a:	d00d      	beq.n	10005d48 <UART_SetConfig+0xa8c>
10005d2c:	687b      	ldr	r3, [r7, #4]
10005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d30:	2b0a      	cmp	r3, #10
10005d32:	d007      	beq.n	10005d44 <UART_SetConfig+0xa88>
10005d34:	687b      	ldr	r3, [r7, #4]
10005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d38:	2b0b      	cmp	r3, #11
10005d3a:	d101      	bne.n	10005d40 <UART_SetConfig+0xa84>
10005d3c:	4b33      	ldr	r3, [pc, #204]	; (10005e0c <UART_SetConfig+0xb50>)
10005d3e:	e016      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d40:	4b33      	ldr	r3, [pc, #204]	; (10005e10 <UART_SetConfig+0xb54>)
10005d42:	e014      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d44:	4b33      	ldr	r3, [pc, #204]	; (10005e14 <UART_SetConfig+0xb58>)
10005d46:	e012      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d48:	4b33      	ldr	r3, [pc, #204]	; (10005e18 <UART_SetConfig+0xb5c>)
10005d4a:	e010      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d4c:	4b33      	ldr	r3, [pc, #204]	; (10005e1c <UART_SetConfig+0xb60>)
10005d4e:	e00e      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d50:	4b33      	ldr	r3, [pc, #204]	; (10005e20 <UART_SetConfig+0xb64>)
10005d52:	e00c      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d54:	4b20      	ldr	r3, [pc, #128]	; (10005dd8 <UART_SetConfig+0xb1c>)
10005d56:	e00a      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d58:	4b32      	ldr	r3, [pc, #200]	; (10005e24 <UART_SetConfig+0xb68>)
10005d5a:	e008      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d5c:	4b32      	ldr	r3, [pc, #200]	; (10005e28 <UART_SetConfig+0xb6c>)
10005d5e:	e006      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d60:	4b1e      	ldr	r3, [pc, #120]	; (10005ddc <UART_SetConfig+0xb20>)
10005d62:	e004      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d64:	4b31      	ldr	r3, [pc, #196]	; (10005e2c <UART_SetConfig+0xb70>)
10005d66:	e002      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d68:	4b31      	ldr	r3, [pc, #196]	; (10005e30 <UART_SetConfig+0xb74>)
10005d6a:	e000      	b.n	10005d6e <UART_SetConfig+0xab2>
10005d6c:	4b28      	ldr	r3, [pc, #160]	; (10005e10 <UART_SetConfig+0xb54>)
10005d6e:	687a      	ldr	r2, [r7, #4]
10005d70:	6852      	ldr	r2, [r2, #4]
10005d72:	0852      	lsrs	r2, r2, #1
10005d74:	441a      	add	r2, r3
10005d76:	687b      	ldr	r3, [r7, #4]
10005d78:	685b      	ldr	r3, [r3, #4]
10005d7a:	fbb2 f3f3 	udiv	r3, r2, r3
10005d7e:	b29b      	uxth	r3, r3
10005d80:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005d82:	e003      	b.n	10005d8c <UART_SetConfig+0xad0>
      default:
        ret = HAL_ERROR;
10005d84:	2301      	movs	r3, #1
10005d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
10005d8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005d8e:	2b0f      	cmp	r3, #15
10005d90:	d916      	bls.n	10005dc0 <UART_SetConfig+0xb04>
10005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10005d98:	d212      	bcs.n	10005dc0 <UART_SetConfig+0xb04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005d9c:	b29b      	uxth	r3, r3
10005d9e:	f023 030f 	bic.w	r3, r3, #15
10005da2:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005da6:	085b      	lsrs	r3, r3, #1
10005da8:	b29b      	uxth	r3, r3
10005daa:	f003 0307 	and.w	r3, r3, #7
10005dae:	b29a      	uxth	r2, r3
10005db0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10005db2:	4313      	orrs	r3, r2
10005db4:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
10005db6:	687b      	ldr	r3, [r7, #4]
10005db8:	681b      	ldr	r3, [r3, #0]
10005dba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
10005dbc:	60da      	str	r2, [r3, #12]
10005dbe:	e3a0      	b.n	10006502 <UART_SetConfig+0x1246>
    }
    else
    {
      ret = HAL_ERROR;
10005dc0:	2301      	movs	r3, #1
10005dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
10005dc6:	e39c      	b.n	10006502 <UART_SetConfig+0x1246>
10005dc8:	0007a120 	.word	0x0007a120
10005dcc:	07a12000 	.word	0x07a12000
10005dd0:	000f4240 	.word	0x000f4240
10005dd4:	001e8480 	.word	0x001e8480
10005dd8:	003d0900 	.word	0x003d0900
10005ddc:	007a1200 	.word	0x007a1200
10005de0:	00a2c2aa 	.word	0x00a2c2aa
10005de4:	00c35000 	.word	0x00c35000
10005de8:	00f42400 	.word	0x00f42400
10005dec:	01458554 	.word	0x01458554
10005df0:	01e84800 	.word	0x01e84800
10005df4:	03d09000 	.word	0x03d09000
10005df8:	0001e848 	.word	0x0001e848
10005dfc:	0003d090 	.word	0x0003d090
10005e00:	000a2c2a 	.word	0x000a2c2a
10005e04:	000c3500 	.word	0x000c3500
10005e08:	00145854 	.word	0x00145854
10005e0c:	0002dc6c 	.word	0x0002dc6c
10005e10:	02dc6c00 	.word	0x02dc6c00
10005e14:	0005b8d8 	.word	0x0005b8d8
10005e18:	000b71b0 	.word	0x000b71b0
10005e1c:	0016e360 	.word	0x0016e360
10005e20:	002dc6c0 	.word	0x002dc6c0
10005e24:	00493e00 	.word	0x00493e00
10005e28:	005b8d80 	.word	0x005b8d80
10005e2c:	00b71b00 	.word	0x00b71b00
10005e30:	016e3600 	.word	0x016e3600
    }
  }
  else
  {
    switch (clocksource)
10005e34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
10005e38:	2b40      	cmp	r3, #64	; 0x40
10005e3a:	f200 834f 	bhi.w	100064dc <UART_SetConfig+0x1220>
10005e3e:	a201      	add	r2, pc, #4	; (adr r2, 10005e44 <UART_SetConfig+0xb88>)
10005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005e44:	10005f49 	.word	0x10005f49
10005e48:	10005fff 	.word	0x10005fff
10005e4c:	100060b5 	.word	0x100060b5
10005e50:	100064dd 	.word	0x100064dd
10005e54:	1000616b 	.word	0x1000616b
10005e58:	100064dd 	.word	0x100064dd
10005e5c:	100064dd 	.word	0x100064dd
10005e60:	100064dd 	.word	0x100064dd
10005e64:	10006225 	.word	0x10006225
10005e68:	100064dd 	.word	0x100064dd
10005e6c:	100064dd 	.word	0x100064dd
10005e70:	100064dd 	.word	0x100064dd
10005e74:	100064dd 	.word	0x100064dd
10005e78:	100064dd 	.word	0x100064dd
10005e7c:	100064dd 	.word	0x100064dd
10005e80:	100064dd 	.word	0x100064dd
10005e84:	100062df 	.word	0x100062df
10005e88:	100064dd 	.word	0x100064dd
10005e8c:	100064dd 	.word	0x100064dd
10005e90:	100064dd 	.word	0x100064dd
10005e94:	100064dd 	.word	0x100064dd
10005e98:	100064dd 	.word	0x100064dd
10005e9c:	100064dd 	.word	0x100064dd
10005ea0:	100064dd 	.word	0x100064dd
10005ea4:	100064dd 	.word	0x100064dd
10005ea8:	100064dd 	.word	0x100064dd
10005eac:	100064dd 	.word	0x100064dd
10005eb0:	100064dd 	.word	0x100064dd
10005eb4:	100064dd 	.word	0x100064dd
10005eb8:	100064dd 	.word	0x100064dd
10005ebc:	100064dd 	.word	0x100064dd
10005ec0:	100064dd 	.word	0x100064dd
10005ec4:	10006387 	.word	0x10006387
10005ec8:	100064dd 	.word	0x100064dd
10005ecc:	100064dd 	.word	0x100064dd
10005ed0:	100064dd 	.word	0x100064dd
10005ed4:	100064dd 	.word	0x100064dd
10005ed8:	100064dd 	.word	0x100064dd
10005edc:	100064dd 	.word	0x100064dd
10005ee0:	100064dd 	.word	0x100064dd
10005ee4:	100064dd 	.word	0x100064dd
10005ee8:	100064dd 	.word	0x100064dd
10005eec:	100064dd 	.word	0x100064dd
10005ef0:	100064dd 	.word	0x100064dd
10005ef4:	100064dd 	.word	0x100064dd
10005ef8:	100064dd 	.word	0x100064dd
10005efc:	100064dd 	.word	0x100064dd
10005f00:	100064dd 	.word	0x100064dd
10005f04:	100064dd 	.word	0x100064dd
10005f08:	100064dd 	.word	0x100064dd
10005f0c:	100064dd 	.word	0x100064dd
10005f10:	100064dd 	.word	0x100064dd
10005f14:	100064dd 	.word	0x100064dd
10005f18:	100064dd 	.word	0x100064dd
10005f1c:	100064dd 	.word	0x100064dd
10005f20:	100064dd 	.word	0x100064dd
10005f24:	100064dd 	.word	0x100064dd
10005f28:	100064dd 	.word	0x100064dd
10005f2c:	100064dd 	.word	0x100064dd
10005f30:	100064dd 	.word	0x100064dd
10005f34:	100064dd 	.word	0x100064dd
10005f38:	100064dd 	.word	0x100064dd
10005f3c:	100064dd 	.word	0x100064dd
10005f40:	100064dd 	.word	0x100064dd
10005f44:	10006435 	.word	0x10006435
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10005f48:	f7fc f9a4 	bl	10002294 <HAL_RCC_GetPCLK1Freq>
10005f4c:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005f4e:	687b      	ldr	r3, [r7, #4]
10005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f52:	2b00      	cmp	r3, #0
10005f54:	d044      	beq.n	10005fe0 <UART_SetConfig+0xd24>
10005f56:	687b      	ldr	r3, [r7, #4]
10005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f5a:	2b01      	cmp	r3, #1
10005f5c:	d03e      	beq.n	10005fdc <UART_SetConfig+0xd20>
10005f5e:	687b      	ldr	r3, [r7, #4]
10005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f62:	2b02      	cmp	r3, #2
10005f64:	d038      	beq.n	10005fd8 <UART_SetConfig+0xd1c>
10005f66:	687b      	ldr	r3, [r7, #4]
10005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f6a:	2b03      	cmp	r3, #3
10005f6c:	d032      	beq.n	10005fd4 <UART_SetConfig+0xd18>
10005f6e:	687b      	ldr	r3, [r7, #4]
10005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f72:	2b04      	cmp	r3, #4
10005f74:	d02c      	beq.n	10005fd0 <UART_SetConfig+0xd14>
10005f76:	687b      	ldr	r3, [r7, #4]
10005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f7a:	2b05      	cmp	r3, #5
10005f7c:	d026      	beq.n	10005fcc <UART_SetConfig+0xd10>
10005f7e:	687b      	ldr	r3, [r7, #4]
10005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f82:	2b06      	cmp	r3, #6
10005f84:	d020      	beq.n	10005fc8 <UART_SetConfig+0xd0c>
10005f86:	687b      	ldr	r3, [r7, #4]
10005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f8a:	2b07      	cmp	r3, #7
10005f8c:	d01a      	beq.n	10005fc4 <UART_SetConfig+0xd08>
10005f8e:	687b      	ldr	r3, [r7, #4]
10005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f92:	2b08      	cmp	r3, #8
10005f94:	d014      	beq.n	10005fc0 <UART_SetConfig+0xd04>
10005f96:	687b      	ldr	r3, [r7, #4]
10005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005f9a:	2b09      	cmp	r3, #9
10005f9c:	d00e      	beq.n	10005fbc <UART_SetConfig+0xd00>
10005f9e:	687b      	ldr	r3, [r7, #4]
10005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005fa2:	2b0a      	cmp	r3, #10
10005fa4:	d008      	beq.n	10005fb8 <UART_SetConfig+0xcfc>
10005fa6:	687b      	ldr	r3, [r7, #4]
10005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005faa:	2b0b      	cmp	r3, #11
10005fac:	d102      	bne.n	10005fb4 <UART_SetConfig+0xcf8>
10005fae:	f44f 7380 	mov.w	r3, #256	; 0x100
10005fb2:	e016      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fb4:	2301      	movs	r3, #1
10005fb6:	e014      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fb8:	2380      	movs	r3, #128	; 0x80
10005fba:	e012      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fbc:	2340      	movs	r3, #64	; 0x40
10005fbe:	e010      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fc0:	2320      	movs	r3, #32
10005fc2:	e00e      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fc4:	2310      	movs	r3, #16
10005fc6:	e00c      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fc8:	230c      	movs	r3, #12
10005fca:	e00a      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fcc:	230a      	movs	r3, #10
10005fce:	e008      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fd0:	2308      	movs	r3, #8
10005fd2:	e006      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fd4:	2306      	movs	r3, #6
10005fd6:	e004      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fd8:	2304      	movs	r3, #4
10005fda:	e002      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fdc:	2302      	movs	r3, #2
10005fde:	e000      	b.n	10005fe2 <UART_SetConfig+0xd26>
10005fe0:	2301      	movs	r3, #1
10005fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005fe4:	fbb2 f2f3 	udiv	r2, r2, r3
10005fe8:	687b      	ldr	r3, [r7, #4]
10005fea:	685b      	ldr	r3, [r3, #4]
10005fec:	085b      	lsrs	r3, r3, #1
10005fee:	441a      	add	r2, r3
10005ff0:	687b      	ldr	r3, [r7, #4]
10005ff2:	685b      	ldr	r3, [r3, #4]
10005ff4:	fbb2 f3f3 	udiv	r3, r2, r3
10005ff8:	b29b      	uxth	r3, r3
10005ffa:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005ffc:	e272      	b.n	100064e4 <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10005ffe:	f7fc f964 	bl	100022ca <HAL_RCC_GetPCLK2Freq>
10006002:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006004:	687b      	ldr	r3, [r7, #4]
10006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006008:	2b00      	cmp	r3, #0
1000600a:	d044      	beq.n	10006096 <UART_SetConfig+0xdda>
1000600c:	687b      	ldr	r3, [r7, #4]
1000600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006010:	2b01      	cmp	r3, #1
10006012:	d03e      	beq.n	10006092 <UART_SetConfig+0xdd6>
10006014:	687b      	ldr	r3, [r7, #4]
10006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006018:	2b02      	cmp	r3, #2
1000601a:	d038      	beq.n	1000608e <UART_SetConfig+0xdd2>
1000601c:	687b      	ldr	r3, [r7, #4]
1000601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006020:	2b03      	cmp	r3, #3
10006022:	d032      	beq.n	1000608a <UART_SetConfig+0xdce>
10006024:	687b      	ldr	r3, [r7, #4]
10006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006028:	2b04      	cmp	r3, #4
1000602a:	d02c      	beq.n	10006086 <UART_SetConfig+0xdca>
1000602c:	687b      	ldr	r3, [r7, #4]
1000602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006030:	2b05      	cmp	r3, #5
10006032:	d026      	beq.n	10006082 <UART_SetConfig+0xdc6>
10006034:	687b      	ldr	r3, [r7, #4]
10006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006038:	2b06      	cmp	r3, #6
1000603a:	d020      	beq.n	1000607e <UART_SetConfig+0xdc2>
1000603c:	687b      	ldr	r3, [r7, #4]
1000603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006040:	2b07      	cmp	r3, #7
10006042:	d01a      	beq.n	1000607a <UART_SetConfig+0xdbe>
10006044:	687b      	ldr	r3, [r7, #4]
10006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006048:	2b08      	cmp	r3, #8
1000604a:	d014      	beq.n	10006076 <UART_SetConfig+0xdba>
1000604c:	687b      	ldr	r3, [r7, #4]
1000604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006050:	2b09      	cmp	r3, #9
10006052:	d00e      	beq.n	10006072 <UART_SetConfig+0xdb6>
10006054:	687b      	ldr	r3, [r7, #4]
10006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006058:	2b0a      	cmp	r3, #10
1000605a:	d008      	beq.n	1000606e <UART_SetConfig+0xdb2>
1000605c:	687b      	ldr	r3, [r7, #4]
1000605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006060:	2b0b      	cmp	r3, #11
10006062:	d102      	bne.n	1000606a <UART_SetConfig+0xdae>
10006064:	f44f 7380 	mov.w	r3, #256	; 0x100
10006068:	e016      	b.n	10006098 <UART_SetConfig+0xddc>
1000606a:	2301      	movs	r3, #1
1000606c:	e014      	b.n	10006098 <UART_SetConfig+0xddc>
1000606e:	2380      	movs	r3, #128	; 0x80
10006070:	e012      	b.n	10006098 <UART_SetConfig+0xddc>
10006072:	2340      	movs	r3, #64	; 0x40
10006074:	e010      	b.n	10006098 <UART_SetConfig+0xddc>
10006076:	2320      	movs	r3, #32
10006078:	e00e      	b.n	10006098 <UART_SetConfig+0xddc>
1000607a:	2310      	movs	r3, #16
1000607c:	e00c      	b.n	10006098 <UART_SetConfig+0xddc>
1000607e:	230c      	movs	r3, #12
10006080:	e00a      	b.n	10006098 <UART_SetConfig+0xddc>
10006082:	230a      	movs	r3, #10
10006084:	e008      	b.n	10006098 <UART_SetConfig+0xddc>
10006086:	2308      	movs	r3, #8
10006088:	e006      	b.n	10006098 <UART_SetConfig+0xddc>
1000608a:	2306      	movs	r3, #6
1000608c:	e004      	b.n	10006098 <UART_SetConfig+0xddc>
1000608e:	2304      	movs	r3, #4
10006090:	e002      	b.n	10006098 <UART_SetConfig+0xddc>
10006092:	2302      	movs	r3, #2
10006094:	e000      	b.n	10006098 <UART_SetConfig+0xddc>
10006096:	2301      	movs	r3, #1
10006098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000609a:	fbb2 f2f3 	udiv	r2, r2, r3
1000609e:	687b      	ldr	r3, [r7, #4]
100060a0:	685b      	ldr	r3, [r3, #4]
100060a2:	085b      	lsrs	r3, r3, #1
100060a4:	441a      	add	r2, r3
100060a6:	687b      	ldr	r3, [r7, #4]
100060a8:	685b      	ldr	r3, [r3, #4]
100060aa:	fbb2 f3f3 	udiv	r3, r2, r3
100060ae:	b29b      	uxth	r3, r3
100060b0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100060b2:	e217      	b.n	100064e4 <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
100060b4:	f7fc f924 	bl	10002300 <HAL_RCC_GetPCLK5Freq>
100060b8:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100060ba:	687b      	ldr	r3, [r7, #4]
100060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060be:	2b00      	cmp	r3, #0
100060c0:	d044      	beq.n	1000614c <UART_SetConfig+0xe90>
100060c2:	687b      	ldr	r3, [r7, #4]
100060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060c6:	2b01      	cmp	r3, #1
100060c8:	d03e      	beq.n	10006148 <UART_SetConfig+0xe8c>
100060ca:	687b      	ldr	r3, [r7, #4]
100060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060ce:	2b02      	cmp	r3, #2
100060d0:	d038      	beq.n	10006144 <UART_SetConfig+0xe88>
100060d2:	687b      	ldr	r3, [r7, #4]
100060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060d6:	2b03      	cmp	r3, #3
100060d8:	d032      	beq.n	10006140 <UART_SetConfig+0xe84>
100060da:	687b      	ldr	r3, [r7, #4]
100060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060de:	2b04      	cmp	r3, #4
100060e0:	d02c      	beq.n	1000613c <UART_SetConfig+0xe80>
100060e2:	687b      	ldr	r3, [r7, #4]
100060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060e6:	2b05      	cmp	r3, #5
100060e8:	d026      	beq.n	10006138 <UART_SetConfig+0xe7c>
100060ea:	687b      	ldr	r3, [r7, #4]
100060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060ee:	2b06      	cmp	r3, #6
100060f0:	d020      	beq.n	10006134 <UART_SetConfig+0xe78>
100060f2:	687b      	ldr	r3, [r7, #4]
100060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060f6:	2b07      	cmp	r3, #7
100060f8:	d01a      	beq.n	10006130 <UART_SetConfig+0xe74>
100060fa:	687b      	ldr	r3, [r7, #4]
100060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060fe:	2b08      	cmp	r3, #8
10006100:	d014      	beq.n	1000612c <UART_SetConfig+0xe70>
10006102:	687b      	ldr	r3, [r7, #4]
10006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006106:	2b09      	cmp	r3, #9
10006108:	d00e      	beq.n	10006128 <UART_SetConfig+0xe6c>
1000610a:	687b      	ldr	r3, [r7, #4]
1000610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000610e:	2b0a      	cmp	r3, #10
10006110:	d008      	beq.n	10006124 <UART_SetConfig+0xe68>
10006112:	687b      	ldr	r3, [r7, #4]
10006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006116:	2b0b      	cmp	r3, #11
10006118:	d102      	bne.n	10006120 <UART_SetConfig+0xe64>
1000611a:	f44f 7380 	mov.w	r3, #256	; 0x100
1000611e:	e016      	b.n	1000614e <UART_SetConfig+0xe92>
10006120:	2301      	movs	r3, #1
10006122:	e014      	b.n	1000614e <UART_SetConfig+0xe92>
10006124:	2380      	movs	r3, #128	; 0x80
10006126:	e012      	b.n	1000614e <UART_SetConfig+0xe92>
10006128:	2340      	movs	r3, #64	; 0x40
1000612a:	e010      	b.n	1000614e <UART_SetConfig+0xe92>
1000612c:	2320      	movs	r3, #32
1000612e:	e00e      	b.n	1000614e <UART_SetConfig+0xe92>
10006130:	2310      	movs	r3, #16
10006132:	e00c      	b.n	1000614e <UART_SetConfig+0xe92>
10006134:	230c      	movs	r3, #12
10006136:	e00a      	b.n	1000614e <UART_SetConfig+0xe92>
10006138:	230a      	movs	r3, #10
1000613a:	e008      	b.n	1000614e <UART_SetConfig+0xe92>
1000613c:	2308      	movs	r3, #8
1000613e:	e006      	b.n	1000614e <UART_SetConfig+0xe92>
10006140:	2306      	movs	r3, #6
10006142:	e004      	b.n	1000614e <UART_SetConfig+0xe92>
10006144:	2304      	movs	r3, #4
10006146:	e002      	b.n	1000614e <UART_SetConfig+0xe92>
10006148:	2302      	movs	r3, #2
1000614a:	e000      	b.n	1000614e <UART_SetConfig+0xe92>
1000614c:	2301      	movs	r3, #1
1000614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10006150:	fbb2 f2f3 	udiv	r2, r2, r3
10006154:	687b      	ldr	r3, [r7, #4]
10006156:	685b      	ldr	r3, [r3, #4]
10006158:	085b      	lsrs	r3, r3, #1
1000615a:	441a      	add	r2, r3
1000615c:	687b      	ldr	r3, [r7, #4]
1000615e:	685b      	ldr	r3, [r3, #4]
10006160:	fbb2 f3f3 	udiv	r3, r2, r3
10006164:	b29b      	uxth	r3, r3
10006166:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006168:	e1bc      	b.n	100064e4 <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000616a:	f107 0314 	add.w	r3, r7, #20
1000616e:	4618      	mov	r0, r3
10006170:	f7fb fe8e 	bl	10001e90 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006174:	69ba      	ldr	r2, [r7, #24]
10006176:	687b      	ldr	r3, [r7, #4]
10006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000617a:	2b00      	cmp	r3, #0
1000617c:	d044      	beq.n	10006208 <UART_SetConfig+0xf4c>
1000617e:	687b      	ldr	r3, [r7, #4]
10006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006182:	2b01      	cmp	r3, #1
10006184:	d03e      	beq.n	10006204 <UART_SetConfig+0xf48>
10006186:	687b      	ldr	r3, [r7, #4]
10006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000618a:	2b02      	cmp	r3, #2
1000618c:	d038      	beq.n	10006200 <UART_SetConfig+0xf44>
1000618e:	687b      	ldr	r3, [r7, #4]
10006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006192:	2b03      	cmp	r3, #3
10006194:	d032      	beq.n	100061fc <UART_SetConfig+0xf40>
10006196:	687b      	ldr	r3, [r7, #4]
10006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000619a:	2b04      	cmp	r3, #4
1000619c:	d02c      	beq.n	100061f8 <UART_SetConfig+0xf3c>
1000619e:	687b      	ldr	r3, [r7, #4]
100061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061a2:	2b05      	cmp	r3, #5
100061a4:	d026      	beq.n	100061f4 <UART_SetConfig+0xf38>
100061a6:	687b      	ldr	r3, [r7, #4]
100061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061aa:	2b06      	cmp	r3, #6
100061ac:	d020      	beq.n	100061f0 <UART_SetConfig+0xf34>
100061ae:	687b      	ldr	r3, [r7, #4]
100061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061b2:	2b07      	cmp	r3, #7
100061b4:	d01a      	beq.n	100061ec <UART_SetConfig+0xf30>
100061b6:	687b      	ldr	r3, [r7, #4]
100061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061ba:	2b08      	cmp	r3, #8
100061bc:	d014      	beq.n	100061e8 <UART_SetConfig+0xf2c>
100061be:	687b      	ldr	r3, [r7, #4]
100061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061c2:	2b09      	cmp	r3, #9
100061c4:	d00e      	beq.n	100061e4 <UART_SetConfig+0xf28>
100061c6:	687b      	ldr	r3, [r7, #4]
100061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061ca:	2b0a      	cmp	r3, #10
100061cc:	d008      	beq.n	100061e0 <UART_SetConfig+0xf24>
100061ce:	687b      	ldr	r3, [r7, #4]
100061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061d2:	2b0b      	cmp	r3, #11
100061d4:	d102      	bne.n	100061dc <UART_SetConfig+0xf20>
100061d6:	f44f 7380 	mov.w	r3, #256	; 0x100
100061da:	e016      	b.n	1000620a <UART_SetConfig+0xf4e>
100061dc:	2301      	movs	r3, #1
100061de:	e014      	b.n	1000620a <UART_SetConfig+0xf4e>
100061e0:	2380      	movs	r3, #128	; 0x80
100061e2:	e012      	b.n	1000620a <UART_SetConfig+0xf4e>
100061e4:	2340      	movs	r3, #64	; 0x40
100061e6:	e010      	b.n	1000620a <UART_SetConfig+0xf4e>
100061e8:	2320      	movs	r3, #32
100061ea:	e00e      	b.n	1000620a <UART_SetConfig+0xf4e>
100061ec:	2310      	movs	r3, #16
100061ee:	e00c      	b.n	1000620a <UART_SetConfig+0xf4e>
100061f0:	230c      	movs	r3, #12
100061f2:	e00a      	b.n	1000620a <UART_SetConfig+0xf4e>
100061f4:	230a      	movs	r3, #10
100061f6:	e008      	b.n	1000620a <UART_SetConfig+0xf4e>
100061f8:	2308      	movs	r3, #8
100061fa:	e006      	b.n	1000620a <UART_SetConfig+0xf4e>
100061fc:	2306      	movs	r3, #6
100061fe:	e004      	b.n	1000620a <UART_SetConfig+0xf4e>
10006200:	2304      	movs	r3, #4
10006202:	e002      	b.n	1000620a <UART_SetConfig+0xf4e>
10006204:	2302      	movs	r3, #2
10006206:	e000      	b.n	1000620a <UART_SetConfig+0xf4e>
10006208:	2301      	movs	r3, #1
1000620a:	fbb2 f2f3 	udiv	r2, r2, r3
1000620e:	687b      	ldr	r3, [r7, #4]
10006210:	685b      	ldr	r3, [r3, #4]
10006212:	085b      	lsrs	r3, r3, #1
10006214:	441a      	add	r2, r3
10006216:	687b      	ldr	r3, [r7, #4]
10006218:	685b      	ldr	r3, [r3, #4]
1000621a:	fbb2 f3f3 	udiv	r3, r2, r3
1000621e:	b29b      	uxth	r3, r3
10006220:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006222:	e15f      	b.n	100064e4 <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10006224:	f107 0308 	add.w	r3, r7, #8
10006228:	4618      	mov	r0, r3
1000622a:	f7fb ff2b 	bl	10002084 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000622e:	68fa      	ldr	r2, [r7, #12]
10006230:	687b      	ldr	r3, [r7, #4]
10006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006234:	2b00      	cmp	r3, #0
10006236:	d044      	beq.n	100062c2 <UART_SetConfig+0x1006>
10006238:	687b      	ldr	r3, [r7, #4]
1000623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000623c:	2b01      	cmp	r3, #1
1000623e:	d03e      	beq.n	100062be <UART_SetConfig+0x1002>
10006240:	687b      	ldr	r3, [r7, #4]
10006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006244:	2b02      	cmp	r3, #2
10006246:	d038      	beq.n	100062ba <UART_SetConfig+0xffe>
10006248:	687b      	ldr	r3, [r7, #4]
1000624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000624c:	2b03      	cmp	r3, #3
1000624e:	d032      	beq.n	100062b6 <UART_SetConfig+0xffa>
10006250:	687b      	ldr	r3, [r7, #4]
10006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006254:	2b04      	cmp	r3, #4
10006256:	d02c      	beq.n	100062b2 <UART_SetConfig+0xff6>
10006258:	687b      	ldr	r3, [r7, #4]
1000625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000625c:	2b05      	cmp	r3, #5
1000625e:	d026      	beq.n	100062ae <UART_SetConfig+0xff2>
10006260:	687b      	ldr	r3, [r7, #4]
10006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006264:	2b06      	cmp	r3, #6
10006266:	d020      	beq.n	100062aa <UART_SetConfig+0xfee>
10006268:	687b      	ldr	r3, [r7, #4]
1000626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000626c:	2b07      	cmp	r3, #7
1000626e:	d01a      	beq.n	100062a6 <UART_SetConfig+0xfea>
10006270:	687b      	ldr	r3, [r7, #4]
10006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006274:	2b08      	cmp	r3, #8
10006276:	d014      	beq.n	100062a2 <UART_SetConfig+0xfe6>
10006278:	687b      	ldr	r3, [r7, #4]
1000627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000627c:	2b09      	cmp	r3, #9
1000627e:	d00e      	beq.n	1000629e <UART_SetConfig+0xfe2>
10006280:	687b      	ldr	r3, [r7, #4]
10006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006284:	2b0a      	cmp	r3, #10
10006286:	d008      	beq.n	1000629a <UART_SetConfig+0xfde>
10006288:	687b      	ldr	r3, [r7, #4]
1000628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000628c:	2b0b      	cmp	r3, #11
1000628e:	d102      	bne.n	10006296 <UART_SetConfig+0xfda>
10006290:	f44f 7380 	mov.w	r3, #256	; 0x100
10006294:	e016      	b.n	100062c4 <UART_SetConfig+0x1008>
10006296:	2301      	movs	r3, #1
10006298:	e014      	b.n	100062c4 <UART_SetConfig+0x1008>
1000629a:	2380      	movs	r3, #128	; 0x80
1000629c:	e012      	b.n	100062c4 <UART_SetConfig+0x1008>
1000629e:	2340      	movs	r3, #64	; 0x40
100062a0:	e010      	b.n	100062c4 <UART_SetConfig+0x1008>
100062a2:	2320      	movs	r3, #32
100062a4:	e00e      	b.n	100062c4 <UART_SetConfig+0x1008>
100062a6:	2310      	movs	r3, #16
100062a8:	e00c      	b.n	100062c4 <UART_SetConfig+0x1008>
100062aa:	230c      	movs	r3, #12
100062ac:	e00a      	b.n	100062c4 <UART_SetConfig+0x1008>
100062ae:	230a      	movs	r3, #10
100062b0:	e008      	b.n	100062c4 <UART_SetConfig+0x1008>
100062b2:	2308      	movs	r3, #8
100062b4:	e006      	b.n	100062c4 <UART_SetConfig+0x1008>
100062b6:	2306      	movs	r3, #6
100062b8:	e004      	b.n	100062c4 <UART_SetConfig+0x1008>
100062ba:	2304      	movs	r3, #4
100062bc:	e002      	b.n	100062c4 <UART_SetConfig+0x1008>
100062be:	2302      	movs	r3, #2
100062c0:	e000      	b.n	100062c4 <UART_SetConfig+0x1008>
100062c2:	2301      	movs	r3, #1
100062c4:	fbb2 f2f3 	udiv	r2, r2, r3
100062c8:	687b      	ldr	r3, [r7, #4]
100062ca:	685b      	ldr	r3, [r3, #4]
100062cc:	085b      	lsrs	r3, r3, #1
100062ce:	441a      	add	r2, r3
100062d0:	687b      	ldr	r3, [r7, #4]
100062d2:	685b      	ldr	r3, [r3, #4]
100062d4:	fbb2 f3f3 	udiv	r3, r2, r3
100062d8:	b29b      	uxth	r3, r3
100062da:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100062dc:	e102      	b.n	100064e4 <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100062de:	687b      	ldr	r3, [r7, #4]
100062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100062e2:	2b00      	cmp	r3, #0
100062e4:	d043      	beq.n	1000636e <UART_SetConfig+0x10b2>
100062e6:	687b      	ldr	r3, [r7, #4]
100062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100062ea:	2b01      	cmp	r3, #1
100062ec:	d03d      	beq.n	1000636a <UART_SetConfig+0x10ae>
100062ee:	687b      	ldr	r3, [r7, #4]
100062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100062f2:	2b02      	cmp	r3, #2
100062f4:	d037      	beq.n	10006366 <UART_SetConfig+0x10aa>
100062f6:	687b      	ldr	r3, [r7, #4]
100062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100062fa:	2b03      	cmp	r3, #3
100062fc:	d031      	beq.n	10006362 <UART_SetConfig+0x10a6>
100062fe:	687b      	ldr	r3, [r7, #4]
10006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006302:	2b04      	cmp	r3, #4
10006304:	d02b      	beq.n	1000635e <UART_SetConfig+0x10a2>
10006306:	687b      	ldr	r3, [r7, #4]
10006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000630a:	2b05      	cmp	r3, #5
1000630c:	d025      	beq.n	1000635a <UART_SetConfig+0x109e>
1000630e:	687b      	ldr	r3, [r7, #4]
10006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006312:	2b06      	cmp	r3, #6
10006314:	d01f      	beq.n	10006356 <UART_SetConfig+0x109a>
10006316:	687b      	ldr	r3, [r7, #4]
10006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000631a:	2b07      	cmp	r3, #7
1000631c:	d019      	beq.n	10006352 <UART_SetConfig+0x1096>
1000631e:	687b      	ldr	r3, [r7, #4]
10006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006322:	2b08      	cmp	r3, #8
10006324:	d013      	beq.n	1000634e <UART_SetConfig+0x1092>
10006326:	687b      	ldr	r3, [r7, #4]
10006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000632a:	2b09      	cmp	r3, #9
1000632c:	d00d      	beq.n	1000634a <UART_SetConfig+0x108e>
1000632e:	687b      	ldr	r3, [r7, #4]
10006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006332:	2b0a      	cmp	r3, #10
10006334:	d007      	beq.n	10006346 <UART_SetConfig+0x108a>
10006336:	687b      	ldr	r3, [r7, #4]
10006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000633a:	2b0b      	cmp	r3, #11
1000633c:	d101      	bne.n	10006342 <UART_SetConfig+0x1086>
1000633e:	4b7b      	ldr	r3, [pc, #492]	; (1000652c <UART_SetConfig+0x1270>)
10006340:	e016      	b.n	10006370 <UART_SetConfig+0x10b4>
10006342:	4b7b      	ldr	r3, [pc, #492]	; (10006530 <UART_SetConfig+0x1274>)
10006344:	e014      	b.n	10006370 <UART_SetConfig+0x10b4>
10006346:	4b7b      	ldr	r3, [pc, #492]	; (10006534 <UART_SetConfig+0x1278>)
10006348:	e012      	b.n	10006370 <UART_SetConfig+0x10b4>
1000634a:	4b7b      	ldr	r3, [pc, #492]	; (10006538 <UART_SetConfig+0x127c>)
1000634c:	e010      	b.n	10006370 <UART_SetConfig+0x10b4>
1000634e:	4b7b      	ldr	r3, [pc, #492]	; (1000653c <UART_SetConfig+0x1280>)
10006350:	e00e      	b.n	10006370 <UART_SetConfig+0x10b4>
10006352:	4b7b      	ldr	r3, [pc, #492]	; (10006540 <UART_SetConfig+0x1284>)
10006354:	e00c      	b.n	10006370 <UART_SetConfig+0x10b4>
10006356:	4b7b      	ldr	r3, [pc, #492]	; (10006544 <UART_SetConfig+0x1288>)
10006358:	e00a      	b.n	10006370 <UART_SetConfig+0x10b4>
1000635a:	4b7b      	ldr	r3, [pc, #492]	; (10006548 <UART_SetConfig+0x128c>)
1000635c:	e008      	b.n	10006370 <UART_SetConfig+0x10b4>
1000635e:	4b7b      	ldr	r3, [pc, #492]	; (1000654c <UART_SetConfig+0x1290>)
10006360:	e006      	b.n	10006370 <UART_SetConfig+0x10b4>
10006362:	4b7b      	ldr	r3, [pc, #492]	; (10006550 <UART_SetConfig+0x1294>)
10006364:	e004      	b.n	10006370 <UART_SetConfig+0x10b4>
10006366:	4b7b      	ldr	r3, [pc, #492]	; (10006554 <UART_SetConfig+0x1298>)
10006368:	e002      	b.n	10006370 <UART_SetConfig+0x10b4>
1000636a:	4b7b      	ldr	r3, [pc, #492]	; (10006558 <UART_SetConfig+0x129c>)
1000636c:	e000      	b.n	10006370 <UART_SetConfig+0x10b4>
1000636e:	4b70      	ldr	r3, [pc, #448]	; (10006530 <UART_SetConfig+0x1274>)
10006370:	687a      	ldr	r2, [r7, #4]
10006372:	6852      	ldr	r2, [r2, #4]
10006374:	0852      	lsrs	r2, r2, #1
10006376:	441a      	add	r2, r3
10006378:	687b      	ldr	r3, [r7, #4]
1000637a:	685b      	ldr	r3, [r3, #4]
1000637c:	fbb2 f3f3 	udiv	r3, r2, r3
10006380:	b29b      	uxth	r3, r3
10006382:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006384:	e0ae      	b.n	100064e4 <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006386:	687b      	ldr	r3, [r7, #4]
10006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000638a:	2b00      	cmp	r3, #0
1000638c:	d046      	beq.n	1000641c <UART_SetConfig+0x1160>
1000638e:	687b      	ldr	r3, [r7, #4]
10006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006392:	2b01      	cmp	r3, #1
10006394:	d040      	beq.n	10006418 <UART_SetConfig+0x115c>
10006396:	687b      	ldr	r3, [r7, #4]
10006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000639a:	2b02      	cmp	r3, #2
1000639c:	d03a      	beq.n	10006414 <UART_SetConfig+0x1158>
1000639e:	687b      	ldr	r3, [r7, #4]
100063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063a2:	2b03      	cmp	r3, #3
100063a4:	d034      	beq.n	10006410 <UART_SetConfig+0x1154>
100063a6:	687b      	ldr	r3, [r7, #4]
100063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063aa:	2b04      	cmp	r3, #4
100063ac:	d02e      	beq.n	1000640c <UART_SetConfig+0x1150>
100063ae:	687b      	ldr	r3, [r7, #4]
100063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063b2:	2b05      	cmp	r3, #5
100063b4:	d028      	beq.n	10006408 <UART_SetConfig+0x114c>
100063b6:	687b      	ldr	r3, [r7, #4]
100063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063ba:	2b06      	cmp	r3, #6
100063bc:	d022      	beq.n	10006404 <UART_SetConfig+0x1148>
100063be:	687b      	ldr	r3, [r7, #4]
100063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063c2:	2b07      	cmp	r3, #7
100063c4:	d01c      	beq.n	10006400 <UART_SetConfig+0x1144>
100063c6:	687b      	ldr	r3, [r7, #4]
100063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063ca:	2b08      	cmp	r3, #8
100063cc:	d016      	beq.n	100063fc <UART_SetConfig+0x1140>
100063ce:	687b      	ldr	r3, [r7, #4]
100063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063d2:	2b09      	cmp	r3, #9
100063d4:	d00f      	beq.n	100063f6 <UART_SetConfig+0x113a>
100063d6:	687b      	ldr	r3, [r7, #4]
100063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063da:	2b0a      	cmp	r3, #10
100063dc:	d008      	beq.n	100063f0 <UART_SetConfig+0x1134>
100063de:	687b      	ldr	r3, [r7, #4]
100063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063e2:	2b0b      	cmp	r3, #11
100063e4:	d102      	bne.n	100063ec <UART_SetConfig+0x1130>
100063e6:	f643 5309 	movw	r3, #15625	; 0x3d09
100063ea:	e018      	b.n	1000641e <UART_SetConfig+0x1162>
100063ec:	4b54      	ldr	r3, [pc, #336]	; (10006540 <UART_SetConfig+0x1284>)
100063ee:	e016      	b.n	1000641e <UART_SetConfig+0x1162>
100063f0:	f647 2312 	movw	r3, #31250	; 0x7a12
100063f4:	e013      	b.n	1000641e <UART_SetConfig+0x1162>
100063f6:	f24f 4324 	movw	r3, #62500	; 0xf424
100063fa:	e010      	b.n	1000641e <UART_SetConfig+0x1162>
100063fc:	4b57      	ldr	r3, [pc, #348]	; (1000655c <UART_SetConfig+0x12a0>)
100063fe:	e00e      	b.n	1000641e <UART_SetConfig+0x1162>
10006400:	4b4a      	ldr	r3, [pc, #296]	; (1000652c <UART_SetConfig+0x1270>)
10006402:	e00c      	b.n	1000641e <UART_SetConfig+0x1162>
10006404:	4b56      	ldr	r3, [pc, #344]	; (10006560 <UART_SetConfig+0x12a4>)
10006406:	e00a      	b.n	1000641e <UART_SetConfig+0x1162>
10006408:	4b56      	ldr	r3, [pc, #344]	; (10006564 <UART_SetConfig+0x12a8>)
1000640a:	e008      	b.n	1000641e <UART_SetConfig+0x1162>
1000640c:	4b49      	ldr	r3, [pc, #292]	; (10006534 <UART_SetConfig+0x1278>)
1000640e:	e006      	b.n	1000641e <UART_SetConfig+0x1162>
10006410:	4b55      	ldr	r3, [pc, #340]	; (10006568 <UART_SetConfig+0x12ac>)
10006412:	e004      	b.n	1000641e <UART_SetConfig+0x1162>
10006414:	4b48      	ldr	r3, [pc, #288]	; (10006538 <UART_SetConfig+0x127c>)
10006416:	e002      	b.n	1000641e <UART_SetConfig+0x1162>
10006418:	4b48      	ldr	r3, [pc, #288]	; (1000653c <UART_SetConfig+0x1280>)
1000641a:	e000      	b.n	1000641e <UART_SetConfig+0x1162>
1000641c:	4b48      	ldr	r3, [pc, #288]	; (10006540 <UART_SetConfig+0x1284>)
1000641e:	687a      	ldr	r2, [r7, #4]
10006420:	6852      	ldr	r2, [r2, #4]
10006422:	0852      	lsrs	r2, r2, #1
10006424:	441a      	add	r2, r3
10006426:	687b      	ldr	r3, [r7, #4]
10006428:	685b      	ldr	r3, [r3, #4]
1000642a:	fbb2 f3f3 	udiv	r3, r2, r3
1000642e:	b29b      	uxth	r3, r3
10006430:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006432:	e057      	b.n	100064e4 <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006434:	687b      	ldr	r3, [r7, #4]
10006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006438:	2b00      	cmp	r3, #0
1000643a:	d043      	beq.n	100064c4 <UART_SetConfig+0x1208>
1000643c:	687b      	ldr	r3, [r7, #4]
1000643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006440:	2b01      	cmp	r3, #1
10006442:	d03d      	beq.n	100064c0 <UART_SetConfig+0x1204>
10006444:	687b      	ldr	r3, [r7, #4]
10006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006448:	2b02      	cmp	r3, #2
1000644a:	d037      	beq.n	100064bc <UART_SetConfig+0x1200>
1000644c:	687b      	ldr	r3, [r7, #4]
1000644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006450:	2b03      	cmp	r3, #3
10006452:	d031      	beq.n	100064b8 <UART_SetConfig+0x11fc>
10006454:	687b      	ldr	r3, [r7, #4]
10006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006458:	2b04      	cmp	r3, #4
1000645a:	d02b      	beq.n	100064b4 <UART_SetConfig+0x11f8>
1000645c:	687b      	ldr	r3, [r7, #4]
1000645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006460:	2b05      	cmp	r3, #5
10006462:	d025      	beq.n	100064b0 <UART_SetConfig+0x11f4>
10006464:	687b      	ldr	r3, [r7, #4]
10006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006468:	2b06      	cmp	r3, #6
1000646a:	d01f      	beq.n	100064ac <UART_SetConfig+0x11f0>
1000646c:	687b      	ldr	r3, [r7, #4]
1000646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006470:	2b07      	cmp	r3, #7
10006472:	d019      	beq.n	100064a8 <UART_SetConfig+0x11ec>
10006474:	687b      	ldr	r3, [r7, #4]
10006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006478:	2b08      	cmp	r3, #8
1000647a:	d013      	beq.n	100064a4 <UART_SetConfig+0x11e8>
1000647c:	687b      	ldr	r3, [r7, #4]
1000647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006480:	2b09      	cmp	r3, #9
10006482:	d00d      	beq.n	100064a0 <UART_SetConfig+0x11e4>
10006484:	687b      	ldr	r3, [r7, #4]
10006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006488:	2b0a      	cmp	r3, #10
1000648a:	d007      	beq.n	1000649c <UART_SetConfig+0x11e0>
1000648c:	687b      	ldr	r3, [r7, #4]
1000648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006490:	2b0b      	cmp	r3, #11
10006492:	d101      	bne.n	10006498 <UART_SetConfig+0x11dc>
10006494:	4b35      	ldr	r3, [pc, #212]	; (1000656c <UART_SetConfig+0x12b0>)
10006496:	e016      	b.n	100064c6 <UART_SetConfig+0x120a>
10006498:	4b35      	ldr	r3, [pc, #212]	; (10006570 <UART_SetConfig+0x12b4>)
1000649a:	e014      	b.n	100064c6 <UART_SetConfig+0x120a>
1000649c:	4b35      	ldr	r3, [pc, #212]	; (10006574 <UART_SetConfig+0x12b8>)
1000649e:	e012      	b.n	100064c6 <UART_SetConfig+0x120a>
100064a0:	4b35      	ldr	r3, [pc, #212]	; (10006578 <UART_SetConfig+0x12bc>)
100064a2:	e010      	b.n	100064c6 <UART_SetConfig+0x120a>
100064a4:	4b35      	ldr	r3, [pc, #212]	; (1000657c <UART_SetConfig+0x12c0>)
100064a6:	e00e      	b.n	100064c6 <UART_SetConfig+0x120a>
100064a8:	4b35      	ldr	r3, [pc, #212]	; (10006580 <UART_SetConfig+0x12c4>)
100064aa:	e00c      	b.n	100064c6 <UART_SetConfig+0x120a>
100064ac:	4b23      	ldr	r3, [pc, #140]	; (1000653c <UART_SetConfig+0x1280>)
100064ae:	e00a      	b.n	100064c6 <UART_SetConfig+0x120a>
100064b0:	4b34      	ldr	r3, [pc, #208]	; (10006584 <UART_SetConfig+0x12c8>)
100064b2:	e008      	b.n	100064c6 <UART_SetConfig+0x120a>
100064b4:	4b34      	ldr	r3, [pc, #208]	; (10006588 <UART_SetConfig+0x12cc>)
100064b6:	e006      	b.n	100064c6 <UART_SetConfig+0x120a>
100064b8:	4b21      	ldr	r3, [pc, #132]	; (10006540 <UART_SetConfig+0x1284>)
100064ba:	e004      	b.n	100064c6 <UART_SetConfig+0x120a>
100064bc:	4b33      	ldr	r3, [pc, #204]	; (1000658c <UART_SetConfig+0x12d0>)
100064be:	e002      	b.n	100064c6 <UART_SetConfig+0x120a>
100064c0:	4b33      	ldr	r3, [pc, #204]	; (10006590 <UART_SetConfig+0x12d4>)
100064c2:	e000      	b.n	100064c6 <UART_SetConfig+0x120a>
100064c4:	4b2a      	ldr	r3, [pc, #168]	; (10006570 <UART_SetConfig+0x12b4>)
100064c6:	687a      	ldr	r2, [r7, #4]
100064c8:	6852      	ldr	r2, [r2, #4]
100064ca:	0852      	lsrs	r2, r2, #1
100064cc:	441a      	add	r2, r3
100064ce:	687b      	ldr	r3, [r7, #4]
100064d0:	685b      	ldr	r3, [r3, #4]
100064d2:	fbb2 f3f3 	udiv	r3, r2, r3
100064d6:	b29b      	uxth	r3, r3
100064d8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100064da:	e003      	b.n	100064e4 <UART_SetConfig+0x1228>
      default:
        ret = HAL_ERROR;
100064dc:	2301      	movs	r3, #1
100064de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
100064e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
100064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100064e6:	2b0f      	cmp	r3, #15
100064e8:	d908      	bls.n	100064fc <UART_SetConfig+0x1240>
100064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100064ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
100064f0:	d204      	bcs.n	100064fc <UART_SetConfig+0x1240>
    {
      huart->Instance->BRR = usartdiv;
100064f2:	687b      	ldr	r3, [r7, #4]
100064f4:	681b      	ldr	r3, [r3, #0]
100064f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
100064f8:	60da      	str	r2, [r3, #12]
100064fa:	e002      	b.n	10006502 <UART_SetConfig+0x1246>
    }
    else
    {
      ret = HAL_ERROR;
100064fc:	2301      	movs	r3, #1
100064fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10006502:	687b      	ldr	r3, [r7, #4]
10006504:	2201      	movs	r2, #1
10006506:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
1000650a:	687b      	ldr	r3, [r7, #4]
1000650c:	2201      	movs	r2, #1
1000650e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10006512:	687b      	ldr	r3, [r7, #4]
10006514:	2200      	movs	r2, #0
10006516:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
10006518:	687b      	ldr	r3, [r7, #4]
1000651a:	2200      	movs	r2, #0
1000651c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
1000651e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
10006522:	4618      	mov	r0, r3
10006524:	3738      	adds	r7, #56	; 0x38
10006526:	46bd      	mov	sp, r7
10006528:	bd80      	pop	{r7, pc}
1000652a:	bf00      	nop
1000652c:	0003d090 	.word	0x0003d090
10006530:	03d09000 	.word	0x03d09000
10006534:	0007a120 	.word	0x0007a120
10006538:	000f4240 	.word	0x000f4240
1000653c:	001e8480 	.word	0x001e8480
10006540:	003d0900 	.word	0x003d0900
10006544:	00516155 	.word	0x00516155
10006548:	0061a800 	.word	0x0061a800
1000654c:	007a1200 	.word	0x007a1200
10006550:	00a2c2aa 	.word	0x00a2c2aa
10006554:	00f42400 	.word	0x00f42400
10006558:	01e84800 	.word	0x01e84800
1000655c:	0001e848 	.word	0x0001e848
10006560:	00051615 	.word	0x00051615
10006564:	00061a80 	.word	0x00061a80
10006568:	000a2c2a 	.word	0x000a2c2a
1000656c:	00016e36 	.word	0x00016e36
10006570:	016e3600 	.word	0x016e3600
10006574:	0002dc6c 	.word	0x0002dc6c
10006578:	0005b8d8 	.word	0x0005b8d8
1000657c:	000b71b0 	.word	0x000b71b0
10006580:	0016e360 	.word	0x0016e360
10006584:	00249f00 	.word	0x00249f00
10006588:	002dc6c0 	.word	0x002dc6c0
1000658c:	005b8d80 	.word	0x005b8d80
10006590:	00b71b00 	.word	0x00b71b00

10006594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10006594:	b480      	push	{r7}
10006596:	b083      	sub	sp, #12
10006598:	af00      	add	r7, sp, #0
1000659a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1000659c:	687b      	ldr	r3, [r7, #4]
1000659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100065a0:	f003 0301 	and.w	r3, r3, #1
100065a4:	2b00      	cmp	r3, #0
100065a6:	d00a      	beq.n	100065be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
100065a8:	687b      	ldr	r3, [r7, #4]
100065aa:	681b      	ldr	r3, [r3, #0]
100065ac:	685b      	ldr	r3, [r3, #4]
100065ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
100065b2:	687b      	ldr	r3, [r7, #4]
100065b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
100065b6:	687b      	ldr	r3, [r7, #4]
100065b8:	681b      	ldr	r3, [r3, #0]
100065ba:	430a      	orrs	r2, r1
100065bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
100065be:	687b      	ldr	r3, [r7, #4]
100065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100065c2:	f003 0302 	and.w	r3, r3, #2
100065c6:	2b00      	cmp	r3, #0
100065c8:	d00a      	beq.n	100065e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
100065ca:	687b      	ldr	r3, [r7, #4]
100065cc:	681b      	ldr	r3, [r3, #0]
100065ce:	685b      	ldr	r3, [r3, #4]
100065d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
100065d4:	687b      	ldr	r3, [r7, #4]
100065d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
100065d8:	687b      	ldr	r3, [r7, #4]
100065da:	681b      	ldr	r3, [r3, #0]
100065dc:	430a      	orrs	r2, r1
100065de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
100065e0:	687b      	ldr	r3, [r7, #4]
100065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100065e4:	f003 0304 	and.w	r3, r3, #4
100065e8:	2b00      	cmp	r3, #0
100065ea:	d00a      	beq.n	10006602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
100065ec:	687b      	ldr	r3, [r7, #4]
100065ee:	681b      	ldr	r3, [r3, #0]
100065f0:	685b      	ldr	r3, [r3, #4]
100065f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
100065f6:	687b      	ldr	r3, [r7, #4]
100065f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100065fa:	687b      	ldr	r3, [r7, #4]
100065fc:	681b      	ldr	r3, [r3, #0]
100065fe:	430a      	orrs	r2, r1
10006600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10006602:	687b      	ldr	r3, [r7, #4]
10006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006606:	f003 0308 	and.w	r3, r3, #8
1000660a:	2b00      	cmp	r3, #0
1000660c:	d00a      	beq.n	10006624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1000660e:	687b      	ldr	r3, [r7, #4]
10006610:	681b      	ldr	r3, [r3, #0]
10006612:	685b      	ldr	r3, [r3, #4]
10006614:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
10006618:	687b      	ldr	r3, [r7, #4]
1000661a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000661c:	687b      	ldr	r3, [r7, #4]
1000661e:	681b      	ldr	r3, [r3, #0]
10006620:	430a      	orrs	r2, r1
10006622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10006624:	687b      	ldr	r3, [r7, #4]
10006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006628:	f003 0310 	and.w	r3, r3, #16
1000662c:	2b00      	cmp	r3, #0
1000662e:	d00a      	beq.n	10006646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10006630:	687b      	ldr	r3, [r7, #4]
10006632:	681b      	ldr	r3, [r3, #0]
10006634:	689b      	ldr	r3, [r3, #8]
10006636:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
1000663a:	687b      	ldr	r3, [r7, #4]
1000663c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000663e:	687b      	ldr	r3, [r7, #4]
10006640:	681b      	ldr	r3, [r3, #0]
10006642:	430a      	orrs	r2, r1
10006644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10006646:	687b      	ldr	r3, [r7, #4]
10006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000664a:	f003 0320 	and.w	r3, r3, #32
1000664e:	2b00      	cmp	r3, #0
10006650:	d00a      	beq.n	10006668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10006652:	687b      	ldr	r3, [r7, #4]
10006654:	681b      	ldr	r3, [r3, #0]
10006656:	689b      	ldr	r3, [r3, #8]
10006658:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
1000665c:	687b      	ldr	r3, [r7, #4]
1000665e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10006660:	687b      	ldr	r3, [r7, #4]
10006662:	681b      	ldr	r3, [r3, #0]
10006664:	430a      	orrs	r2, r1
10006666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10006668:	687b      	ldr	r3, [r7, #4]
1000666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
10006670:	2b00      	cmp	r3, #0
10006672:	d01a      	beq.n	100066aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10006674:	687b      	ldr	r3, [r7, #4]
10006676:	681b      	ldr	r3, [r3, #0]
10006678:	685b      	ldr	r3, [r3, #4]
1000667a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
1000667e:	687b      	ldr	r3, [r7, #4]
10006680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
10006682:	687b      	ldr	r3, [r7, #4]
10006684:	681b      	ldr	r3, [r3, #0]
10006686:	430a      	orrs	r2, r1
10006688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1000668a:	687b      	ldr	r3, [r7, #4]
1000668c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000668e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10006692:	d10a      	bne.n	100066aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10006694:	687b      	ldr	r3, [r7, #4]
10006696:	681b      	ldr	r3, [r3, #0]
10006698:	685b      	ldr	r3, [r3, #4]
1000669a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
1000669e:	687b      	ldr	r3, [r7, #4]
100066a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
100066a2:	687b      	ldr	r3, [r7, #4]
100066a4:	681b      	ldr	r3, [r3, #0]
100066a6:	430a      	orrs	r2, r1
100066a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
100066aa:	687b      	ldr	r3, [r7, #4]
100066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100066ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
100066b2:	2b00      	cmp	r3, #0
100066b4:	d00a      	beq.n	100066cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
100066b6:	687b      	ldr	r3, [r7, #4]
100066b8:	681b      	ldr	r3, [r3, #0]
100066ba:	685b      	ldr	r3, [r3, #4]
100066bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
100066c0:	687b      	ldr	r3, [r7, #4]
100066c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
100066c4:	687b      	ldr	r3, [r7, #4]
100066c6:	681b      	ldr	r3, [r3, #0]
100066c8:	430a      	orrs	r2, r1
100066ca:	605a      	str	r2, [r3, #4]
  }
}
100066cc:	bf00      	nop
100066ce:	370c      	adds	r7, #12
100066d0:	46bd      	mov	sp, r7
100066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
100066d6:	4770      	bx	lr

100066d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
100066d8:	b580      	push	{r7, lr}
100066da:	b086      	sub	sp, #24
100066dc:	af02      	add	r7, sp, #8
100066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
100066e0:	687b      	ldr	r3, [r7, #4]
100066e2:	2200      	movs	r2, #0
100066e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
100066e8:	f7f9 ffd0 	bl	1000068c <HAL_GetTick>
100066ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
100066ee:	687b      	ldr	r3, [r7, #4]
100066f0:	681b      	ldr	r3, [r3, #0]
100066f2:	681b      	ldr	r3, [r3, #0]
100066f4:	f003 0308 	and.w	r3, r3, #8
100066f8:	2b08      	cmp	r3, #8
100066fa:	d10e      	bne.n	1000671a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
100066fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
10006700:	9300      	str	r3, [sp, #0]
10006702:	68fb      	ldr	r3, [r7, #12]
10006704:	2200      	movs	r2, #0
10006706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
1000670a:	6878      	ldr	r0, [r7, #4]
1000670c:	f000 f82c 	bl	10006768 <UART_WaitOnFlagUntilTimeout>
10006710:	4603      	mov	r3, r0
10006712:	2b00      	cmp	r3, #0
10006714:	d001      	beq.n	1000671a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10006716:	2303      	movs	r3, #3
10006718:	e022      	b.n	10006760 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1000671a:	687b      	ldr	r3, [r7, #4]
1000671c:	681b      	ldr	r3, [r3, #0]
1000671e:	681b      	ldr	r3, [r3, #0]
10006720:	f003 0304 	and.w	r3, r3, #4
10006724:	2b04      	cmp	r3, #4
10006726:	d10e      	bne.n	10006746 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10006728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
1000672c:	9300      	str	r3, [sp, #0]
1000672e:	68fb      	ldr	r3, [r7, #12]
10006730:	2200      	movs	r2, #0
10006732:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
10006736:	6878      	ldr	r0, [r7, #4]
10006738:	f000 f816 	bl	10006768 <UART_WaitOnFlagUntilTimeout>
1000673c:	4603      	mov	r3, r0
1000673e:	2b00      	cmp	r3, #0
10006740:	d001      	beq.n	10006746 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10006742:	2303      	movs	r3, #3
10006744:	e00c      	b.n	10006760 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10006746:	687b      	ldr	r3, [r7, #4]
10006748:	2220      	movs	r2, #32
1000674a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
1000674e:	687b      	ldr	r3, [r7, #4]
10006750:	2220      	movs	r2, #32
10006752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_UNLOCK(huart);
10006756:	687b      	ldr	r3, [r7, #4]
10006758:	2200      	movs	r2, #0
1000675a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000675e:	2300      	movs	r3, #0
}
10006760:	4618      	mov	r0, r3
10006762:	3710      	adds	r7, #16
10006764:	46bd      	mov	sp, r7
10006766:	bd80      	pop	{r7, pc}

10006768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10006768:	b580      	push	{r7, lr}
1000676a:	b084      	sub	sp, #16
1000676c:	af00      	add	r7, sp, #0
1000676e:	60f8      	str	r0, [r7, #12]
10006770:	60b9      	str	r1, [r7, #8]
10006772:	603b      	str	r3, [r7, #0]
10006774:	4613      	mov	r3, r2
10006776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10006778:	e062      	b.n	10006840 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1000677a:	69bb      	ldr	r3, [r7, #24]
1000677c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10006780:	d05e      	beq.n	10006840 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10006782:	f7f9 ff83 	bl	1000068c <HAL_GetTick>
10006786:	4602      	mov	r2, r0
10006788:	683b      	ldr	r3, [r7, #0]
1000678a:	1ad3      	subs	r3, r2, r3
1000678c:	69ba      	ldr	r2, [r7, #24]
1000678e:	429a      	cmp	r2, r3
10006790:	d302      	bcc.n	10006798 <UART_WaitOnFlagUntilTimeout+0x30>
10006792:	69bb      	ldr	r3, [r7, #24]
10006794:	2b00      	cmp	r3, #0
10006796:	d11d      	bne.n	100067d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
10006798:	68fb      	ldr	r3, [r7, #12]
1000679a:	681b      	ldr	r3, [r3, #0]
1000679c:	681a      	ldr	r2, [r3, #0]
1000679e:	68fb      	ldr	r3, [r7, #12]
100067a0:	681b      	ldr	r3, [r3, #0]
100067a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
100067a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
100067a8:	68fb      	ldr	r3, [r7, #12]
100067aa:	681b      	ldr	r3, [r3, #0]
100067ac:	689a      	ldr	r2, [r3, #8]
100067ae:	68fb      	ldr	r3, [r7, #12]
100067b0:	681b      	ldr	r3, [r3, #0]
100067b2:	f022 0201 	bic.w	r2, r2, #1
100067b6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
100067b8:	68fb      	ldr	r3, [r7, #12]
100067ba:	2220      	movs	r2, #32
100067bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
100067c0:	68fb      	ldr	r3, [r7, #12]
100067c2:	2220      	movs	r2, #32
100067c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
100067c8:	68fb      	ldr	r3, [r7, #12]
100067ca:	2200      	movs	r2, #0
100067cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
100067d0:	2303      	movs	r3, #3
100067d2:	e045      	b.n	10006860 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
100067d4:	68fb      	ldr	r3, [r7, #12]
100067d6:	681b      	ldr	r3, [r3, #0]
100067d8:	681b      	ldr	r3, [r3, #0]
100067da:	f003 0304 	and.w	r3, r3, #4
100067de:	2b00      	cmp	r3, #0
100067e0:	d02e      	beq.n	10006840 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
100067e2:	68fb      	ldr	r3, [r7, #12]
100067e4:	681b      	ldr	r3, [r3, #0]
100067e6:	69db      	ldr	r3, [r3, #28]
100067e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
100067ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
100067f0:	d126      	bne.n	10006840 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
100067f2:	68fb      	ldr	r3, [r7, #12]
100067f4:	681b      	ldr	r3, [r3, #0]
100067f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
100067fa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
100067fc:	68fb      	ldr	r3, [r7, #12]
100067fe:	681b      	ldr	r3, [r3, #0]
10006800:	681a      	ldr	r2, [r3, #0]
10006802:	68fb      	ldr	r3, [r7, #12]
10006804:	681b      	ldr	r3, [r3, #0]
10006806:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000680a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000680c:	68fb      	ldr	r3, [r7, #12]
1000680e:	681b      	ldr	r3, [r3, #0]
10006810:	689a      	ldr	r2, [r3, #8]
10006812:	68fb      	ldr	r3, [r7, #12]
10006814:	681b      	ldr	r3, [r3, #0]
10006816:	f022 0201 	bic.w	r2, r2, #1
1000681a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
1000681c:	68fb      	ldr	r3, [r7, #12]
1000681e:	2220      	movs	r2, #32
10006820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
10006824:	68fb      	ldr	r3, [r7, #12]
10006826:	2220      	movs	r2, #32
10006828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
1000682c:	68fb      	ldr	r3, [r7, #12]
1000682e:	2220      	movs	r2, #32
10006830:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10006834:	68fb      	ldr	r3, [r7, #12]
10006836:	2200      	movs	r2, #0
10006838:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          
          return HAL_TIMEOUT;
1000683c:	2303      	movs	r3, #3
1000683e:	e00f      	b.n	10006860 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10006840:	68fb      	ldr	r3, [r7, #12]
10006842:	681b      	ldr	r3, [r3, #0]
10006844:	69da      	ldr	r2, [r3, #28]
10006846:	68bb      	ldr	r3, [r7, #8]
10006848:	4013      	ands	r3, r2
1000684a:	68ba      	ldr	r2, [r7, #8]
1000684c:	429a      	cmp	r2, r3
1000684e:	bf0c      	ite	eq
10006850:	2301      	moveq	r3, #1
10006852:	2300      	movne	r3, #0
10006854:	b2db      	uxtb	r3, r3
10006856:	461a      	mov	r2, r3
10006858:	79fb      	ldrb	r3, [r7, #7]
1000685a:	429a      	cmp	r2, r3
1000685c:	d08d      	beq.n	1000677a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1000685e:	2300      	movs	r3, #0
}
10006860:	4618      	mov	r0, r3
10006862:	3710      	adds	r7, #16
10006864:	46bd      	mov	sp, r7
10006866:	bd80      	pop	{r7, pc}

10006868 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
10006868:	b480      	push	{r7}
1000686a:	b085      	sub	sp, #20
1000686c:	af00      	add	r7, sp, #0
1000686e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
10006870:	687b      	ldr	r3, [r7, #4]
10006872:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10006876:	2b01      	cmp	r3, #1
10006878:	d101      	bne.n	1000687e <HAL_UARTEx_DisableFifoMode+0x16>
1000687a:	2302      	movs	r3, #2
1000687c:	e027      	b.n	100068ce <HAL_UARTEx_DisableFifoMode+0x66>
1000687e:	687b      	ldr	r3, [r7, #4]
10006880:	2201      	movs	r2, #1
10006882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10006886:	687b      	ldr	r3, [r7, #4]
10006888:	2224      	movs	r2, #36	; 0x24
1000688a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000688e:	687b      	ldr	r3, [r7, #4]
10006890:	681b      	ldr	r3, [r3, #0]
10006892:	681b      	ldr	r3, [r3, #0]
10006894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10006896:	687b      	ldr	r3, [r7, #4]
10006898:	681b      	ldr	r3, [r3, #0]
1000689a:	681a      	ldr	r2, [r3, #0]
1000689c:	687b      	ldr	r3, [r7, #4]
1000689e:	681b      	ldr	r3, [r3, #0]
100068a0:	f022 0201 	bic.w	r2, r2, #1
100068a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
100068a6:	68fb      	ldr	r3, [r7, #12]
100068a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
100068ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
100068ae:	687b      	ldr	r3, [r7, #4]
100068b0:	2200      	movs	r2, #0
100068b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100068b4:	687b      	ldr	r3, [r7, #4]
100068b6:	681b      	ldr	r3, [r3, #0]
100068b8:	68fa      	ldr	r2, [r7, #12]
100068ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100068bc:	687b      	ldr	r3, [r7, #4]
100068be:	2220      	movs	r2, #32
100068c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100068c4:	687b      	ldr	r3, [r7, #4]
100068c6:	2200      	movs	r2, #0
100068c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
100068cc:	2300      	movs	r3, #0
}
100068ce:	4618      	mov	r0, r3
100068d0:	3714      	adds	r7, #20
100068d2:	46bd      	mov	sp, r7
100068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100068d8:	4770      	bx	lr

100068da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
100068da:	b580      	push	{r7, lr}
100068dc:	b084      	sub	sp, #16
100068de:	af00      	add	r7, sp, #0
100068e0:	6078      	str	r0, [r7, #4]
100068e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
100068e4:	687b      	ldr	r3, [r7, #4]
100068e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
100068ea:	2b01      	cmp	r3, #1
100068ec:	d101      	bne.n	100068f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
100068ee:	2302      	movs	r3, #2
100068f0:	e02d      	b.n	1000694e <HAL_UARTEx_SetTxFifoThreshold+0x74>
100068f2:	687b      	ldr	r3, [r7, #4]
100068f4:	2201      	movs	r2, #1
100068f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
100068fa:	687b      	ldr	r3, [r7, #4]
100068fc:	2224      	movs	r2, #36	; 0x24
100068fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10006902:	687b      	ldr	r3, [r7, #4]
10006904:	681b      	ldr	r3, [r3, #0]
10006906:	681b      	ldr	r3, [r3, #0]
10006908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000690a:	687b      	ldr	r3, [r7, #4]
1000690c:	681b      	ldr	r3, [r3, #0]
1000690e:	681a      	ldr	r2, [r3, #0]
10006910:	687b      	ldr	r3, [r7, #4]
10006912:	681b      	ldr	r3, [r3, #0]
10006914:	f022 0201 	bic.w	r2, r2, #1
10006918:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1000691a:	687b      	ldr	r3, [r7, #4]
1000691c:	681b      	ldr	r3, [r3, #0]
1000691e:	689b      	ldr	r3, [r3, #8]
10006920:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
10006924:	687b      	ldr	r3, [r7, #4]
10006926:	681b      	ldr	r3, [r3, #0]
10006928:	683a      	ldr	r2, [r7, #0]
1000692a:	430a      	orrs	r2, r1
1000692c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000692e:	6878      	ldr	r0, [r7, #4]
10006930:	f000 f850 	bl	100069d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10006934:	687b      	ldr	r3, [r7, #4]
10006936:	681b      	ldr	r3, [r3, #0]
10006938:	68fa      	ldr	r2, [r7, #12]
1000693a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000693c:	687b      	ldr	r3, [r7, #4]
1000693e:	2220      	movs	r2, #32
10006940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10006944:	687b      	ldr	r3, [r7, #4]
10006946:	2200      	movs	r2, #0
10006948:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000694c:	2300      	movs	r3, #0
}
1000694e:	4618      	mov	r0, r3
10006950:	3710      	adds	r7, #16
10006952:	46bd      	mov	sp, r7
10006954:	bd80      	pop	{r7, pc}

10006956 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10006956:	b580      	push	{r7, lr}
10006958:	b084      	sub	sp, #16
1000695a:	af00      	add	r7, sp, #0
1000695c:	6078      	str	r0, [r7, #4]
1000695e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10006960:	687b      	ldr	r3, [r7, #4]
10006962:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10006966:	2b01      	cmp	r3, #1
10006968:	d101      	bne.n	1000696e <HAL_UARTEx_SetRxFifoThreshold+0x18>
1000696a:	2302      	movs	r3, #2
1000696c:	e02d      	b.n	100069ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
1000696e:	687b      	ldr	r3, [r7, #4]
10006970:	2201      	movs	r2, #1
10006972:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10006976:	687b      	ldr	r3, [r7, #4]
10006978:	2224      	movs	r2, #36	; 0x24
1000697a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000697e:	687b      	ldr	r3, [r7, #4]
10006980:	681b      	ldr	r3, [r3, #0]
10006982:	681b      	ldr	r3, [r3, #0]
10006984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10006986:	687b      	ldr	r3, [r7, #4]
10006988:	681b      	ldr	r3, [r3, #0]
1000698a:	681a      	ldr	r2, [r3, #0]
1000698c:	687b      	ldr	r3, [r7, #4]
1000698e:	681b      	ldr	r3, [r3, #0]
10006990:	f022 0201 	bic.w	r2, r2, #1
10006994:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10006996:	687b      	ldr	r3, [r7, #4]
10006998:	681b      	ldr	r3, [r3, #0]
1000699a:	689b      	ldr	r3, [r3, #8]
1000699c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
100069a0:	687b      	ldr	r3, [r7, #4]
100069a2:	681b      	ldr	r3, [r3, #0]
100069a4:	683a      	ldr	r2, [r7, #0]
100069a6:	430a      	orrs	r2, r1
100069a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
100069aa:	6878      	ldr	r0, [r7, #4]
100069ac:	f000 f812 	bl	100069d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100069b0:	687b      	ldr	r3, [r7, #4]
100069b2:	681b      	ldr	r3, [r3, #0]
100069b4:	68fa      	ldr	r2, [r7, #12]
100069b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100069b8:	687b      	ldr	r3, [r7, #4]
100069ba:	2220      	movs	r2, #32
100069bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100069c0:	687b      	ldr	r3, [r7, #4]
100069c2:	2200      	movs	r2, #0
100069c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
100069c8:	2300      	movs	r3, #0
}
100069ca:	4618      	mov	r0, r3
100069cc:	3710      	adds	r7, #16
100069ce:	46bd      	mov	sp, r7
100069d0:	bd80      	pop	{r7, pc}
	...

100069d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
100069d4:	b480      	push	{r7}
100069d6:	b089      	sub	sp, #36	; 0x24
100069d8:	af00      	add	r7, sp, #0
100069da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
100069dc:	4a2f      	ldr	r2, [pc, #188]	; (10006a9c <UARTEx_SetNbDataToProcess+0xc8>)
100069de:	f107 0314 	add.w	r3, r7, #20
100069e2:	e892 0003 	ldmia.w	r2, {r0, r1}
100069e6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
100069ea:	4a2d      	ldr	r2, [pc, #180]	; (10006aa0 <UARTEx_SetNbDataToProcess+0xcc>)
100069ec:	f107 030c 	add.w	r3, r7, #12
100069f0:	e892 0003 	ldmia.w	r2, {r0, r1}
100069f4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
100069f8:	687b      	ldr	r3, [r7, #4]
100069fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100069fc:	2b00      	cmp	r3, #0
100069fe:	d108      	bne.n	10006a12 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
10006a00:	687b      	ldr	r3, [r7, #4]
10006a02:	2201      	movs	r2, #1
10006a04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
10006a08:	687b      	ldr	r3, [r7, #4]
10006a0a:	2201      	movs	r2, #1
10006a0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
10006a10:	e03d      	b.n	10006a8e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
10006a12:	2308      	movs	r3, #8
10006a14:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
10006a16:	2308      	movs	r3, #8
10006a18:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
10006a1a:	687b      	ldr	r3, [r7, #4]
10006a1c:	681b      	ldr	r3, [r3, #0]
10006a1e:	689b      	ldr	r3, [r3, #8]
10006a20:	0e5b      	lsrs	r3, r3, #25
10006a22:	b2db      	uxtb	r3, r3
10006a24:	f003 0307 	and.w	r3, r3, #7
10006a28:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
10006a2a:	687b      	ldr	r3, [r7, #4]
10006a2c:	681b      	ldr	r3, [r3, #0]
10006a2e:	689b      	ldr	r3, [r3, #8]
10006a30:	0f5b      	lsrs	r3, r3, #29
10006a32:	b2db      	uxtb	r3, r3
10006a34:	f003 0307 	and.w	r3, r3, #7
10006a38:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
10006a3a:	7fbb      	ldrb	r3, [r7, #30]
10006a3c:	7f3a      	ldrb	r2, [r7, #28]
10006a3e:	f107 0120 	add.w	r1, r7, #32
10006a42:	440a      	add	r2, r1
10006a44:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
10006a48:	fb02 f303 	mul.w	r3, r2, r3
10006a4c:	7f3a      	ldrb	r2, [r7, #28]
10006a4e:	f107 0120 	add.w	r1, r7, #32
10006a52:	440a      	add	r2, r1
10006a54:	f812 2c14 	ldrb.w	r2, [r2, #-20]
10006a58:	fb93 f3f2 	sdiv	r3, r3, r2
10006a5c:	b29a      	uxth	r2, r3
10006a5e:	687b      	ldr	r3, [r7, #4]
10006a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
10006a64:	7ffb      	ldrb	r3, [r7, #31]
10006a66:	7f7a      	ldrb	r2, [r7, #29]
10006a68:	f107 0120 	add.w	r1, r7, #32
10006a6c:	440a      	add	r2, r1
10006a6e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
10006a72:	fb02 f303 	mul.w	r3, r2, r3
10006a76:	7f7a      	ldrb	r2, [r7, #29]
10006a78:	f107 0120 	add.w	r1, r7, #32
10006a7c:	440a      	add	r2, r1
10006a7e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
10006a82:	fb93 f3f2 	sdiv	r3, r3, r2
10006a86:	b29a      	uxth	r2, r3
10006a88:	687b      	ldr	r3, [r7, #4]
10006a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
10006a8e:	bf00      	nop
10006a90:	3724      	adds	r7, #36	; 0x24
10006a92:	46bd      	mov	sp, r7
10006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
10006a98:	4770      	bx	lr
10006a9a:	bf00      	nop
10006a9c:	10006b98 	.word	0x10006b98
10006aa0:	10006ba0 	.word	0x10006ba0

10006aa4 <__libc_init_array>:
10006aa4:	b570      	push	{r4, r5, r6, lr}
10006aa6:	4e0d      	ldr	r6, [pc, #52]	; (10006adc <__libc_init_array+0x38>)
10006aa8:	4c0d      	ldr	r4, [pc, #52]	; (10006ae0 <__libc_init_array+0x3c>)
10006aaa:	1ba4      	subs	r4, r4, r6
10006aac:	10a4      	asrs	r4, r4, #2
10006aae:	2500      	movs	r5, #0
10006ab0:	42a5      	cmp	r5, r4
10006ab2:	d109      	bne.n	10006ac8 <__libc_init_array+0x24>
10006ab4:	4e0b      	ldr	r6, [pc, #44]	; (10006ae4 <__libc_init_array+0x40>)
10006ab6:	4c0c      	ldr	r4, [pc, #48]	; (10006ae8 <__libc_init_array+0x44>)
10006ab8:	f000 f820 	bl	10006afc <_init>
10006abc:	1ba4      	subs	r4, r4, r6
10006abe:	10a4      	asrs	r4, r4, #2
10006ac0:	2500      	movs	r5, #0
10006ac2:	42a5      	cmp	r5, r4
10006ac4:	d105      	bne.n	10006ad2 <__libc_init_array+0x2e>
10006ac6:	bd70      	pop	{r4, r5, r6, pc}
10006ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
10006acc:	4798      	blx	r3
10006ace:	3501      	adds	r5, #1
10006ad0:	e7ee      	b.n	10006ab0 <__libc_init_array+0xc>
10006ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
10006ad6:	4798      	blx	r3
10006ad8:	3501      	adds	r5, #1
10006ada:	e7f2      	b.n	10006ac2 <__libc_init_array+0x1e>
10006adc:	10006ba8 	.word	0x10006ba8
10006ae0:	10006ba8 	.word	0x10006ba8
10006ae4:	10006ba8 	.word	0x10006ba8
10006ae8:	10006bac 	.word	0x10006bac

10006aec <memset>:
10006aec:	4402      	add	r2, r0
10006aee:	4603      	mov	r3, r0
10006af0:	4293      	cmp	r3, r2
10006af2:	d100      	bne.n	10006af6 <memset+0xa>
10006af4:	4770      	bx	lr
10006af6:	f803 1b01 	strb.w	r1, [r3], #1
10006afa:	e7f9      	b.n	10006af0 <memset+0x4>

10006afc <_init>:
10006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006afe:	bf00      	nop
10006b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
10006b02:	bc08      	pop	{r3}
10006b04:	469e      	mov	lr, r3
10006b06:	4770      	bx	lr

10006b08 <_fini>:
10006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006b0a:	bf00      	nop
10006b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
10006b0e:	bc08      	pop	{r3}
10006b10:	469e      	mov	lr, r3
10006b12:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10006b14 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10006b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 10006b4c <LoopForever+0x2>
  movs  r1, #0
10006b18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10006b1a:	e003      	b.n	10006b24 <LoopCopyDataInit>

10006b1c <CopyDataInit>:
  ldr  r3, =_sidata
10006b1c:	4b0c      	ldr	r3, [pc, #48]	; (10006b50 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10006b1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10006b20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10006b22:	3104      	adds	r1, #4

10006b24 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10006b24:	480b      	ldr	r0, [pc, #44]	; (10006b54 <LoopForever+0xa>)
  ldr  r3, =_edata
10006b26:	4b0c      	ldr	r3, [pc, #48]	; (10006b58 <LoopForever+0xe>)
  adds  r2, r0, r1
10006b28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10006b2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10006b2c:	d3f6      	bcc.n	10006b1c <CopyDataInit>
  ldr  r2, =_sbss
10006b2e:	4a0b      	ldr	r2, [pc, #44]	; (10006b5c <LoopForever+0x12>)
  b  LoopFillZerobss
10006b30:	e002      	b.n	10006b38 <LoopFillZerobss>

10006b32 <FillZerobss>:
  movs  r3, #0
10006b32:	2300      	movs	r3, #0
  str  r3, [r2], #4
10006b34:	f842 3b04 	str.w	r3, [r2], #4

10006b38 <LoopFillZerobss>:
  ldr  r3, = _ebss
10006b38:	4b09      	ldr	r3, [pc, #36]	; (10006b60 <LoopForever+0x16>)
  cmp  r2, r3
10006b3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
10006b3c:	d3f9      	bcc.n	10006b32 <FillZerobss>
  bl  SystemInit
10006b3e:	f7f9 fa87 	bl	10000050 <SystemInit>
 bl __libc_init_array
10006b42:	f7ff ffaf 	bl	10006aa4 <__libc_init_array>
  bl main
10006b46:	f7f9 fac1 	bl	100000cc <main>

10006b4a <LoopForever>:
    b LoopForever
10006b4a:	e7fe      	b.n	10006b4a <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10006b4c:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10006b50:	10006bb0 	.word	0x10006bb0
  ldr  r0, =_sdata
10006b54:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10006b58:	1002000c 	.word	0x1002000c
  ldr  r2, =_sbss
10006b5c:	1002000c 	.word	0x1002000c
  ldr  r3, = _ebss
10006b60:	10020100 	.word	0x10020100
